
/home/maxwell/CTD-IoT/d5/final-fundamentals/target/3.3.0/argon/final-fundamentals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004f40  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8f60  000b8f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8f84  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e564  000b8f88  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  2003e5d0  2003e5d0  0002e5d0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8ff4  000b8ff4  00028ff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b901c  000b901c  0002901c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00132d9d  00000000  00000000  00029020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014db8  00000000  00000000  0015bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002fd8  00000000  00000000  00170b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0003ef2f  00000000  00000000  00173b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0004893e  00000000  00000000  001b2a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0013a304  00000000  00000000  001fb3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003f65e  00000000  00000000  003356be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000a8c0  00000000  00000000  00374d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008bcc  00000000  00000000  0037f5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ff15 	bl	b7e60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 ff1d 	bl	b7e7c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e564 	.word	0x2003e564
   b404c:	000b8f88 	.word	0x000b8f88
   b4050:	2003e5d0 	.word	0x2003e5d0
   b4054:	2003e5d0 	.word	0x2003e5d0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fd65 	bl	b6b30 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8f30 	.word	0x000b8f30
   b4080:	000b8f54 	.word	0x000b8f54

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b924 	b.w	b42d0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f959 	bl	b4340 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bd05 	b.w	b6aa0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bedf 	b.w	b5e58 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bedd 	b.w	b5e58 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bee3 	b.w	b5e68 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fe38 	bl	b5d20 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5c71 	.word	0x000b5c71
   b40b8:	000b7fec 	.word	0x000b7fec

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr
   b40cc:	0000      	movs	r0, r0
	...

000b40d0 <_Z11normalStatev>:
BLYNK_WRITE (V0)
{
  currentState = 3;
}

void normalState() {
   b40d0:	b510      	push	{r4, lr}
  double reading = analogRead(TMP36);
   b40d2:	2013      	movs	r0, #19
   b40d4:	f003 f8df 	bl	b7296 <analogRead>
  double millivolts = (reading / 4095) * 3300; // I looked up the formula before you shared it with the class lol
  double temp = (millivolts - 500) / 10;
  double fahrenheit = (temp * 1.8) + 32;
  display.print("temp: ");
   b40d8:	492b      	ldr	r1, [pc, #172]	; (b4188 <_Z11normalStatev+0xb8>)
  double reading = analogRead(TMP36);
   b40da:	4604      	mov	r4, r0
  display.print("temp: ");
   b40dc:	482b      	ldr	r0, [pc, #172]	; (b418c <_Z11normalStatev+0xbc>)
   b40de:	f002 fd99 	bl	b6c14 <_ZN5Print5printEPKc>
  double reading = analogRead(TMP36);
   b40e2:	4620      	mov	r0, r4
   b40e4:	f003 fb54 	bl	b7790 <__aeabi_i2d>
  double millivolts = (reading / 4095) * 3300; // I looked up the formula before you shared it with the class lol
   b40e8:	a321      	add	r3, pc, #132	; (adr r3, b4170 <_Z11normalStatev+0xa0>)
   b40ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b40ee:	f003 fce3 	bl	b7ab8 <__aeabi_ddiv>
   b40f2:	a321      	add	r3, pc, #132	; (adr r3, b4178 <_Z11normalStatev+0xa8>)
   b40f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b40f8:	f003 fbb4 	bl	b7864 <__aeabi_dmul>
  double temp = (millivolts - 500) / 10;
   b40fc:	4b24      	ldr	r3, [pc, #144]	; (b4190 <_Z11normalStatev+0xc0>)
   b40fe:	2200      	movs	r2, #0
   b4100:	f003 f9f8 	bl	b74f4 <__aeabi_dsub>
   b4104:	4b23      	ldr	r3, [pc, #140]	; (b4194 <_Z11normalStatev+0xc4>)
   b4106:	2200      	movs	r2, #0
   b4108:	f003 fcd6 	bl	b7ab8 <__aeabi_ddiv>
  double fahrenheit = (temp * 1.8) + 32;
   b410c:	a31c      	add	r3, pc, #112	; (adr r3, b4180 <_Z11normalStatev+0xb0>)
   b410e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4112:	f003 fba7 	bl	b7864 <__aeabi_dmul>
   b4116:	4b20      	ldr	r3, [pc, #128]	; (b4198 <_Z11normalStatev+0xc8>)
   b4118:	2200      	movs	r2, #0
   b411a:	f003 f9ed 	bl	b74f8 <__adddf3>
   b411e:	ec41 0b10 	vmov	d0, r0, r1
  display.println(fahrenheit);
   b4122:	2102      	movs	r1, #2
   b4124:	4819      	ldr	r0, [pc, #100]	; (b418c <_Z11normalStatev+0xbc>)
   b4126:	f002 fe79 	bl	b6e1c <_ZN5Print7printlnEdi>
  //unsigned int proxValue = proximitySensor.getProximity();
  unsigned int lightValue = proximitySensor.getAmbient();
   b412a:	481c      	ldr	r0, [pc, #112]	; (b419c <_Z11normalStatev+0xcc>)
   b412c:	f000 fe52 	bl	b4dd4 <_ZN8VCNL404010getAmbientEv>
  digitalWrite(BLUE, LOW);
   b4130:	2100      	movs	r1, #0
  unsigned int lightValue = proximitySensor.getAmbient();
   b4132:	4604      	mov	r4, r0
  digitalWrite(BLUE, LOW);
   b4134:	2007      	movs	r0, #7
   b4136:	f003 f882 	bl	b723e <digitalWrite>
  digitalWrite(RED, LOW);
   b413a:	2100      	movs	r1, #0
   b413c:	2008      	movs	r0, #8
   b413e:	f003 f87e 	bl	b723e <digitalWrite>
  digitalWrite(GREEN, LOW);
   b4142:	2100      	movs	r1, #0
   b4144:	2006      	movs	r0, #6
   b4146:	f003 f87a 	bl	b723e <digitalWrite>
  if (lightValue < minValue) {
   b414a:	4b15      	ldr	r3, [pc, #84]	; (b41a0 <_Z11normalStatev+0xd0>)
   b414c:	681b      	ldr	r3, [r3, #0]
   b414e:	42a3      	cmp	r3, r4
   b4150:	d905      	bls.n	b415e <_Z11normalStatev+0x8e>
    digitalWrite(BLUE, HIGH);
   b4152:	2101      	movs	r1, #1
   b4154:	2007      	movs	r0, #7
    digitalWrite(GREEN, HIGH);
  } else {
    digitalWrite(RED, HIGH);
  }

}
   b4156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(RED, HIGH);
   b415a:	f003 b870 	b.w	b723e <digitalWrite>
  } else if (lightValue < maxValue) {
   b415e:	4b11      	ldr	r3, [pc, #68]	; (b41a4 <_Z11normalStatev+0xd4>)
   b4160:	681b      	ldr	r3, [r3, #0]
   b4162:	42a3      	cmp	r3, r4
    digitalWrite(GREEN, HIGH);
   b4164:	f04f 0101 	mov.w	r1, #1
   b4168:	bf8c      	ite	hi
   b416a:	2006      	movhi	r0, #6
    digitalWrite(RED, HIGH);
   b416c:	2008      	movls	r0, #8
   b416e:	e7f2      	b.n	b4156 <_Z11normalStatev+0x86>
   b4170:	00000000 	.word	0x00000000
   b4174:	40affe00 	.word	0x40affe00
   b4178:	00000000 	.word	0x00000000
   b417c:	40a9c800 	.word	0x40a9c800
   b4180:	cccccccd 	.word	0xcccccccd
   b4184:	3ffccccc 	.word	0x3ffccccc
   b4188:	000b8001 	.word	0x000b8001
   b418c:	2003e63c 	.word	0x2003e63c
   b4190:	407f4000 	.word	0x407f4000
   b4194:	40240000 	.word	0x40240000
   b4198:	40400000 	.word	0x40400000
   b419c:	2003e6b4 	.word	0x2003e6b4
   b41a0:	2003e6b0 	.word	0x2003e6b0
   b41a4:	2003e6ac 	.word	0x2003e6ac

000b41a8 <_Z7mainRuni>:

void mainRun(int reading) {
   b41a8:	b538      	push	{r3, r4, r5, lr}
  switch (currentState) {
   b41aa:	4d3f      	ldr	r5, [pc, #252]	; (b42a8 <_Z7mainRuni+0x100>)
   b41ac:	682b      	ldr	r3, [r5, #0]
void mainRun(int reading) {
   b41ae:	4604      	mov	r4, r0
   b41b0:	2b03      	cmp	r3, #3
   b41b2:	d878      	bhi.n	b42a6 <_Z7mainRuni+0xfe>
   b41b4:	e8df f003 	tbb	[pc, r3]
   b41b8:	6d693902 	.word	0x6d693902
    case 0:
      display.println("select min brightness");
   b41bc:	493b      	ldr	r1, [pc, #236]	; (b42ac <_Z7mainRuni+0x104>)
   b41be:	483c      	ldr	r0, [pc, #240]	; (b42b0 <_Z7mainRuni+0x108>)
   b41c0:	f002 fd3b 	bl	b6c3a <_ZN5Print7printlnEPKc>
      display.print("current value: ");
   b41c4:	493b      	ldr	r1, [pc, #236]	; (b42b4 <_Z7mainRuni+0x10c>)
   b41c6:	483a      	ldr	r0, [pc, #232]	; (b42b0 <_Z7mainRuni+0x108>)
   b41c8:	f002 fd24 	bl	b6c14 <_ZN5Print5printEPKc>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41cc:	2c00      	cmp	r4, #0
   b41ce:	da2a      	bge.n	b4226 <_Z7mainRuni+0x7e>
            t = print('-');
   b41d0:	212d      	movs	r1, #45	; 0x2d
   b41d2:	4837      	ldr	r0, [pc, #220]	; (b42b0 <_Z7mainRuni+0x108>)
   b41d4:	f002 fd22 	bl	b6c1c <_ZN5Print5printEc>
            val = -n;
   b41d8:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41da:	220a      	movs	r2, #10
   b41dc:	4834      	ldr	r0, [pc, #208]	; (b42b0 <_Z7mainRuni+0x108>)
   b41de:	f002 fd36 	bl	b6c4e <_ZN5Print11printNumberEmh>
        n += println();
   b41e2:	4833      	ldr	r0, [pc, #204]	; (b42b0 <_Z7mainRuni+0x108>)
   b41e4:	f002 fd1d 	bl	b6c22 <_ZN5Print7printlnEv>
      display.println(reading);
      display.print("current brightness: ");
   b41e8:	4933      	ldr	r1, [pc, #204]	; (b42b8 <_Z7mainRuni+0x110>)
   b41ea:	4831      	ldr	r0, [pc, #196]	; (b42b0 <_Z7mainRuni+0x108>)
   b41ec:	f002 fd12 	bl	b6c14 <_ZN5Print5printEPKc>
      display.println(proximitySensor.getAmbient());
   b41f0:	4832      	ldr	r0, [pc, #200]	; (b42bc <_Z7mainRuni+0x114>)
   b41f2:	f000 fdef 	bl	b4dd4 <_ZN8VCNL404010getAmbientEv>
        return printNumber(val, base) + t;
   b41f6:	220a      	movs	r2, #10
   b41f8:	4601      	mov	r1, r0
   b41fa:	482d      	ldr	r0, [pc, #180]	; (b42b0 <_Z7mainRuni+0x108>)
   b41fc:	f002 fd27 	bl	b6c4e <_ZN5Print11printNumberEmh>
        n += println();
   b4200:	482b      	ldr	r0, [pc, #172]	; (b42b0 <_Z7mainRuni+0x108>)
   b4202:	f002 fd0e 	bl	b6c22 <_ZN5Print7printlnEv>
      if (digitalRead(BUTTON)) {
   b4206:	200e      	movs	r0, #14
   b4208:	f003 f832 	bl	b7270 <digitalRead>
   b420c:	2800      	cmp	r0, #0
   b420e:	d04a      	beq.n	b42a6 <_Z7mainRuni+0xfe>
        currentState++;
   b4210:	682b      	ldr	r3, [r5, #0]
   b4212:	3301      	adds	r3, #1
   b4214:	602b      	str	r3, [r5, #0]
        minValue = reading;
   b4216:	4b2a      	ldr	r3, [pc, #168]	; (b42c0 <_Z7mainRuni+0x118>)
      display.println(reading);
      display.print("current brightness: ");
      display.println(proximitySensor.getAmbient());
      if (digitalRead(BUTTON)) {
        currentState++;
        maxValue = reading;
   b4218:	601c      	str	r4, [r3, #0]
      break;
    case 3:
      display.setTextSize(5);
      display.println("Hell");
  }
}
   b421a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
   b421e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4222:	f002 bc17 	b.w	b6a54 <delay>
            val = n;
   b4226:	4621      	mov	r1, r4
   b4228:	e7d7      	b.n	b41da <_Z7mainRuni+0x32>
      display.println("select max brightness");
   b422a:	4926      	ldr	r1, [pc, #152]	; (b42c4 <_Z7mainRuni+0x11c>)
   b422c:	4820      	ldr	r0, [pc, #128]	; (b42b0 <_Z7mainRuni+0x108>)
   b422e:	f002 fd04 	bl	b6c3a <_ZN5Print7printlnEPKc>
      display.print("current value: ");
   b4232:	4920      	ldr	r1, [pc, #128]	; (b42b4 <_Z7mainRuni+0x10c>)
   b4234:	481e      	ldr	r0, [pc, #120]	; (b42b0 <_Z7mainRuni+0x108>)
   b4236:	f002 fced 	bl	b6c14 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b423a:	2c00      	cmp	r4, #0
   b423c:	da23      	bge.n	b4286 <_Z7mainRuni+0xde>
            t = print('-');
   b423e:	212d      	movs	r1, #45	; 0x2d
   b4240:	481b      	ldr	r0, [pc, #108]	; (b42b0 <_Z7mainRuni+0x108>)
   b4242:	f002 fceb 	bl	b6c1c <_ZN5Print5printEc>
            val = -n;
   b4246:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4248:	220a      	movs	r2, #10
   b424a:	4819      	ldr	r0, [pc, #100]	; (b42b0 <_Z7mainRuni+0x108>)
   b424c:	f002 fcff 	bl	b6c4e <_ZN5Print11printNumberEmh>
        n += println();
   b4250:	4817      	ldr	r0, [pc, #92]	; (b42b0 <_Z7mainRuni+0x108>)
   b4252:	f002 fce6 	bl	b6c22 <_ZN5Print7printlnEv>
      display.print("current brightness: ");
   b4256:	4918      	ldr	r1, [pc, #96]	; (b42b8 <_Z7mainRuni+0x110>)
   b4258:	4815      	ldr	r0, [pc, #84]	; (b42b0 <_Z7mainRuni+0x108>)
   b425a:	f002 fcdb 	bl	b6c14 <_ZN5Print5printEPKc>
      display.println(proximitySensor.getAmbient());
   b425e:	4817      	ldr	r0, [pc, #92]	; (b42bc <_Z7mainRuni+0x114>)
   b4260:	f000 fdb8 	bl	b4dd4 <_ZN8VCNL404010getAmbientEv>
        return printNumber(val, base) + t;
   b4264:	220a      	movs	r2, #10
   b4266:	4601      	mov	r1, r0
   b4268:	4811      	ldr	r0, [pc, #68]	; (b42b0 <_Z7mainRuni+0x108>)
   b426a:	f002 fcf0 	bl	b6c4e <_ZN5Print11printNumberEmh>
        n += println();
   b426e:	4810      	ldr	r0, [pc, #64]	; (b42b0 <_Z7mainRuni+0x108>)
   b4270:	f002 fcd7 	bl	b6c22 <_ZN5Print7printlnEv>
      if (digitalRead(BUTTON)) {
   b4274:	200e      	movs	r0, #14
   b4276:	f002 fffb 	bl	b7270 <digitalRead>
   b427a:	b1a0      	cbz	r0, b42a6 <_Z7mainRuni+0xfe>
        currentState++;
   b427c:	682b      	ldr	r3, [r5, #0]
   b427e:	3301      	adds	r3, #1
   b4280:	602b      	str	r3, [r5, #0]
        maxValue = reading;
   b4282:	4b11      	ldr	r3, [pc, #68]	; (b42c8 <_Z7mainRuni+0x120>)
   b4284:	e7c8      	b.n	b4218 <_Z7mainRuni+0x70>
            val = n;
   b4286:	4621      	mov	r1, r4
   b4288:	e7de      	b.n	b4248 <_Z7mainRuni+0xa0>
}
   b428a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      normalState();
   b428e:	f7ff bf1f 	b.w	b40d0 <_Z11normalStatev>
      display.setTextSize(5);
   b4292:	4807      	ldr	r0, [pc, #28]	; (b42b0 <_Z7mainRuni+0x108>)
   b4294:	2105      	movs	r1, #5
   b4296:	f001 fb6c 	bl	b5972 <_ZN12Adafruit_GFX11setTextSizeEh>
}
   b429a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display.println("Hell");
   b429e:	490b      	ldr	r1, [pc, #44]	; (b42cc <_Z7mainRuni+0x124>)
   b42a0:	4803      	ldr	r0, [pc, #12]	; (b42b0 <_Z7mainRuni+0x108>)
   b42a2:	f002 bcca 	b.w	b6c3a <_ZN5Print7printlnEPKc>
}
   b42a6:	bd38      	pop	{r3, r4, r5, pc}
   b42a8:	2003e638 	.word	0x2003e638
   b42ac:	000b8008 	.word	0x000b8008
   b42b0:	2003e63c 	.word	0x2003e63c
   b42b4:	000b801e 	.word	0x000b801e
   b42b8:	000b802e 	.word	0x000b802e
   b42bc:	2003e6b4 	.word	0x2003e6b4
   b42c0:	2003e6b0 	.word	0x2003e6b0
   b42c4:	000b8043 	.word	0x000b8043
   b42c8:	2003e6ac 	.word	0x2003e6ac
   b42cc:	000b8059 	.word	0x000b8059

000b42d0 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
   b42d0:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Wire.begin();
   b42d2:	f002 ff01 	bl	b70d8 <_Z19__fetch_global_Wirev>
   b42d6:	f002 fa63 	bl	b67a0 <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);
   b42da:	f002 fefd 	bl	b70d8 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b42de:	4915      	ldr	r1, [pc, #84]	; (b4334 <setup+0x64>)
  pinMode(TMP36, INPUT);
  #ifdef BLYNK
  Blynk.begin("QnAwxbXEtUAXJ_pHkObTkMagiLke5zMZ", IPAddress(167, 172, 234, 162), 8080);
  #endif
  display.setup();
  proximitySensor.begin();
   b42e0:	4c15      	ldr	r4, [pc, #84]	; (b4338 <setup+0x68>)
   b42e2:	f002 fa59 	bl	b6798 <_ZN7TwoWire8setSpeedEm>
  pinMode(GREEN, OUTPUT);
   b42e6:	2101      	movs	r1, #1
   b42e8:	2006      	movs	r0, #6
   b42ea:	f002 ff97 	bl	b721c <pinMode>
  pinMode(BLUE, OUTPUT);
   b42ee:	2101      	movs	r1, #1
   b42f0:	2007      	movs	r0, #7
   b42f2:	f002 ff93 	bl	b721c <pinMode>
  pinMode(RED, OUTPUT);
   b42f6:	2101      	movs	r1, #1
   b42f8:	2008      	movs	r0, #8
   b42fa:	f002 ff8f 	bl	b721c <pinMode>
  pinMode(POT, INPUT);
   b42fe:	2100      	movs	r1, #0
   b4300:	200f      	movs	r0, #15
   b4302:	f002 ff8b 	bl	b721c <pinMode>
  pinMode(BUTTON, INPUT_PULLDOWN);
   b4306:	2103      	movs	r1, #3
   b4308:	200e      	movs	r0, #14
   b430a:	f002 ff87 	bl	b721c <pinMode>
  pinMode(TMP36, INPUT);
   b430e:	2100      	movs	r1, #0
   b4310:	2013      	movs	r0, #19
   b4312:	f002 ff83 	bl	b721c <pinMode>
  display.setup();
   b4316:	4809      	ldr	r0, [pc, #36]	; (b433c <setup+0x6c>)
   b4318:	f000 ff0c 	bl	b5134 <_ZN16OledWingAdafruit5setupEv>
  proximitySensor.begin();
   b431c:	f002 fedc 	bl	b70d8 <_Z19__fetch_global_Wirev>
   b4320:	4601      	mov	r1, r0
   b4322:	4620      	mov	r0, r4
   b4324:	f000 fe41 	bl	b4faa <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnAmbient();
   b4328:	4620      	mov	r0, r4
}
   b432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  proximitySensor.powerOnAmbient();
   b432e:	f000 bdcf 	b.w	b4ed0 <_ZN8VCNL404014powerOnAmbientEv>
   b4332:	bf00      	nop
   b4334:	00061a80 	.word	0x00061a80
   b4338:	2003e6b4 	.word	0x2003e6b4
   b433c:	2003e63c 	.word	0x2003e63c

000b4340 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b4340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // The core of your code will likely live here.
  //
  #ifdef BLYNK
  Blynk.run();
  #endif
  display.loop();
   b4342:	4c10      	ldr	r4, [pc, #64]	; (b4384 <loop+0x44>)
   b4344:	4620      	mov	r0, r4
   b4346:	f000 ff1e 	bl	b5186 <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   b434a:	4620      	mov	r0, r4
   b434c:	f000 fa00 	bl	b4750 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4350:	2500      	movs	r5, #0
   b4352:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  int mappedRead = map(analogRead(POT), 0, 4095, 0, 65535);
   b4356:	200f      	movs	r0, #15
   b4358:	e9c4 5304 	strd	r5, r3, [r4, #16]
   b435c:	f002 ff9b 	bl	b7296 <analogRead>
   b4360:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4364:	9300      	str	r3, [sp, #0]
   b4366:	f640 72ff 	movw	r2, #4095	; 0xfff
   b436a:	462b      	mov	r3, r5
   b436c:	4629      	mov	r1, r5
   b436e:	f002 fb65 	bl	b6a3c <_Z3mapiiiii>
  mainRun(mappedRead);
   b4372:	f7ff ff19 	bl	b41a8 <_Z7mainRuni>
  display.display();
   b4376:	4620      	mov	r0, r4
   b4378:	b003      	add	sp, #12
   b437a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.display();
   b437e:	f000 bc55 	b.w	b4c2c <_ZN16Adafruit_SSD13067displayEv>
   b4382:	bf00      	nop
   b4384:	2003e63c 	.word	0x2003e63c

000b4388 <_GLOBAL__sub_I_SystemMode>:
   b4388:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b438a:	4b12      	ldr	r3, [pc, #72]	; (b43d4 <_GLOBAL__sub_I_SystemMode+0x4c>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   b438c:	4d12      	ldr	r5, [pc, #72]	; (b43d8 <_GLOBAL__sub_I_SystemMode+0x50>)
    SleepResult() {}
   b438e:	4a13      	ldr	r2, [pc, #76]	; (b43dc <_GLOBAL__sub_I_SystemMode+0x54>)
   b4390:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4392:	2400      	movs	r4, #0
   b4394:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4398:	2003      	movs	r0, #3
   b439a:	f001 fd39 	bl	b5e10 <set_system_mode>
   b439e:	4628      	mov	r0, r5
   b43a0:	f002 f956 	bl	b6650 <_ZN9TCPClientC1Ev>
   b43a4:	f105 001c 	add.w	r0, r5, #28
   b43a8:	f002 faf4 	bl	b6994 <_ZN9IPAddressC1Ev>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   b43ac:	4b0c      	ldr	r3, [pc, #48]	; (b43e0 <_GLOBAL__sub_I_SystemMode+0x58>)
VCNL4040 proximitySensor;
   b43ae:	480d      	ldr	r0, [pc, #52]	; (b43e4 <_GLOBAL__sub_I_SystemMode+0x5c>)
   b43b0:	619c      	str	r4, [r3, #24]
   b43b2:	e9c3 5400 	strd	r5, r4, [r3]
   b43b6:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b43ba:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b43be:	839c      	strh	r4, [r3, #28]
   b43c0:	636c      	str	r4, [r5, #52]	; 0x34
   b43c2:	872c      	strh	r4, [r5, #56]	; 0x38
   b43c4:	f000 fccc 	bl	b4d60 <_ZN8VCNL4040C1Ev>
   b43c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   b43cc:	4806      	ldr	r0, [pc, #24]	; (b43e8 <_GLOBAL__sub_I_SystemMode+0x60>)
   b43ce:	2107      	movs	r1, #7
   b43d0:	f000 be82 	b.w	b50d8 <_ZN16OledWingAdafruitC1Ei>
   b43d4:	2003e5f0 	.word	0x2003e5f0
   b43d8:	2003e5fc 	.word	0x2003e5fc
   b43dc:	ffff0000 	.word	0xffff0000
   b43e0:	2003e5d0 	.word	0x2003e5d0
   b43e4:	2003e6b4 	.word	0x2003e6b4
   b43e8:	2003e63c 	.word	0x2003e63c

000b43ec <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b43ec:	4770      	bx	lr

000b43ee <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b43ee:	b510      	push	{r4, lr}
  }
   b43f0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b43f2:	4604      	mov	r4, r0
  }
   b43f4:	f7ff fe53 	bl	b409e <_ZdlPvj>
   b43f8:	4620      	mov	r0, r4
   b43fa:	bd10      	pop	{r4, pc}

000b43fc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b43fc:	b510      	push	{r4, lr}
   b43fe:	4b04      	ldr	r3, [pc, #16]	; (b4410 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4400:	6003      	str	r3, [r0, #0]
   b4402:	4604      	mov	r4, r0
  if(buffer) {
   b4404:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4406:	b108      	cbz	r0, b440c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4408:	f001 fd2e 	bl	b5e68 <free>
    buffer = NULL;
  }
}
   b440c:	4620      	mov	r0, r4
   b440e:	bd10      	pop	{r4, pc}
   b4410:	000b8560 	.word	0x000b8560

000b4414 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4414:	b510      	push	{r4, lr}
   b4416:	4604      	mov	r4, r0
}
   b4418:	f7ff fff0 	bl	b43fc <_ZN16Adafruit_SSD1306D1Ev>
   b441c:	4620      	mov	r0, r4
   b441e:	2150      	movs	r1, #80	; 0x50
   b4420:	f7ff fe3d 	bl	b409e <_ZdlPvj>
   b4424:	4620      	mov	r0, r4
   b4426:	bd10      	pop	{r4, pc}

000b4428 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4428:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b442a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b442c:	db4b      	blt.n	b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b442e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4432:	428c      	cmp	r4, r1
   b4434:	dd47      	ble.n	b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4436:	2a00      	cmp	r2, #0
   b4438:	db45      	blt.n	b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b443a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b443e:	4294      	cmp	r4, r2
   b4440:	dd41      	ble.n	b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4442:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4444:	2c02      	cmp	r4, #2
   b4446:	d01f      	beq.n	b4488 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4448:	2c03      	cmp	r4, #3
   b444a:	d026      	beq.n	b449a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b444c:	2c01      	cmp	r4, #1
   b444e:	d104      	bne.n	b445a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4450:	8904      	ldrh	r4, [r0, #8]
   b4452:	43d2      	mvns	r2, r2
   b4454:	4414      	add	r4, r2
      break;
   b4456:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4458:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b445a:	2b01      	cmp	r3, #1
   b445c:	d023      	beq.n	b44a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b445e:	2b02      	cmp	r3, #2
   b4460:	d032      	beq.n	b44c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4462:	bb83      	cbnz	r3, b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4464:	2a00      	cmp	r2, #0
   b4466:	4613      	mov	r3, r2
   b4468:	8904      	ldrh	r4, [r0, #8]
   b446a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b446c:	bfb8      	it	lt
   b446e:	1dd3      	addlt	r3, r2, #7
   b4470:	10db      	asrs	r3, r3, #3
   b4472:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4476:	f002 0207 	and.w	r2, r2, #7
   b447a:	2301      	movs	r3, #1
   b447c:	4093      	lsls	r3, r2
   b447e:	5c42      	ldrb	r2, [r0, r1]
   b4480:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4484:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4486:	e01e      	b.n	b44c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4488:	8904      	ldrh	r4, [r0, #8]
   b448a:	3c01      	subs	r4, #1
   b448c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b448e:	8944      	ldrh	r4, [r0, #10]
   b4490:	43d2      	mvns	r2, r2
   b4492:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4494:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4496:	b212      	sxth	r2, r2
      break;
   b4498:	e7df      	b.n	b445a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b449a:	8944      	ldrh	r4, [r0, #10]
   b449c:	3c01      	subs	r4, #1
   b449e:	1a64      	subs	r4, r4, r1
      break;
   b44a0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b44a2:	b222      	sxth	r2, r4
      break;
   b44a4:	e7d9      	b.n	b445a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b44a6:	2a00      	cmp	r2, #0
   b44a8:	8904      	ldrh	r4, [r0, #8]
   b44aa:	4613      	mov	r3, r2
   b44ac:	bfb8      	it	lt
   b44ae:	1dd3      	addlt	r3, r2, #7
   b44b0:	10db      	asrs	r3, r3, #3
   b44b2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b44b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b44b8:	f002 0007 	and.w	r0, r2, #7
   b44bc:	2201      	movs	r2, #1
   b44be:	4082      	lsls	r2, r0
   b44c0:	5c58      	ldrb	r0, [r3, r1]
   b44c2:	4302      	orrs	r2, r0
   b44c4:	545a      	strb	r2, [r3, r1]
}
   b44c6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b44c8:	2a00      	cmp	r2, #0
   b44ca:	4613      	mov	r3, r2
   b44cc:	8904      	ldrh	r4, [r0, #8]
   b44ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b44d0:	bfb8      	it	lt
   b44d2:	1dd3      	addlt	r3, r2, #7
   b44d4:	10db      	asrs	r3, r3, #3
   b44d6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b44da:	f002 0207 	and.w	r2, r2, #7
   b44de:	2301      	movs	r3, #1
   b44e0:	fa03 f202 	lsl.w	r2, r3, r2
   b44e4:	5c43      	ldrb	r3, [r0, r1]
   b44e6:	405a      	eors	r2, r3
   b44e8:	e7cc      	b.n	b4484 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000b44ea <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b44ea:	b40e      	push	{r1, r2, r3}
   b44ec:	b503      	push	{r0, r1, lr}
   b44ee:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b44f0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b44f2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b44f6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b44f8:	f002 fc9b 	bl	b6e32 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b44fc:	b002      	add	sp, #8
   b44fe:	f85d eb04 	ldr.w	lr, [sp], #4
   b4502:	b003      	add	sp, #12
   b4504:	4770      	bx	lr
	...

000b4508 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b450a:	4604      	mov	r4, r0
   b450c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b450e:	7922      	ldrb	r2, [r4, #4]
   b4510:	68a3      	ldr	r3, [r4, #8]
   b4512:	b132      	cbz	r2, b4522 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4514:	b9a3      	cbnz	r3, b4540 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4516:	490b      	ldr	r1, [pc, #44]	; (b4544 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4518:	b002      	add	sp, #8
   b451a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b451e:	f002 bb79 	b.w	b6c14 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4522:	4a09      	ldr	r2, [pc, #36]	; (b4548 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4524:	7b26      	ldrb	r6, [r4, #12]
   b4526:	4d09      	ldr	r5, [pc, #36]	; (b454c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4528:	4909      	ldr	r1, [pc, #36]	; (b4550 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b452a:	7b64      	ldrb	r4, [r4, #13]
   b452c:	2e01      	cmp	r6, #1
   b452e:	bf18      	it	ne
   b4530:	4629      	movne	r1, r5
   b4532:	e9cd 1400 	strd	r1, r4, [sp]
   b4536:	4907      	ldr	r1, [pc, #28]	; (b4554 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4538:	f7ff ffd7 	bl	b44ea <_ZN5Print6printfEPKcz>
  }
   b453c:	b002      	add	sp, #8
   b453e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4540:	4a05      	ldr	r2, [pc, #20]	; (b4558 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4542:	e7ef      	b.n	b4524 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4544:	000b806f 	.word	0x000b806f
   b4548:	000b802d 	.word	0x000b802d
   b454c:	000b806b 	.word	0x000b806b
   b4550:	000b8067 	.word	0x000b8067
   b4554:	000b8085 	.word	0x000b8085
   b4558:	000b805e 	.word	0x000b805e

000b455c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b455c:	b570      	push	{r4, r5, r6, lr}
   b455e:	4604      	mov	r4, r0
   b4560:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4562:	2600      	movs	r6, #0
   b4564:	f000 ffac 	bl	b54c0 <_ZN12Adafruit_GFXC1Ess>
   b4568:	4b11      	ldr	r3, [pc, #68]	; (b45b0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b456a:	6023      	str	r3, [r4, #0]
   b456c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b456e:	b915      	cbnz	r5, b4576 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4570:	f002 fdb2 	bl	b70d8 <_Z19__fetch_global_Wirev>
   b4574:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4576:	23ff      	movs	r3, #255	; 0xff
   b4578:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b457c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4580:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4584:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4588:	4b0a      	ldr	r3, [pc, #40]	; (b45b4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b458a:	63a3      	str	r3, [r4, #56]	; 0x38
   b458c:	2301      	movs	r3, #1
   b458e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4592:	9b05      	ldr	r3, [sp, #20]
   b4594:	64a3      	str	r3, [r4, #72]	; 0x48
   b4596:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b459a:	9b06      	ldr	r3, [sp, #24]
   b459c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b459e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b45a2:	6426      	str	r6, [r4, #64]	; 0x40
   b45a4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b45a8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b45aa:	4620      	mov	r0, r4
   b45ac:	bd70      	pop	{r4, r5, r6, pc}
   b45ae:	bf00      	nop
   b45b0:	000b8560 	.word	0x000b8560
   b45b4:	000b80ac 	.word	0x000b80ac

000b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b45b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b45ba:	4604      	mov	r4, r0
  if(wire) { // I2C
   b45bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b45be:	460d      	mov	r5, r1
  if(wire) { // I2C
   b45c0:	b190      	cbz	r0, b45e8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b45c2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b45c6:	f002 f921 	bl	b680c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b45ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b45cc:	6803      	ldr	r3, [r0, #0]
   b45ce:	2100      	movs	r1, #0
   b45d0:	689b      	ldr	r3, [r3, #8]
   b45d2:	4798      	blx	r3
    WIRE_WRITE(c);
   b45d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b45d6:	6803      	ldr	r3, [r0, #0]
   b45d8:	4629      	mov	r1, r5
   b45da:	689b      	ldr	r3, [r3, #8]
   b45dc:	4798      	blx	r3
    wire->endTransmission();
   b45de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b45e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b45e4:	f002 b919 	b.w	b681a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b45e8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b45ec:	4601      	mov	r1, r0
   b45ee:	b298      	uxth	r0, r3
   b45f0:	f002 fe25 	bl	b723e <digitalWrite>
  if(spi) {
   b45f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b45f6:	b120      	cbz	r0, b4602 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b45f8:	4629      	mov	r1, r5
}
   b45fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b45fe:	f002 bd0f 	b.w	b7020 <_ZN8SPIClass8transferEh>
   b4602:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4604:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4606:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b460a:	ea05 0107 	and.w	r1, r5, r7
   b460e:	b280      	uxth	r0, r0
   b4610:	f002 fe15 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4614:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4618:	2101      	movs	r1, #1
   b461a:	b280      	uxth	r0, r0
   b461c:	f002 fe0f 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4620:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4624:	2100      	movs	r1, #0
   b4626:	b280      	uxth	r0, r0
   b4628:	f002 fe09 	bl	b723e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b462c:	3e01      	subs	r6, #1
   b462e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4632:	d1e8      	bne.n	b4606 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4636 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4636:	b538      	push	{r3, r4, r5, lr}
   b4638:	4604      	mov	r4, r0
  TRANSACTION_START
   b463a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b463c:	460d      	mov	r5, r1
  TRANSACTION_START
   b463e:	b180      	cbz	r0, b4662 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
   b4640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4642:	f002 f8a9 	bl	b6798 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4646:	2d00      	cmp	r5, #0
   b4648:	4620      	mov	r0, r4
   b464a:	bf14      	ite	ne
   b464c:	21a7      	movne	r1, #167	; 0xa7
   b464e:	21a6      	moveq	r1, #166	; 0xa6
   b4650:	f7ff ffb2 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4656:	b188      	cbz	r0, b467c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4658:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b465e:	f002 b89b 	b.w	b6798 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4662:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4664:	b118      	cbz	r0, b466e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4666:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b466a:	f002 fc6b 	bl	b6f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b466e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4672:	2100      	movs	r1, #0
   b4674:	b280      	uxth	r0, r0
   b4676:	f002 fde2 	bl	b723e <digitalWrite>
   b467a:	e7e4      	b.n	b4646 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b467c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4680:	2101      	movs	r1, #1
   b4682:	b280      	uxth	r0, r0
   b4684:	f002 fddb 	bl	b723e <digitalWrite>
   b4688:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b468a:	b118      	cbz	r0, b4694 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b468c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4690:	f002 bc3e 	b.w	b6f10 <_ZN8SPIClass14endTransactionEv>
}
   b4694:	bd38      	pop	{r3, r4, r5, pc}

000b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b469a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b469c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b469e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b46a0:	188f      	adds	r7, r1, r2
   b46a2:	b340      	cbz	r0, b46f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b46a4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b46a8:	f002 f8b0 	bl	b680c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b46ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46ae:	6803      	ldr	r3, [r0, #0]
   b46b0:	2100      	movs	r1, #0
   b46b2:	689b      	ldr	r3, [r3, #8]
   b46b4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b46b6:	2601      	movs	r6, #1
    while(n--) {
   b46b8:	42af      	cmp	r7, r5
        wire->endTransmission();
   b46ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b46bc:	d017      	beq.n	b46ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b46be:	2e1f      	cmp	r6, #31
   b46c0:	d90c      	bls.n	b46dc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b46c2:	f002 f8aa 	bl	b681a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b46c6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b46ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46cc:	f002 f89e 	bl	b680c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b46d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46d2:	6803      	ldr	r3, [r0, #0]
   b46d4:	2100      	movs	r1, #0
   b46d6:	689b      	ldr	r3, [r3, #8]
   b46d8:	4798      	blx	r3
        bytesOut = 1;
   b46da:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b46dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b46de:	f815 1b01 	ldrb.w	r1, [r5], #1
   b46e2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b46e4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b46e6:	689b      	ldr	r3, [r3, #8]
   b46e8:	4798      	blx	r3
      bytesOut++;
   b46ea:	b2f6      	uxtb	r6, r6
    while(n--) {
   b46ec:	e7e4      	b.n	b46b8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b46ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b46f2:	f002 b892 	b.w	b681a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b46f6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b46fa:	4601      	mov	r1, r0
   b46fc:	b298      	uxth	r0, r3
   b46fe:	f002 fd9e 	bl	b723e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4702:	42bd      	cmp	r5, r7
   b4704:	d022      	beq.n	b474c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4706:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4708:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b470c:	b118      	cbz	r0, b4716 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b470e:	4649      	mov	r1, r9
   b4710:	f002 fc86 	bl	b7020 <_ZN8SPIClass8transferEh>
   b4714:	e7f5      	b.n	b4702 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4716:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4718:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b471c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4720:	ea09 0108 	and.w	r1, r9, r8
   b4724:	b280      	uxth	r0, r0
   b4726:	f002 fd8a 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b472a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b472e:	2101      	movs	r1, #1
   b4730:	b280      	uxth	r0, r0
   b4732:	f002 fd84 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4736:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b473a:	2100      	movs	r1, #0
   b473c:	b280      	uxth	r0, r0
   b473e:	f002 fd7e 	bl	b723e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4742:	3e01      	subs	r6, #1
   b4744:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4748:	d1e8      	bne.n	b471c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b474a:	e7da      	b.n	b4702 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b474c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4750 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4750:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4754:	1dda      	adds	r2, r3, #7
   b4756:	bf48      	it	mi
   b4758:	f103 020e 	addmi.w	r2, r3, #14
   b475c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4760:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4762:	10d2      	asrs	r2, r2, #3
   b4764:	435a      	muls	r2, r3
   b4766:	2100      	movs	r1, #0
   b4768:	f003 bb88 	b.w	b7e7c <memset>

000b476c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b476c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4770:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4772:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4774:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4778:	4604      	mov	r4, r0
   b477a:	460f      	mov	r7, r1
   b477c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b477e:	b1c3      	cbz	r3, b47b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4780:	4620      	mov	r0, r4
   b4782:	f7ff ffe5 	bl	b4750 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4786:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b478a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b478e:	2820      	cmp	r0, #32
   b4790:	dc21      	bgt.n	b47d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4792:	2320      	movs	r3, #32
   b4794:	2201      	movs	r2, #1
   b4796:	3820      	subs	r0, #32
   b4798:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b479c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b47a0:	2373      	movs	r3, #115	; 0x73
   b47a2:	3973      	subs	r1, #115	; 0x73
   b47a4:	9300      	str	r3, [sp, #0]
   b47a6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b47aa:	4b89      	ldr	r3, [pc, #548]	; (b49d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b47ac:	f340 024f 	sbfx	r2, r0, #1, #16
   b47b0:	e021      	b.n	b47f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b47b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b47b6:	1dd8      	adds	r0, r3, #7
   b47b8:	bf48      	it	mi
   b47ba:	f103 000e 	addmi.w	r0, r3, #14
   b47be:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b47c2:	10c0      	asrs	r0, r0, #3
   b47c4:	4358      	muls	r0, r3
   b47c6:	f001 fb47 	bl	b5e58 <malloc>
   b47ca:	62e0      	str	r0, [r4, #44]	; 0x2c
   b47cc:	2800      	cmp	r0, #0
   b47ce:	d1d7      	bne.n	b4780 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b47d0:	b004      	add	sp, #16
   b47d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b47d6:	3840      	subs	r0, #64	; 0x40
   b47d8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b47dc:	fa02 f280 	sxtah	r2, r2, r0
   b47e0:	2340      	movs	r3, #64	; 0x40
   b47e2:	2001      	movs	r0, #1
   b47e4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b47e8:	2352      	movs	r3, #82	; 0x52
   b47ea:	3952      	subs	r1, #82	; 0x52
   b47ec:	9300      	str	r3, [sp, #0]
   b47ee:	4b79      	ldr	r3, [pc, #484]	; (b49d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b47f0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b47f4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b47f6:	4620      	mov	r0, r4
   b47f8:	f341 014f 	sbfx	r1, r1, #1, #16
   b47fc:	f000 fe76 	bl	b54ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4800:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4802:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4806:	2800      	cmp	r0, #0
   b4808:	d078      	beq.n	b48fc <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b480a:	2d00      	cmp	r5, #0
   b480c:	d174      	bne.n	b48f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b480e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4812:	2b20      	cmp	r3, #32
   b4814:	bf0c      	ite	eq
   b4816:	253c      	moveq	r5, #60	; 0x3c
   b4818:	253d      	movne	r5, #61	; 0x3d
   b481a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b481e:	f1b8 0f00 	cmp.w	r8, #0
   b4822:	d001      	beq.n	b4828 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4824:	f001 ffbc 	bl	b67a0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4828:	b1fe      	cbz	r6, b486a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b482a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b482e:	2800      	cmp	r0, #0
   b4830:	db1b      	blt.n	b486a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4832:	2101      	movs	r1, #1
   b4834:	b280      	uxth	r0, r0
   b4836:	f002 fcf1 	bl	b721c <pinMode>
    digitalWrite(rstPin, HIGH);
   b483a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b483e:	2101      	movs	r1, #1
   b4840:	b280      	uxth	r0, r0
   b4842:	f002 fcfc 	bl	b723e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4846:	2001      	movs	r0, #1
   b4848:	f002 f904 	bl	b6a54 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b484c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4850:	2100      	movs	r1, #0
   b4852:	b280      	uxth	r0, r0
   b4854:	f002 fcf3 	bl	b723e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4858:	200a      	movs	r0, #10
   b485a:	f002 f8fb 	bl	b6a54 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b485e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4862:	2101      	movs	r1, #1
   b4864:	b280      	uxth	r0, r0
   b4866:	f002 fcea 	bl	b723e <digitalWrite>
  TRANSACTION_START
   b486a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b486c:	2800      	cmp	r0, #0
   b486e:	d074      	beq.n	b495a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4870:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4872:	f001 ff91 	bl	b6798 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4876:	2204      	movs	r2, #4
   b4878:	4957      	ldr	r1, [pc, #348]	; (b49d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b487a:	4620      	mov	r0, r4
   b487c:	f7ff ff0b 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4880:	8961      	ldrh	r1, [r4, #10]
   b4882:	3901      	subs	r1, #1
   b4884:	b2c9      	uxtb	r1, r1
   b4886:	4620      	mov	r0, r4
   b4888:	f7ff fe96 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b488c:	4953      	ldr	r1, [pc, #332]	; (b49dc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b488e:	2204      	movs	r2, #4
   b4890:	4620      	mov	r0, r4
   b4892:	f7ff ff00 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4896:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b489a:	2b01      	cmp	r3, #1
   b489c:	bf0c      	ite	eq
   b489e:	2110      	moveq	r1, #16
   b48a0:	2114      	movne	r1, #20
   b48a2:	4620      	mov	r0, r4
   b48a4:	f7ff fe88 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b48a8:	2204      	movs	r2, #4
   b48aa:	494d      	ldr	r1, [pc, #308]	; (b49e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b48ac:	4620      	mov	r0, r4
   b48ae:	f7ff fef2 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b48b2:	68a3      	ldr	r3, [r4, #8]
   b48b4:	4a4b      	ldr	r2, [pc, #300]	; (b49e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b48b6:	4293      	cmp	r3, r2
   b48b8:	d15c      	bne.n	b4974 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b48ba:	494b      	ldr	r1, [pc, #300]	; (b49e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b48bc:	2204      	movs	r2, #4
   b48be:	4620      	mov	r0, r4
   b48c0:	f7ff fee9 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b48c4:	21d9      	movs	r1, #217	; 0xd9
   b48c6:	4620      	mov	r0, r4
   b48c8:	f7ff fe76 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b48cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b48d0:	2b01      	cmp	r3, #1
   b48d2:	bf0c      	ite	eq
   b48d4:	2122      	moveq	r1, #34	; 0x22
   b48d6:	21f1      	movne	r1, #241	; 0xf1
   b48d8:	4620      	mov	r0, r4
   b48da:	f7ff fe6d 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b48de:	4620      	mov	r0, r4
   b48e0:	4942      	ldr	r1, [pc, #264]	; (b49ec <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b48e2:	2206      	movs	r2, #6
   b48e4:	f7ff fed7 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b48e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b48ea:	2800      	cmp	r0, #0
   b48ec:	d063      	beq.n	b49b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b48ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b48f0:	f001 ff52 	bl	b6798 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b48f4:	2001      	movs	r0, #1
   b48f6:	e76b      	b.n	b47d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b48f8:	b26d      	sxtb	r5, r5
   b48fa:	e78e      	b.n	b481a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b48fc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4900:	2101      	movs	r1, #1
   b4902:	b280      	uxth	r0, r0
   b4904:	f002 fc8a 	bl	b721c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4908:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b490c:	2101      	movs	r1, #1
   b490e:	b280      	uxth	r0, r0
   b4910:	f002 fc84 	bl	b721c <pinMode>
    SSD1306_DESELECT
   b4914:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4918:	2101      	movs	r1, #1
   b491a:	b280      	uxth	r0, r0
   b491c:	f002 fc8f 	bl	b723e <digitalWrite>
    if(spi) { // Hardware SPI
   b4920:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4922:	b13d      	cbz	r5, b4934 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4924:	f1b8 0f00 	cmp.w	r8, #0
   b4928:	f43f af7e 	beq.w	b4828 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b492c:	4628      	mov	r0, r5
   b492e:	f002 fadb 	bl	b6ee8 <_ZN8SPIClass5beginEv>
   b4932:	e779      	b.n	b4828 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4934:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4938:	2101      	movs	r1, #1
   b493a:	b280      	uxth	r0, r0
   b493c:	f002 fc6e 	bl	b721c <pinMode>
      pinMode(clkPin , OUTPUT);
   b4940:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4944:	2101      	movs	r1, #1
   b4946:	b280      	uxth	r0, r0
   b4948:	f002 fc68 	bl	b721c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b494c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4950:	4629      	mov	r1, r5
   b4952:	b280      	uxth	r0, r0
   b4954:	f002 fc73 	bl	b723e <digitalWrite>
   b4958:	e766      	b.n	b4828 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b495a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b495c:	b118      	cbz	r0, b4966 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b495e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4962:	f002 faef 	bl	b6f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4966:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b496a:	2100      	movs	r1, #0
   b496c:	b280      	uxth	r0, r0
   b496e:	f002 fc66 	bl	b723e <digitalWrite>
   b4972:	e780      	b.n	b4876 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4974:	4a1e      	ldr	r2, [pc, #120]	; (b49f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4976:	4293      	cmp	r3, r2
   b4978:	d10e      	bne.n	b4998 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b497a:	491e      	ldr	r1, [pc, #120]	; (b49f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b497c:	2203      	movs	r2, #3
   b497e:	4620      	mov	r0, r4
   b4980:	f7ff fe89 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4984:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4988:	2b01      	cmp	r3, #1
   b498a:	bf0c      	ite	eq
   b498c:	219f      	moveq	r1, #159	; 0x9f
   b498e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4990:	4620      	mov	r0, r4
   b4992:	f7ff fe11 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4996:	e795      	b.n	b48c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4998:	4a17      	ldr	r2, [pc, #92]	; (b49f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b499a:	4293      	cmp	r3, r2
   b499c:	d192      	bne.n	b48c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b499e:	4917      	ldr	r1, [pc, #92]	; (b49fc <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b49a0:	2203      	movs	r2, #3
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff fe77 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b49a8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b49ac:	2b01      	cmp	r3, #1
   b49ae:	bf0c      	ite	eq
   b49b0:	2110      	moveq	r1, #16
   b49b2:	21af      	movne	r1, #175	; 0xaf
   b49b4:	e7ec      	b.n	b4990 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b49b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b49ba:	2101      	movs	r1, #1
   b49bc:	b280      	uxth	r0, r0
   b49be:	f002 fc3e 	bl	b723e <digitalWrite>
   b49c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b49c4:	2800      	cmp	r0, #0
   b49c6:	d095      	beq.n	b48f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b49c8:	f002 faa2 	bl	b6f10 <_ZN8SPIClass14endTransactionEv>
   b49cc:	e792      	b.n	b48f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b49ce:	bf00      	nop
   b49d0:	000b8378 	.word	0x000b8378
   b49d4:	000b80b8 	.word	0x000b80b8
   b49d8:	000b85c0 	.word	0x000b85c0
   b49dc:	000b85c4 	.word	0x000b85c4
   b49e0:	000b85c8 	.word	0x000b85c8
   b49e4:	00200080 	.word	0x00200080
   b49e8:	000b85d2 	.word	0x000b85d2
   b49ec:	000b85cc 	.word	0x000b85cc
   b49f0:	00400080 	.word	0x00400080
   b49f4:	000b85d6 	.word	0x000b85d6
   b49f8:	00100060 	.word	0x00100060
   b49fc:	000b85d9 	.word	0x000b85d9

000b4a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4a00:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4a02:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4a04:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4a08:	db3d      	blt.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a0a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4a0e:	4294      	cmp	r4, r2
   b4a10:	dd39      	ble.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4a12:	2900      	cmp	r1, #0
      w += x;
   b4a14:	bfbe      	ittt	lt
   b4a16:	185b      	addlt	r3, r3, r1
   b4a18:	b21b      	sxthlt	r3, r3
      x  = 0;
   b4a1a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b4a1c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b4a20:	18ce      	adds	r6, r1, r3
   b4a22:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b4a24:	bfc4      	itt	gt
   b4a26:	1a63      	subgt	r3, r4, r1
   b4a28:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b4a2a:	2b00      	cmp	r3, #0
   b4a2c:	dd2b      	ble.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b4a2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a30:	10d6      	asrs	r6, r2, #3
   b4a32:	fb14 1106 	smlabb	r1, r4, r6, r1
   b4a36:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b4a38:	f002 0007 	and.w	r0, r2, #7
   b4a3c:	2201      	movs	r2, #1
   b4a3e:	4082      	lsls	r2, r0
      switch(color) {
   b4a40:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b4a42:	b2d2      	uxtb	r2, r2
      switch(color) {
   b4a44:	d016      	beq.n	b4a74 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b4a46:	2d02      	cmp	r5, #2
   b4a48:	d00b      	beq.n	b4a62 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b4a4a:	b9e5      	cbnz	r5, b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b4a4c:	43d2      	mvns	r2, r2
   b4a4e:	b2d2      	uxtb	r2, r2
   b4a50:	440b      	add	r3, r1
   b4a52:	4299      	cmp	r1, r3
   b4a54:	d017      	beq.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a56:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a5a:	4010      	ands	r0, r2
   b4a5c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a60:	e7f7      	b.n	b4a52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b4a62:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b4a64:	4299      	cmp	r1, r3
   b4a66:	d00e      	beq.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a68:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a6c:	4050      	eors	r0, r2
   b4a6e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a72:	e7f7      	b.n	b4a64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b4a74:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b4a76:	4299      	cmp	r1, r3
   b4a78:	d005      	beq.n	b4a86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4a7a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a7e:	4310      	orrs	r0, r2
   b4a80:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a84:	e7f7      	b.n	b4a76 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b4a86:	bd70      	pop	{r4, r5, r6, pc}

000b4a88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4a8a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b4a8c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b4a90:	db76      	blt.n	b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b4a92:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b4a96:	42b1      	cmp	r1, r6
   b4a98:	da72      	bge.n	b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b4a9a:	2a00      	cmp	r2, #0
      __h += __y;
   b4a9c:	bfbe      	ittt	lt
   b4a9e:	189b      	addlt	r3, r3, r2
   b4aa0:	b21b      	sxthlt	r3, r3
      __y = 0;
   b4aa2:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b4aa4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4aa8:	18d7      	adds	r7, r2, r3
   b4aaa:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b4aac:	bfc4      	itt	gt
   b4aae:	1aa3      	subgt	r3, r4, r2
   b4ab0:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b4ab2:	2b00      	cmp	r3, #0
   b4ab4:	dd64      	ble.n	b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b4ab6:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b4aba:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b4abc:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b4ac0:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b4ac4:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b4ac6:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b4aca:	d023      	beq.n	b4b14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b4acc:	f1c2 0208 	rsb	r2, r2, #8
   b4ad0:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b4ad2:	492d      	ldr	r1, [pc, #180]	; (b4b88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b4ad4:	4293      	cmp	r3, r2
   b4ad6:	bf3c      	itt	cc
   b4ad8:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b4adc:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b4ae0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b4ae2:	bf3c      	itt	cc
   b4ae4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b4ae8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b4aec:	2d01      	cmp	r5, #1
   b4aee:	d007      	beq.n	b4b00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b4af0:	2d02      	cmp	r5, #2
   b4af2:	d02e      	beq.n	b4b52 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b4af4:	b94d      	cbnz	r5, b4b0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b4af6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4afa:	ea2c 0101 	bic.w	r1, ip, r1
   b4afe:	e003      	b.n	b4b08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b4b00:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4b04:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b4b08:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b4b0a:	4293      	cmp	r3, r2
   b4b0c:	d338      	bcc.n	b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b4b0e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b4b12:	440c      	add	r4, r1
        h -= mod;
   b4b14:	1a9a      	subs	r2, r3, r2
   b4b16:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b4b18:	2a07      	cmp	r2, #7
   b4b1a:	d90e      	bls.n	b4b3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b4b1c:	2d02      	cmp	r5, #2
   b4b1e:	d11d      	bne.n	b4b5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b4b20:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b4b22:	7821      	ldrb	r1, [r4, #0]
   b4b24:	43c9      	mvns	r1, r1
   b4b26:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b4b28:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b4b2a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b4b2e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b4b30:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b4b32:	440c      	add	r4, r1
            } while(h >= 8);
   b4b34:	d8f5      	bhi.n	b4b22 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b4b36:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b4b3a:	b30a      	cbz	r2, b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b4b3c:	4b13      	ldr	r3, [pc, #76]	; (b4b8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b4b3e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b4b40:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b4b42:	d01a      	beq.n	b4b7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b4b44:	2d02      	cmp	r5, #2
   b4b46:	d01c      	beq.n	b4b82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b4b48:	b9d5      	cbnz	r5, b4b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b4b4a:	7822      	ldrb	r2, [r4, #0]
   b4b4c:	ea22 0303 	bic.w	r3, r2, r3
   b4b50:	e015      	b.n	b4b7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b4b52:	f817 c006 	ldrb.w	ip, [r7, r6]
   b4b56:	ea81 010c 	eor.w	r1, r1, ip
   b4b5a:	e7d5      	b.n	b4b08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b4b5c:	1e29      	subs	r1, r5, #0
   b4b5e:	bf18      	it	ne
   b4b60:	2101      	movne	r1, #1
   b4b62:	4249      	negs	r1, r1
   b4b64:	b2c9      	uxtb	r1, r1
   b4b66:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b4b68:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b4b6a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b4b6c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b4b70:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b4b72:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b4b74:	4434      	add	r4, r6
            } while(h >= 8);
   b4b76:	d8f7      	bhi.n	b4b68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b4b78:	e7dd      	b.n	b4b36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b4b7a:	7822      	ldrb	r2, [r4, #0]
   b4b7c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b4b7e:	7023      	strb	r3, [r4, #0]
}
   b4b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b4b82:	7822      	ldrb	r2, [r4, #0]
   b4b84:	4053      	eors	r3, r2
   b4b86:	e7fa      	b.n	b4b7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b4b88:	000b85b0 	.word	0x000b85b0
   b4b8c:	000b85b8 	.word	0x000b85b8

000b4b90 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b90:	b470      	push	{r4, r5, r6}
   b4b92:	4614      	mov	r4, r2
  switch(rotation) {
   b4b94:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b96:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b4b9a:	2a02      	cmp	r2, #2
   b4b9c:	d00d      	beq.n	b4bba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b4b9e:	2a03      	cmp	r2, #3
   b4ba0:	d018      	beq.n	b4bd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b4ba2:	2a01      	cmp	r2, #1
   b4ba4:	d111      	bne.n	b4bca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b4ba6:	8902      	ldrh	r2, [r0, #8]
   b4ba8:	43e4      	mvns	r4, r4
   b4baa:	4414      	add	r4, r2
   b4bac:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b4bae:	9603      	str	r6, [sp, #12]
   b4bb0:	460a      	mov	r2, r1
   b4bb2:	4621      	mov	r1, r4
}
   b4bb4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b4bb6:	f7ff bf67 	b.w	b4a88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b4bba:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b4bbc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b4bbe:	43e4      	mvns	r4, r4
    x -= (w-1);
   b4bc0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b4bc2:	4414      	add	r4, r2
    x -= (w-1);
   b4bc4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b4bc6:	b224      	sxth	r4, r4
    x -= (w-1);
   b4bc8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b4bca:	9603      	str	r6, [sp, #12]
   b4bcc:	4622      	mov	r2, r4
}
   b4bce:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b4bd0:	f7ff bf16 	b.w	b4a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b4bd4:	8945      	ldrh	r5, [r0, #10]
   b4bd6:	4419      	add	r1, r3
   b4bd8:	1a69      	subs	r1, r5, r1
   b4bda:	b209      	sxth	r1, r1
    break;
   b4bdc:	e7e7      	b.n	b4bae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b4bde <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4bde:	b430      	push	{r4, r5}
   b4be0:	4614      	mov	r4, r2
  switch(rotation) {
   b4be2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4be4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b4be8:	2a02      	cmp	r2, #2
   b4bea:	d00d      	beq.n	b4c08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b4bec:	2a03      	cmp	r2, #3
   b4bee:	d018      	beq.n	b4c22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b4bf0:	2a01      	cmp	r2, #1
   b4bf2:	d111      	bne.n	b4c18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b4bf4:	18e2      	adds	r2, r4, r3
   b4bf6:	8904      	ldrh	r4, [r0, #8]
   b4bf8:	1aa4      	subs	r4, r4, r2
   b4bfa:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b4bfc:	9502      	str	r5, [sp, #8]
   b4bfe:	460a      	mov	r2, r1
   b4c00:	4621      	mov	r1, r4
}
   b4c02:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b4c04:	f7ff befc 	b.w	b4a00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b4c08:	8902      	ldrh	r2, [r0, #8]
   b4c0a:	43c9      	mvns	r1, r1
   b4c0c:	4411      	add	r1, r2
    y -= (h-1);
   b4c0e:	18e2      	adds	r2, r4, r3
   b4c10:	8944      	ldrh	r4, [r0, #10]
   b4c12:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b4c14:	b209      	sxth	r1, r1
    y -= (h-1);
   b4c16:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b4c18:	9502      	str	r5, [sp, #8]
   b4c1a:	4622      	mov	r2, r4
}
   b4c1c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b4c1e:	f7ff bf33 	b.w	b4a88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b4c22:	8942      	ldrh	r2, [r0, #10]
   b4c24:	43c9      	mvns	r1, r1
   b4c26:	4411      	add	r1, r2
   b4c28:	b209      	sxth	r1, r1
    break;
   b4c2a:	e7e7      	b.n	b4bfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b4c2c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c30:	4604      	mov	r4, r0
  TRANSACTION_START
   b4c32:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b4c34:	2800      	cmp	r0, #0
   b4c36:	d042      	beq.n	b4cbe <_ZN16Adafruit_SSD13067displayEv+0x92>
   b4c38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4c3a:	f001 fdad 	bl	b6798 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b4c3e:	4947      	ldr	r1, [pc, #284]	; (b4d5c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b4c40:	2205      	movs	r2, #5
   b4c42:	4620      	mov	r0, r4
   b4c44:	f7ff fd27 	bl	b4696 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b4c48:	8921      	ldrh	r1, [r4, #8]
   b4c4a:	3901      	subs	r1, #1
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	b2c9      	uxtb	r1, r1
   b4c50:	f7ff fcb2 	bl	b45b8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b4c54:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4c58:	1dde      	adds	r6, r3, #7
   b4c5a:	bf48      	it	mi
   b4c5c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b4c60:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b4c64:	8923      	ldrh	r3, [r4, #8]
   b4c66:	10f6      	asrs	r6, r6, #3
   b4c68:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b4c6c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b4c70:	2800      	cmp	r0, #0
   b4c72:	d03a      	beq.n	b4cea <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b4c74:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c78:	f001 fdc8 	bl	b680c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b4c7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c7e:	6803      	ldr	r3, [r0, #0]
   b4c80:	2140      	movs	r1, #64	; 0x40
   b4c82:	689b      	ldr	r3, [r3, #8]
   b4c84:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4c86:	2701      	movs	r7, #1
    while(count--) {
   b4c88:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b4c8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b4c8c:	d024      	beq.n	b4cd8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b4c8e:	2f1f      	cmp	r7, #31
   b4c90:	d90c      	bls.n	b4cac <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b4c92:	f001 fdc2 	bl	b681a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4c96:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c9c:	f001 fdb6 	bl	b680c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b4ca0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ca2:	6803      	ldr	r3, [r0, #0]
   b4ca4:	2140      	movs	r1, #64	; 0x40
   b4ca6:	689b      	ldr	r3, [r3, #8]
   b4ca8:	4798      	blx	r3
        bytesOut = 1;
   b4caa:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b4cac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cae:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4cb2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4cb4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b4cb6:	689b      	ldr	r3, [r3, #8]
   b4cb8:	4798      	blx	r3
      bytesOut++;
   b4cba:	b2ff      	uxtb	r7, r7
    while(count--) {
   b4cbc:	e7e4      	b.n	b4c88 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b4cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4cc0:	b118      	cbz	r0, b4cca <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b4cc2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4cc6:	f002 f93d 	bl	b6f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4cca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4cce:	2100      	movs	r1, #0
   b4cd0:	b280      	uxth	r0, r0
   b4cd2:	f002 fab4 	bl	b723e <digitalWrite>
   b4cd6:	e7b2      	b.n	b4c3e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b4cd8:	f001 fd9f 	bl	b681a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b4cdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cde:	b378      	cbz	r0, b4d40 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b4ce0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4ce2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ce6:	f001 bd57 	b.w	b6798 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b4cea:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4cee:	2101      	movs	r1, #1
   b4cf0:	b280      	uxth	r0, r0
   b4cf2:	f002 faa4 	bl	b723e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b4cf6:	42ae      	cmp	r6, r5
   b4cf8:	d0f0      	beq.n	b4cdc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b4cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b4cfc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4d00:	b118      	cbz	r0, b4d0a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b4d02:	4649      	mov	r1, r9
   b4d04:	f002 f98c 	bl	b7020 <_ZN8SPIClass8transferEh>
   b4d08:	e7f5      	b.n	b4cf6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b4d0a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d0c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4d10:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4d14:	ea09 0108 	and.w	r1, r9, r8
   b4d18:	b280      	uxth	r0, r0
   b4d1a:	f002 fa90 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4d1e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d22:	2101      	movs	r1, #1
   b4d24:	b280      	uxth	r0, r0
   b4d26:	f002 fa8a 	bl	b723e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4d2a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d2e:	2100      	movs	r1, #0
   b4d30:	b280      	uxth	r0, r0
   b4d32:	f002 fa84 	bl	b723e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d36:	3f01      	subs	r7, #1
   b4d38:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4d3c:	d1e8      	bne.n	b4d10 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b4d3e:	e7da      	b.n	b4cf6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b4d40:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4d44:	2101      	movs	r1, #1
   b4d46:	b280      	uxth	r0, r0
   b4d48:	f002 fa79 	bl	b723e <digitalWrite>
   b4d4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4d4e:	b118      	cbz	r0, b4d58 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b4d50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b4d54:	f002 b8dc 	b.w	b6f10 <_ZN8SPIClass14endTransactionEv>
}
   b4d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4d5c:	000b85dc 	.word	0x000b85dc

000b4d60 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b4d60:	4770      	bx	lr

000b4d62 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b4d62:	b510      	push	{r4, lr}
   b4d64:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b4d66:	2160      	movs	r1, #96	; 0x60
   b4d68:	6800      	ldr	r0, [r0, #0]
   b4d6a:	f001 fd4b 	bl	b6804 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b4d6e:	6820      	ldr	r0, [r4, #0]
   b4d70:	f001 fd53 	bl	b681a <_ZN7TwoWire15endTransmissionEv>
}
   b4d74:	fab0 f080 	clz	r0, r0
   b4d78:	0940      	lsrs	r0, r0, #5
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b4d7c:	b538      	push	{r3, r4, r5, lr}
   b4d7e:	4605      	mov	r5, r0
   b4d80:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b4d82:	6800      	ldr	r0, [r0, #0]
   b4d84:	2160      	movs	r1, #96	; 0x60
   b4d86:	f001 fd3d 	bl	b6804 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b4d8a:	6828      	ldr	r0, [r5, #0]
   b4d8c:	6803      	ldr	r3, [r0, #0]
   b4d8e:	4621      	mov	r1, r4
   b4d90:	689b      	ldr	r3, [r3, #8]
   b4d92:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b4d94:	6828      	ldr	r0, [r5, #0]
   b4d96:	2100      	movs	r1, #0
   b4d98:	f001 fd3b 	bl	b6812 <_ZN7TwoWire15endTransmissionEh>
   b4d9c:	b108      	cbz	r0, b4da2 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b4d9e:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b4da0:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b4da2:	6828      	ldr	r0, [r5, #0]
   b4da4:	2202      	movs	r2, #2
   b4da6:	2160      	movs	r1, #96	; 0x60
   b4da8:	f001 fd29 	bl	b67fe <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b4dac:	6828      	ldr	r0, [r5, #0]
   b4dae:	6803      	ldr	r3, [r0, #0]
   b4db0:	691b      	ldr	r3, [r3, #16]
   b4db2:	4798      	blx	r3
   b4db4:	2800      	cmp	r0, #0
   b4db6:	d0f2      	beq.n	b4d9e <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b4db8:	6828      	ldr	r0, [r5, #0]
   b4dba:	6803      	ldr	r3, [r0, #0]
   b4dbc:	695b      	ldr	r3, [r3, #20]
   b4dbe:	4798      	blx	r3
   b4dc0:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b4dc2:	6828      	ldr	r0, [r5, #0]
   b4dc4:	6803      	ldr	r3, [r0, #0]
   b4dc6:	695b      	ldr	r3, [r3, #20]
   b4dc8:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b4dca:	b2e4      	uxtb	r4, r4
   b4dcc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b4dd0:	b280      	uxth	r0, r0
   b4dd2:	e7e5      	b.n	b4da0 <_ZN8VCNL404011readCommandEh+0x24>

000b4dd4 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b4dd4:	2109      	movs	r1, #9
   b4dd6:	f7ff bfd1 	b.w	b4d7c <_ZN8VCNL404011readCommandEh>

000b4dda <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b4dda:	210c      	movs	r1, #12
   b4ddc:	f7ff bfce 	b.w	b4d7c <_ZN8VCNL404011readCommandEh>

000b4de0 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b4de0:	b570      	push	{r4, r5, r6, lr}
   b4de2:	4604      	mov	r4, r0
   b4de4:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b4de6:	6800      	ldr	r0, [r0, #0]
   b4de8:	2160      	movs	r1, #96	; 0x60
{
   b4dea:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b4dec:	f001 fd0a 	bl	b6804 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b4df0:	6820      	ldr	r0, [r4, #0]
   b4df2:	6803      	ldr	r3, [r0, #0]
   b4df4:	4631      	mov	r1, r6
   b4df6:	689b      	ldr	r3, [r3, #8]
   b4df8:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b4dfa:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4dfc:	6803      	ldr	r3, [r0, #0]
   b4dfe:	b2e9      	uxtb	r1, r5
   b4e00:	689b      	ldr	r3, [r3, #8]
   b4e02:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b4e04:	6820      	ldr	r0, [r4, #0]
   b4e06:	6803      	ldr	r3, [r0, #0]
   b4e08:	0a29      	lsrs	r1, r5, #8
   b4e0a:	689b      	ldr	r3, [r3, #8]
   b4e0c:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b4e0e:	6820      	ldr	r0, [r4, #0]
   b4e10:	f001 fd03 	bl	b681a <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b4e14:	fab0 f080 	clz	r0, r0
   b4e18:	0940      	lsrs	r0, r0, #5
   b4e1a:	bd70      	pop	{r4, r5, r6, pc}

000b4e1c <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b4e1c:	b570      	push	{r4, r5, r6, lr}
   b4e1e:	4604      	mov	r4, r0
   b4e20:	460d      	mov	r5, r1
   b4e22:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b4e24:	f7ff ffaa 	bl	b4d7c <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b4e28:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b4e2c:	ea40 0206 	orr.w	r2, r0, r6
   b4e30:	4629      	mov	r1, r5
   b4e32:	4620      	mov	r0, r4
}
   b4e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b4e38:	f7ff bfd2 	b.w	b4de0 <_ZN8VCNL404012writeCommandEht>

000b4e3c <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b4e3c:	b570      	push	{r4, r5, r6, lr}
   b4e3e:	4604      	mov	r4, r0
   b4e40:	460d      	mov	r5, r1
   b4e42:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b4e44:	f7ff ff9a 	bl	b4d7c <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b4e48:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b4e4a:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b4e4e:	4629      	mov	r1, r5
   b4e50:	4620      	mov	r0, r4
}
   b4e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b4e56:	f7ff bfc3 	b.w	b4de0 <_ZN8VCNL404012writeCommandEht>

000b4e5a <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b4e5a:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b4e5c:	f7ff ff8e 	bl	b4d7c <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b4e60:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b4e64:	bd08      	pop	{r3, pc}

000b4e66 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b4e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4e6a:	4604      	mov	r4, r0
   b4e6c:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b4e70:	460d      	mov	r5, r1
   b4e72:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b4e74:	4616      	mov	r6, r2
   b4e76:	b16a      	cbz	r2, b4e94 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b4e78:	f7ff ff80 	bl	b4d7c <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b4e7c:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b4e7e:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b4e82:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b4e86:	4629      	mov	r1, r5
   b4e88:	4620      	mov	r0, r4
   b4e8a:	b136      	cbz	r6, b4e9a <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b4e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b4e90:	f7ff bfc4 	b.w	b4e1c <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b4e94:	f7ff ffe1 	bl	b4e5a <_ZN8VCNL404016readCommandUpperEh>
   b4e98:	e7f1      	b.n	b4e7e <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b4e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b4e9e:	f7ff bfcd 	b.w	b4e3c <_ZN8VCNL404017writeCommandUpperEhh>

000b4ea2 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b4ea2:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b4ea6:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b4ea8:	d20e      	bcs.n	b4ec8 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b4eaa:	299f      	cmp	r1, #159	; 0x9f
   b4eac:	d80e      	bhi.n	b4ecc <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b4eae:	294f      	cmp	r1, #79	; 0x4f
   b4eb0:	bf8c      	ite	hi
   b4eb2:	2340      	movhi	r3, #64	; 0x40
   b4eb4:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b4eb6:	9300      	str	r3, [sp, #0]
   b4eb8:	2201      	movs	r2, #1
   b4eba:	233f      	movs	r3, #63	; 0x3f
   b4ebc:	2103      	movs	r1, #3
   b4ebe:	f7ff ffd2 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4ec2:	b003      	add	sp, #12
   b4ec4:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b4ec8:	23c0      	movs	r3, #192	; 0xc0
   b4eca:	e7f4      	b.n	b4eb6 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b4ecc:	2380      	movs	r3, #128	; 0x80
   b4ece:	e7f2      	b.n	b4eb6 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b4ed0 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b4ed0:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b4ed2:	2100      	movs	r1, #0
   b4ed4:	9100      	str	r1, [sp, #0]
   b4ed6:	23fe      	movs	r3, #254	; 0xfe
   b4ed8:	2201      	movs	r2, #1
   b4eda:	f7ff ffc4 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4ede:	b003      	add	sp, #12
   b4ee0:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ee4 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b4ee4:	2907      	cmp	r1, #7
{
   b4ee6:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b4ee8:	d80f      	bhi.n	b4f0a <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b4eea:	2903      	cmp	r1, #3
   b4eec:	d80f      	bhi.n	b4f0e <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b4eee:	d010      	beq.n	b4f12 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b4ef0:	2902      	cmp	r1, #2
   b4ef2:	bf0c      	ite	eq
   b4ef4:	2304      	moveq	r3, #4
   b4ef6:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b4ef8:	9300      	str	r3, [sp, #0]
   b4efa:	2201      	movs	r2, #1
   b4efc:	23f1      	movs	r3, #241	; 0xf1
   b4efe:	2103      	movs	r1, #3
   b4f00:	f7ff ffb1 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4f04:	b003      	add	sp, #12
   b4f06:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b4f0a:	230e      	movs	r3, #14
   b4f0c:	e7f4      	b.n	b4ef8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b4f0e:	230c      	movs	r3, #12
   b4f10:	e7f2      	b.n	b4ef8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b4f12:	2308      	movs	r3, #8
   b4f14:	e7f0      	b.n	b4ef8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b4f16 <_ZN8VCNL404016powerOnProximityEv>:
{
   b4f16:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b4f18:	2300      	movs	r3, #0
   b4f1a:	9300      	str	r3, [sp, #0]
   b4f1c:	2201      	movs	r2, #1
   b4f1e:	23fe      	movs	r3, #254	; 0xfe
   b4f20:	2103      	movs	r1, #3
   b4f22:	f7ff ffa0 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4f26:	b003      	add	sp, #12
   b4f28:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f2c <_ZN8VCNL404017setProxResolutionEh>:
{
   b4f2c:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b4f2e:	290f      	cmp	r1, #15
   b4f30:	bf8c      	ite	hi
   b4f32:	2308      	movhi	r3, #8
   b4f34:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b4f36:	9300      	str	r3, [sp, #0]
   b4f38:	2200      	movs	r2, #0
   b4f3a:	23f7      	movs	r3, #247	; 0xf7
   b4f3c:	2103      	movs	r1, #3
   b4f3e:	f7ff ff92 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4f42:	b003      	add	sp, #12
   b4f44:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f48 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b4f48:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b4f4a:	2302      	movs	r3, #2
   b4f4c:	9300      	str	r3, [sp, #0]
   b4f4e:	2201      	movs	r2, #1
   b4f50:	23ef      	movs	r3, #239	; 0xef
   b4f52:	2104      	movs	r1, #4
   b4f54:	f7ff ff87 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4f58:	b003      	add	sp, #12
   b4f5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f5e <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b4f5e:	29c7      	cmp	r1, #199	; 0xc7
{
   b4f60:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b4f62:	d816      	bhi.n	b4f92 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b4f64:	29b3      	cmp	r1, #179	; 0xb3
   b4f66:	d816      	bhi.n	b4f96 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b4f68:	299f      	cmp	r1, #159	; 0x9f
   b4f6a:	d816      	bhi.n	b4f9a <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b4f6c:	298b      	cmp	r1, #139	; 0x8b
   b4f6e:	d816      	bhi.n	b4f9e <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b4f70:	2977      	cmp	r1, #119	; 0x77
   b4f72:	d816      	bhi.n	b4fa2 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b4f74:	2963      	cmp	r1, #99	; 0x63
   b4f76:	d816      	bhi.n	b4fa6 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b4f78:	294a      	cmp	r1, #74	; 0x4a
   b4f7a:	bf94      	ite	ls
   b4f7c:	2100      	movls	r1, #0
   b4f7e:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b4f80:	9100      	str	r1, [sp, #0]
   b4f82:	23f8      	movs	r3, #248	; 0xf8
   b4f84:	2200      	movs	r2, #0
   b4f86:	2104      	movs	r1, #4
   b4f88:	f7ff ff6d 	bl	b4e66 <_ZN8VCNL40407bitMaskEhbhh>
}
   b4f8c:	b003      	add	sp, #12
   b4f8e:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b4f92:	2107      	movs	r1, #7
   b4f94:	e7f4      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b4f96:	2106      	movs	r1, #6
   b4f98:	e7f2      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b4f9a:	2105      	movs	r1, #5
   b4f9c:	e7f0      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b4f9e:	2104      	movs	r1, #4
   b4fa0:	e7ee      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b4fa2:	2103      	movs	r1, #3
   b4fa4:	e7ec      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b4fa6:	2102      	movs	r1, #2
   b4fa8:	e7ea      	b.n	b4f80 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b4faa <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b4faa:	b538      	push	{r3, r4, r5, lr}
   b4fac:	4604      	mov	r4, r0
   b4fae:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4fb0:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b4fb2:	f001 fbf5 	bl	b67a0 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	f7ff fed3 	bl	b4d62 <_ZN8VCNL404011isConnectedEv>
   b4fbc:	4605      	mov	r5, r0
   b4fbe:	b910      	cbnz	r0, b4fc6 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b4fc0:	2500      	movs	r5, #0
}
   b4fc2:	4628      	mov	r0, r5
   b4fc4:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f7ff ff07 	bl	b4dda <_ZN8VCNL40405getIDEv>
   b4fcc:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b4fd0:	d1f6      	bne.n	b4fc0 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	21c8      	movs	r1, #200	; 0xc8
   b4fd6:	f7ff ffc2 	bl	b4f5e <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b4fda:	4620      	mov	r0, r4
   b4fdc:	2128      	movs	r1, #40	; 0x28
   b4fde:	f7ff ff60 	bl	b4ea2 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b4fe2:	4620      	mov	r0, r4
   b4fe4:	2108      	movs	r1, #8
   b4fe6:	f7ff ff7d 	bl	b4ee4 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b4fea:	2110      	movs	r1, #16
   b4fec:	4620      	mov	r0, r4
   b4fee:	f7ff ff9d 	bl	b4f2c <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b4ff2:	4620      	mov	r0, r4
   b4ff4:	f7ff ffa8 	bl	b4f48 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b4ff8:	4620      	mov	r0, r4
   b4ffa:	f7ff ff8c 	bl	b4f16 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b4ffe:	e7e0      	b.n	b4fc2 <_ZN8VCNL40405beginER7TwoWire+0x18>

000b5000 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5000:	2100      	movs	r1, #0
   b5002:	220a      	movs	r2, #10
   b5004:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5008:	4770      	bx	lr

000b500a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b500a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b500c:	b510      	push	{r4, lr}
   b500e:	4604      	mov	r4, r0
    this->pin = pin;
   b5010:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5012:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5014:	b288      	uxth	r0, r1
   b5016:	f002 f92b 	bl	b7270 <digitalRead>
   b501a:	b108      	cbz	r0, b5020 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b501c:	2303      	movs	r3, #3
   b501e:	71a3      	strb	r3, [r4, #6]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5020:	f000 fe2e 	bl	b5c80 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5024:	6020      	str	r0, [r4, #0]
#endif
}
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5028:	b538      	push	{r3, r4, r5, lr}
   b502a:	460c      	mov	r4, r1
   b502c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b502e:	4611      	mov	r1, r2
   b5030:	b2a0      	uxth	r0, r4
   b5032:	f002 f8f3 	bl	b721c <pinMode>
  
  this->attach(pin);
   b5036:	4621      	mov	r1, r4
   b5038:	4628      	mov	r0, r5
}
   b503a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b503e:	f7ff bfe4 	b.w	b500a <_ZN8Debounce6attachEi>

000b5042 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5042:	b538      	push	{r3, r4, r5, lr}
   b5044:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5046:	79c0      	ldrb	r0, [r0, #7]
   b5048:	f002 f912 	bl	b7270 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b504c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b504e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5050:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5054:	bf18      	it	ne
   b5056:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5058:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b505c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b505e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5060:	d00a      	beq.n	b5078 <_ZN8Debounce6updateEv+0x36>
   b5062:	f000 fe0d 	bl	b5c80 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5066:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5068:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b506a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b506e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5070:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5072:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5076:	bd38      	pop	{r3, r4, r5, pc}
   b5078:	f000 fe02 	bl	b5c80 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b507c:	6823      	ldr	r3, [r4, #0]
   b507e:	1ac0      	subs	r0, r0, r3
   b5080:	88a3      	ldrh	r3, [r4, #4]
   b5082:	4298      	cmp	r0, r3
   b5084:	d3f4      	bcc.n	b5070 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5086:	79a3      	ldrb	r3, [r4, #6]
   b5088:	f003 0301 	and.w	r3, r3, #1
   b508c:	42ab      	cmp	r3, r5
   b508e:	d0ef      	beq.n	b5070 <_ZN8Debounce6updateEv+0x2e>
   b5090:	f000 fdf6 	bl	b5c80 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5094:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5096:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5098:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b509c:	f043 0308 	orr.w	r3, r3, #8
   b50a0:	e7e5      	b.n	b506e <_ZN8Debounce6updateEv+0x2c>
	...

000b50a4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b50a4:	b510      	push	{r4, lr}
   b50a6:	4b06      	ldr	r3, [pc, #24]	; (b50c0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b50a8:	6003      	str	r3, [r0, #0]
   b50aa:	4604      	mov	r4, r0
	if (mutex) {
   b50ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b50ae:	b108      	cbz	r0, b50b4 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b50b0:	f000 fdc6 	bl	b5c40 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b50b4:	4620      	mov	r0, r4
   b50b6:	f7ff f9a1 	bl	b43fc <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b50ba:	4620      	mov	r0, r4
   b50bc:	bd10      	pop	{r4, pc}
   b50be:	bf00      	nop
   b50c0:	000b85ec 	.word	0x000b85ec

000b50c4 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b50c4:	b510      	push	{r4, lr}
   b50c6:	4604      	mov	r4, r0
}
   b50c8:	f7ff ffec 	bl	b50a4 <_ZN16OledWingAdafruitD1Ev>
   b50cc:	4620      	mov	r0, r4
   b50ce:	2170      	movs	r1, #112	; 0x70
   b50d0:	f7fe ffe5 	bl	b409e <_ZdlPvj>
   b50d4:	4620      	mov	r0, r4
   b50d6:	bd10      	pop	{r4, pc}

000b50d8 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b50d8:	b530      	push	{r4, r5, lr}
   b50da:	b085      	sub	sp, #20
   b50dc:	4604      	mov	r4, r0
   b50de:	460d      	mov	r5, r1
   b50e0:	f001 fffa 	bl	b70d8 <_Z19__fetch_global_Wirev>
   b50e4:	4a10      	ldr	r2, [pc, #64]	; (b5128 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b50e6:	4911      	ldr	r1, [pc, #68]	; (b512c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b50e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b50ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b50f0:	2180      	movs	r1, #128	; 0x80
   b50f2:	4603      	mov	r3, r0
   b50f4:	9200      	str	r2, [sp, #0]
   b50f6:	4620      	mov	r0, r4
   b50f8:	2220      	movs	r2, #32
   b50fa:	f7ff fa2f 	bl	b455c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b50fe:	4b0c      	ldr	r3, [pc, #48]	; (b5130 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5100:	6023      	str	r3, [r4, #0]
   b5102:	2300      	movs	r3, #0
   b5104:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5108:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b510c:	f7ff ff78 	bl	b5000 <_ZN8DebounceC1Ev>
   b5110:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5114:	f7ff ff74 	bl	b5000 <_ZN8DebounceC1Ev>
   b5118:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b511c:	f7ff ff70 	bl	b5000 <_ZN8DebounceC1Ev>
}
   b5120:	4620      	mov	r0, r4
   b5122:	b005      	add	sp, #20
   b5124:	bd30      	pop	{r4, r5, pc}
   b5126:	bf00      	nop
   b5128:	00061a80 	.word	0x00061a80
   b512c:	000186a0 	.word	0x000186a0
   b5130:	000b85ec 	.word	0x000b85ec

000b5134 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5134:	b513      	push	{r0, r1, r4, lr}
   b5136:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5138:	3050      	adds	r0, #80	; 0x50
   b513a:	f000 fd79 	bl	b5c30 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b513e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5140:	07d9      	lsls	r1, r3, #31
   b5142:	d505      	bpl.n	b5150 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5144:	2202      	movs	r2, #2
   b5146:	2104      	movs	r1, #4
   b5148:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b514c:	f7ff ff6c 	bl	b5028 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5150:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5152:	079a      	lsls	r2, r3, #30
   b5154:	d505      	bpl.n	b5162 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5156:	2200      	movs	r2, #0
   b5158:	2103      	movs	r1, #3
   b515a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b515e:	f7ff ff63 	bl	b5028 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5162:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5164:	075b      	lsls	r3, r3, #29
   b5166:	d505      	bpl.n	b5174 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5168:	2202      	movs	r2, #2
   b516a:	4611      	mov	r1, r2
   b516c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5170:	f7ff ff5a 	bl	b5028 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5174:	2301      	movs	r3, #1
   b5176:	9300      	str	r3, [sp, #0]
   b5178:	223c      	movs	r2, #60	; 0x3c
   b517a:	2102      	movs	r1, #2
   b517c:	4620      	mov	r0, r4
   b517e:	f7ff faf5 	bl	b476c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5182:	b002      	add	sp, #8
   b5184:	bd10      	pop	{r4, pc}

000b5186 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5186:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5188:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b518a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b518c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b518e:	d502      	bpl.n	b5196 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5190:	3058      	adds	r0, #88	; 0x58
   b5192:	f7ff ff56 	bl	b5042 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5196:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5198:	079a      	lsls	r2, r3, #30
   b519a:	d503      	bpl.n	b51a4 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b519c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b51a0:	f7ff ff4f 	bl	b5042 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b51a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b51a6:	075b      	lsls	r3, r3, #29
   b51a8:	d505      	bpl.n	b51b6 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b51aa:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b51ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b51b2:	f7ff bf46 	b.w	b5042 <_ZN8Debounce6updateEv>
}
   b51b6:	bd10      	pop	{r4, pc}

000b51b8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b51b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51bc:	b085      	sub	sp, #20
   b51be:	461f      	mov	r7, r3
   b51c0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b51c4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b51c8:	eba8 0902 	sub.w	r9, r8, r2
   b51cc:	eba7 0a01 	sub.w	sl, r7, r1
   b51d0:	f1b9 0f00 	cmp.w	r9, #0
   b51d4:	bfb8      	it	lt
   b51d6:	f1c9 0900 	rsblt	r9, r9, #0
   b51da:	f1ba 0f00 	cmp.w	sl, #0
   b51de:	bfb8      	it	lt
   b51e0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b51e4:	45d1      	cmp	r9, sl
        uint16_t color) {
   b51e6:	4683      	mov	fp, r0
   b51e8:	460c      	mov	r4, r1
   b51ea:	4615      	mov	r5, r2
    if (steep) {
   b51ec:	dd04      	ble.n	b51f8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b51ee:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b51f0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b51f2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b51f4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b51f6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b51f8:	42bc      	cmp	r4, r7
   b51fa:	dd05      	ble.n	b5208 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b51fc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b51fe:	4645      	mov	r5, r8
   b5200:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5202:	4622      	mov	r2, r4
   b5204:	463c      	mov	r4, r7
   b5206:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5208:	1b3e      	subs	r6, r7, r4
   b520a:	b2b2      	uxth	r2, r6
   b520c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b520e:	eba8 0205 	sub.w	r2, r8, r5
   b5212:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5216:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b521a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b521e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5222:	4545      	cmp	r5, r8
   b5224:	bfb4      	ite	lt
   b5226:	2201      	movlt	r2, #1
   b5228:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b522c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b522e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5230:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5232:	42bc      	cmp	r4, r7
   b5234:	dc1c      	bgt.n	b5270 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5236:	f8db 2000 	ldr.w	r2, [fp]
   b523a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b523c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b523e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5242:	bfc7      	ittee	gt
   b5244:	4629      	movgt	r1, r5
   b5246:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5248:	462a      	movle	r2, r5
   b524a:	4621      	movle	r1, r4
   b524c:	4658      	mov	r0, fp
   b524e:	47c0      	blx	r8
        }
        err -= dy;
   b5250:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5252:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5254:	1ab6      	subs	r6, r6, r2
   b5256:	b2b1      	uxth	r1, r6
   b5258:	b236      	sxth	r6, r6
        if (err < 0) {
   b525a:	2e00      	cmp	r6, #0
   b525c:	da05      	bge.n	b526a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b525e:	9a02      	ldr	r2, [sp, #8]
   b5260:	4415      	add	r5, r2
            err += dx;
   b5262:	9a00      	ldr	r2, [sp, #0]
   b5264:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5266:	b22d      	sxth	r5, r5
            err += dx;
   b5268:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b526a:	3401      	adds	r4, #1
   b526c:	b224      	sxth	r4, r4
   b526e:	e7e0      	b.n	b5232 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5270:	b005      	add	sp, #20
   b5272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5276 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5276:	4770      	bx	lr

000b5278 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5278:	b410      	push	{r4}
    drawPixel(x, y, color);
   b527a:	6804      	ldr	r4, [r0, #0]
   b527c:	6924      	ldr	r4, [r4, #16]
   b527e:	46a4      	mov	ip, r4
}
   b5280:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5284:	4760      	bx	ip

000b5286 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5286:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5288:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b528a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b528e:	9502      	str	r5, [sp, #8]
   b5290:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5292:	46a4      	mov	ip, r4
}
   b5294:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5296:	4760      	bx	ip

000b5298 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5298:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b529a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b529c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b52a0:	9502      	str	r5, [sp, #8]
   b52a2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b52a4:	46a4      	mov	ip, r4
}
   b52a6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b52a8:	4760      	bx	ip

000b52aa <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b52aa:	b470      	push	{r4, r5, r6}
   b52ac:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b52b0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b52b4:	6804      	ldr	r4, [r0, #0]
   b52b6:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b52ba:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b52bc:	46a4      	mov	ip, r4
}
   b52be:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b52c0:	4760      	bx	ip

000b52c2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b52c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52c6:	461c      	mov	r4, r3
    startWrite();
   b52c8:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b52ca:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b52ce:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b52d0:	4605      	mov	r5, r0
   b52d2:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b52d4:	3c01      	subs	r4, #1
   b52d6:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b52d8:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b52da:	b224      	sxth	r4, r4
    startWrite();
   b52dc:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b52de:	682b      	ldr	r3, [r5, #0]
   b52e0:	f8cd 8004 	str.w	r8, [sp, #4]
   b52e4:	9400      	str	r4, [sp, #0]
   b52e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b52e8:	4628      	mov	r0, r5
   b52ea:	463b      	mov	r3, r7
   b52ec:	4632      	mov	r2, r6
   b52ee:	4639      	mov	r1, r7
   b52f0:	47a0      	blx	r4
    endWrite();
   b52f2:	682b      	ldr	r3, [r5, #0]
   b52f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52f6:	4628      	mov	r0, r5
}
   b52f8:	b002      	add	sp, #8
   b52fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b52fe:	4718      	bx	r3

000b5300 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5304:	461d      	mov	r5, r3
    startWrite();
   b5306:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5308:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b530c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b530e:	4604      	mov	r4, r0
   b5310:	4617      	mov	r7, r2
   b5312:	460e      	mov	r6, r1
    startWrite();
   b5314:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5316:	e9cd 7800 	strd	r7, r8, [sp]
   b531a:	6822      	ldr	r2, [r4, #0]
   b531c:	1e6b      	subs	r3, r5, #1
   b531e:	4433      	add	r3, r6
   b5320:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5322:	4620      	mov	r0, r4
   b5324:	b21b      	sxth	r3, r3
   b5326:	463a      	mov	r2, r7
   b5328:	4631      	mov	r1, r6
   b532a:	47a8      	blx	r5
    endWrite();
   b532c:	6823      	ldr	r3, [r4, #0]
   b532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5330:	4620      	mov	r0, r4
}
   b5332:	b002      	add	sp, #8
   b5334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5338:	4718      	bx	r3

000b533a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b533a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b533e:	461e      	mov	r6, r3
    startWrite();
   b5340:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5342:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5346:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5348:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b534c:	460c      	mov	r4, r1
   b534e:	4605      	mov	r5, r0
   b5350:	4617      	mov	r7, r2
    startWrite();
   b5352:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5354:	4426      	add	r6, r4
   b5356:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5358:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b535a:	da0b      	bge.n	b5374 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b535c:	f8cd 8000 	str.w	r8, [sp]
   b5360:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5364:	4621      	mov	r1, r4
   b5366:	464b      	mov	r3, r9
   b5368:	463a      	mov	r2, r7
   b536a:	4628      	mov	r0, r5
   b536c:	3401      	adds	r4, #1
   b536e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5370:	b224      	sxth	r4, r4
   b5372:	e7f0      	b.n	b5356 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5376:	4628      	mov	r0, r5
}
   b5378:	b002      	add	sp, #8
   b537a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b537e:	4718      	bx	r3

000b5380 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5380:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5382:	6802      	ldr	r2, [r0, #0]
   b5384:	9101      	str	r1, [sp, #4]
   b5386:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b538a:	9100      	str	r1, [sp, #0]
   b538c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b538e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5392:	2200      	movs	r2, #0
   b5394:	4611      	mov	r1, r2
   b5396:	47a0      	blx	r4
}
   b5398:	b002      	add	sp, #8
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b539c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b53a0:	4299      	cmp	r1, r3
        uint16_t color) {
   b53a2:	4616      	mov	r6, r2
   b53a4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b53a8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53ac:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b53ae:	4680      	mov	r8, r0
   b53b0:	460d      	mov	r5, r1
   b53b2:	461c      	mov	r4, r3
    if(x0 == x1){
   b53b4:	d113      	bne.n	b53de <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b53b6:	42be      	cmp	r6, r7
   b53b8:	bfc8      	it	gt
   b53ba:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b53c0:	bfc4      	itt	gt
   b53c2:	463e      	movgt	r6, r7
   b53c4:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b53c6:	1c7b      	adds	r3, r7, #1
   b53c8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b53ca:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53cc:	b21b      	sxth	r3, r3
   b53ce:	4632      	mov	r2, r6
   b53d0:	4629      	mov	r1, r5
   b53d2:	4640      	mov	r0, r8
   b53d4:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b53d6:	b003      	add	sp, #12
   b53d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53dc:	4760      	bx	ip
    } else if(y0 == y1){
   b53de:	42be      	cmp	r6, r7
   b53e0:	d10a      	bne.n	b53f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b53e2:	4299      	cmp	r1, r3
   b53e4:	bfc2      	ittt	gt
   b53e6:	460b      	movgt	r3, r1
   b53e8:	4625      	movgt	r5, r4
   b53ea:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b53ec:	1c63      	adds	r3, r4, #1
   b53ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b53f2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b53f4:	1b5b      	subs	r3, r3, r5
   b53f6:	e7e9      	b.n	b53cc <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b53f8:	6953      	ldr	r3, [r2, #20]
   b53fa:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b53fc:	e9cd 7900 	strd	r7, r9, [sp]
   b5400:	f8d8 3000 	ldr.w	r3, [r8]
   b5404:	4640      	mov	r0, r8
   b5406:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5408:	4632      	mov	r2, r6
   b540a:	4623      	mov	r3, r4
   b540c:	4629      	mov	r1, r5
   b540e:	47b8      	blx	r7
        endWrite();
   b5410:	f8d8 3000 	ldr.w	r3, [r8]
   b5414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5416:	4640      	mov	r0, r8
}
   b5418:	b003      	add	sp, #12
   b541a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b541e:	4718      	bx	r3

000b5420 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5420:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5424:	461d      	mov	r5, r3
    startWrite();
   b5426:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5428:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b542c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b542e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5432:	4604      	mov	r4, r0
   b5434:	460f      	mov	r7, r1
   b5436:	4616      	mov	r6, r2
    startWrite();
   b5438:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b543a:	6823      	ldr	r3, [r4, #0]
   b543c:	f8cd 8000 	str.w	r8, [sp]
   b5440:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5444:	4632      	mov	r2, r6
   b5446:	462b      	mov	r3, r5
   b5448:	4639      	mov	r1, r7
   b544a:	4620      	mov	r0, r4
   b544c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b544e:	6823      	ldr	r3, [r4, #0]
   b5450:	f8cd 8000 	str.w	r8, [sp]
   b5454:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5458:	4432      	add	r2, r6
   b545a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b545e:	4639      	mov	r1, r7
   b5460:	462b      	mov	r3, r5
   b5462:	4620      	mov	r0, r4
   b5464:	b212      	sxth	r2, r2
   b5466:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5468:	6823      	ldr	r3, [r4, #0]
   b546a:	f8cd 8000 	str.w	r8, [sp]
   b546e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5472:	4632      	mov	r2, r6
   b5474:	464b      	mov	r3, r9
   b5476:	4639      	mov	r1, r7
   b5478:	4620      	mov	r0, r4
   b547a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b547c:	1e6b      	subs	r3, r5, #1
   b547e:	19d9      	adds	r1, r3, r7
   b5480:	6823      	ldr	r3, [r4, #0]
   b5482:	f8cd 8000 	str.w	r8, [sp]
   b5486:	6a1d      	ldr	r5, [r3, #32]
   b5488:	4620      	mov	r0, r4
   b548a:	464b      	mov	r3, r9
   b548c:	4632      	mov	r2, r6
   b548e:	b209      	sxth	r1, r1
   b5490:	47a8      	blx	r5
    endWrite();
   b5492:	6823      	ldr	r3, [r4, #0]
   b5494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5496:	4620      	mov	r0, r4
}
   b5498:	b002      	add	sp, #8
   b549a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b549e:	4718      	bx	r3

000b54a0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b54a0:	4770      	bx	lr

000b54a2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b54a2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b54a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b54aa:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b54ac:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b54ae:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b54b2:	bf59      	ittee	pl
   b54b4:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b54b6:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b54b8:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b54ba:	81c3      	strhmi	r3, [r0, #14]
}
   b54bc:	4770      	bx	lr
	...

000b54c0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b54c0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b54c2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b54c4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b54c6:	4a07      	ldr	r2, [pc, #28]	; (b54e4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b54c8:	4d07      	ldr	r5, [pc, #28]	; (b54e8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b54ca:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b54cc:	2400      	movs	r4, #0
    _width    = WIDTH;
   b54ce:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b54d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b54d4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b54d8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b54da:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b54dc:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b54de:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b54e0:	6204      	str	r4, [r0, #32]
}
   b54e2:	bd30      	pop	{r4, r5, pc}
   b54e4:	01000101 	.word	0x01000101
   b54e8:	000b8b44 	.word	0x000b8b44

000b54ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b54ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54f0:	b089      	sub	sp, #36	; 0x24
   b54f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b54f6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b54f8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b54fc:	9304      	str	r3, [sp, #16]
   b54fe:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5502:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5504:	9305      	str	r3, [sp, #20]
   b5506:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b550a:	4604      	mov	r4, r0
    startWrite();
   b550c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b550e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5512:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5516:	bf48      	it	mi
   b5518:	f108 020e 	addmi.w	r2, r8, #14
   b551c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5520:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5522:	4635      	mov	r5, r6
   b5524:	9b03      	ldr	r3, [sp, #12]
   b5526:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5528:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b552c:	189a      	adds	r2, r3, r2
   b552e:	9b05      	ldr	r3, [sp, #20]
   b5530:	428b      	cmp	r3, r1
   b5532:	b212      	sxth	r2, r2
   b5534:	dd27      	ble.n	b5586 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5536:	9b04      	ldr	r3, [sp, #16]
   b5538:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b553a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b553e:	9306      	str	r3, [sp, #24]
   b5540:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5544:	4580      	cmp	r8, r0
   b5546:	fa1f f189 	uxth.w	r1, r9
   b554a:	dd17      	ble.n	b557c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b554c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b554e:	bf05      	ittet	eq
   b5550:	9b06      	ldreq	r3, [sp, #24]
   b5552:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5554:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5556:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5558:	bf18      	it	ne
   b555a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b555c:	062b      	lsls	r3, r5, #24
   b555e:	d50a      	bpl.n	b5576 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5560:	9b02      	ldr	r3, [sp, #8]
   b5562:	6820      	ldr	r0, [r4, #0]
   b5564:	9207      	str	r2, [sp, #28]
   b5566:	4419      	add	r1, r3
   b5568:	6983      	ldr	r3, [r0, #24]
   b556a:	b209      	sxth	r1, r1
   b556c:	461f      	mov	r7, r3
   b556e:	4620      	mov	r0, r4
   b5570:	4653      	mov	r3, sl
   b5572:	47b8      	blx	r7
   b5574:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5576:	f109 0901 	add.w	r9, r9, #1
   b557a:	e7e1      	b.n	b5540 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b557c:	9b01      	ldr	r3, [sp, #4]
   b557e:	3301      	adds	r3, #1
   b5580:	9301      	str	r3, [sp, #4]
   b5582:	445e      	add	r6, fp
   b5584:	e7ce      	b.n	b5524 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5586:	6823      	ldr	r3, [r4, #0]
   b5588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b558a:	4620      	mov	r0, r4
}
   b558c:	b009      	add	sp, #36	; 0x24
   b558e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5592:	4718      	bx	r3

000b5594 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5598:	ed2d 8b02 	vpush	{d8}
   b559c:	b091      	sub	sp, #68	; 0x44
   b559e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b55a0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b55a2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b55a6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b55aa:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b55ae:	9103      	str	r1, [sp, #12]
   b55b0:	461f      	mov	r7, r3
   b55b2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b55b6:	9304      	str	r3, [sp, #16]
   b55b8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b55ba:	2a00      	cmp	r2, #0
   b55bc:	f040 80c5 	bne.w	b574a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b55c0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b55c4:	428b      	cmp	r3, r1
   b55c6:	f340 814c 	ble.w	b5862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b55ca:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b55ce:	42b3      	cmp	r3, r6
   b55d0:	f340 8147 	ble.w	b5862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b55d4:	2306      	movs	r3, #6
   b55d6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b55da:	2b00      	cmp	r3, #0
   b55dc:	f340 8141 	ble.w	b5862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b55e0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b55e4:	2b00      	cmp	r3, #0
   b55e6:	f340 813c 	ble.w	b5862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b55ea:	7f03      	ldrb	r3, [r0, #28]
   b55ec:	b91b      	cbnz	r3, b55f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b55ee:	2faf      	cmp	r7, #175	; 0xaf
   b55f0:	bf84      	itt	hi
   b55f2:	3701      	addhi	r7, #1
   b55f4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b55f6:	f8db 3000 	ldr.w	r3, [fp]
   b55fa:	4658      	mov	r0, fp
   b55fc:	695b      	ldr	r3, [r3, #20]
   b55fe:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5600:	2205      	movs	r2, #5
   b5602:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5604:	2200      	movs	r2, #0
   b5606:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5608:	4a98      	ldr	r2, [pc, #608]	; (b586c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b560a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b560e:	18d3      	adds	r3, r2, r3
   b5610:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5612:	b2b3      	uxth	r3, r6
   b5614:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5616:	9a05      	ldr	r2, [sp, #20]
   b5618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b561a:	5c9b      	ldrb	r3, [r3, r2]
   b561c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b561e:	b2ab      	uxth	r3, r5
   b5620:	930b      	str	r3, [sp, #44]	; 0x2c
   b5622:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5626:	9308      	str	r3, [sp, #32]
   b5628:	9b03      	ldr	r3, [sp, #12]
   b562a:	fb02 f905 	mul.w	r9, r2, r5
   b562e:	fa19 f983 	uxtah	r9, r9, r3
   b5632:	fa0f f389 	sxth.w	r3, r9
   b5636:	ee08 3a10 	vmov	s16, r3
   b563a:	2308      	movs	r3, #8
   b563c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b563e:	9b03      	ldr	r3, [sp, #12]
   b5640:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5644:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5648:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b564c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b564e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5652:	07d2      	lsls	r2, r2, #31
   b5654:	d552      	bpl.n	b56fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5656:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5658:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b565c:	d13e      	bne.n	b56dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b565e:	2c01      	cmp	r4, #1
   b5660:	d13c      	bne.n	b56dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5662:	699b      	ldr	r3, [r3, #24]
   b5664:	9906      	ldr	r1, [sp, #24]
   b5666:	461f      	mov	r7, r3
   b5668:	9b04      	ldr	r3, [sp, #16]
   b566a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b566c:	b212      	sxth	r2, r2
   b566e:	4651      	mov	r1, sl
   b5670:	4658      	mov	r0, fp
   b5672:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5674:	f109 0301 	add.w	r3, r9, #1
   b5678:	fa4f f983 	sxtb.w	r9, r3
   b567c:	9b07      	ldr	r3, [sp, #28]
   b567e:	085b      	lsrs	r3, r3, #1
   b5680:	9307      	str	r3, [sp, #28]
   b5682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5684:	3b01      	subs	r3, #1
   b5686:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b568a:	930a      	str	r3, [sp, #40]	; 0x28
   b568c:	d1de      	bne.n	b564c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b568e:	9f05      	ldr	r7, [sp, #20]
   b5690:	3701      	adds	r7, #1
   b5692:	b27b      	sxtb	r3, r7
   b5694:	9305      	str	r3, [sp, #20]
   b5696:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5698:	3b01      	subs	r3, #1
   b569a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b569e:	9309      	str	r3, [sp, #36]	; 0x24
   b56a0:	d1b9      	bne.n	b5616 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b56a2:	9b04      	ldr	r3, [sp, #16]
   b56a4:	4543      	cmp	r3, r8
   b56a6:	d00f      	beq.n	b56c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b56a8:	2d01      	cmp	r5, #1
   b56aa:	f8db 3000 	ldr.w	r3, [fp]
   b56ae:	d13b      	bne.n	b5728 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b56b0:	2c01      	cmp	r4, #1
   b56b2:	d139      	bne.n	b5728 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b56b4:	9908      	ldr	r1, [sp, #32]
   b56b6:	f8cd 8000 	str.w	r8, [sp]
   b56ba:	3105      	adds	r1, #5
   b56bc:	6a1c      	ldr	r4, [r3, #32]
   b56be:	4632      	mov	r2, r6
   b56c0:	2308      	movs	r3, #8
   b56c2:	b209      	sxth	r1, r1
   b56c4:	4658      	mov	r0, fp
   b56c6:	47a0      	blx	r4
        endWrite();
   b56c8:	f8db 3000 	ldr.w	r3, [fp]
   b56cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56ce:	4658      	mov	r0, fp
}
   b56d0:	b011      	add	sp, #68	; 0x44
   b56d2:	ecbd 8b02 	vpop	{d8}
   b56d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b56da:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b56dc:	9906      	ldr	r1, [sp, #24]
   b56de:	fb14 f202 	smulbb	r2, r4, r2
   b56e2:	440a      	add	r2, r1
   b56e4:	9904      	ldr	r1, [sp, #16]
   b56e6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b56e8:	9400      	str	r4, [sp, #0]
   b56ea:	69db      	ldr	r3, [r3, #28]
   b56ec:	ee18 1a10 	vmov	r1, s16
   b56f0:	461f      	mov	r7, r3
   b56f2:	b212      	sxth	r2, r2
   b56f4:	462b      	mov	r3, r5
   b56f6:	4658      	mov	r0, fp
   b56f8:	47b8      	blx	r7
   b56fa:	e7bb      	b.n	b5674 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b56fc:	9a04      	ldr	r2, [sp, #16]
   b56fe:	4542      	cmp	r2, r8
   b5700:	d0b8      	beq.n	b5674 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5702:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5704:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5708:	d107      	bne.n	b571a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b570a:	2c01      	cmp	r4, #1
   b570c:	d105      	bne.n	b571a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b570e:	699b      	ldr	r3, [r3, #24]
   b5710:	9906      	ldr	r1, [sp, #24]
   b5712:	461f      	mov	r7, r3
   b5714:	440a      	add	r2, r1
   b5716:	4643      	mov	r3, r8
   b5718:	e7a8      	b.n	b566c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b571a:	9906      	ldr	r1, [sp, #24]
   b571c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5720:	fb14 f202 	smulbb	r2, r4, r2
   b5724:	440a      	add	r2, r1
   b5726:	e7df      	b.n	b56e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b572a:	f8cd 8004 	str.w	r8, [sp, #4]
   b572e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5732:	9a08      	ldr	r2, [sp, #32]
   b5734:	00e4      	lsls	r4, r4, #3
   b5736:	440a      	add	r2, r1
   b5738:	4611      	mov	r1, r2
   b573a:	9400      	str	r4, [sp, #0]
   b573c:	69dc      	ldr	r4, [r3, #28]
   b573e:	4632      	mov	r2, r6
   b5740:	462b      	mov	r3, r5
   b5742:	b209      	sxth	r1, r1
   b5744:	4658      	mov	r0, fp
   b5746:	47a0      	blx	r4
        endWrite();
   b5748:	e7be      	b.n	b56c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b574a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b574c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b574e:	6812      	ldr	r2, [r2, #0]
   b5750:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5752:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5754:	b2ff      	uxtb	r7, r7
   b5756:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b575a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b575e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5760:	789a      	ldrb	r2, [r3, #2]
   b5762:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5764:	78da      	ldrb	r2, [r3, #3]
   b5766:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5768:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b576a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b576e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5772:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5774:	d801      	bhi.n	b577a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5776:	2c01      	cmp	r4, #1
   b5778:	d957      	bls.n	b582a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b577a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b577e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5780:	fa0f f38a 	sxth.w	r3, sl
   b5784:	9307      	str	r3, [sp, #28]
        startWrite();
   b5786:	f8db 3000 	ldr.w	r3, [fp]
   b578a:	4658      	mov	r0, fp
   b578c:	695b      	ldr	r3, [r3, #20]
   b578e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5790:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5792:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5796:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5798:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b579c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b579e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57a0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b57a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b57a4:	429f      	cmp	r7, r3
   b57a6:	d28f      	bcs.n	b56c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57a8:	9b07      	ldr	r3, [sp, #28]
   b57aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b57ac:	443b      	add	r3, r7
   b57ae:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b57b2:	2200      	movs	r2, #0
   b57b4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57b8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57ba:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57be:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57c2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b57c6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b57c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b57ca:	9905      	ldr	r1, [sp, #20]
   b57cc:	4291      	cmp	r1, r2
   b57ce:	d241      	bcs.n	b5854 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b57d0:	1c5a      	adds	r2, r3, #1
   b57d2:	b2d2      	uxtb	r2, r2
   b57d4:	075b      	lsls	r3, r3, #29
   b57d6:	920d      	str	r2, [sp, #52]	; 0x34
   b57d8:	d107      	bne.n	b57ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b57da:	9b06      	ldr	r3, [sp, #24]
   b57dc:	9906      	ldr	r1, [sp, #24]
   b57de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b57e0:	3301      	adds	r3, #1
   b57e2:	b29b      	uxth	r3, r3
   b57e4:	f812 9001 	ldrb.w	r9, [r2, r1]
   b57e8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b57ea:	f019 0f80 	tst.w	r9, #128	; 0x80
   b57ee:	d012      	beq.n	b5816 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b57f0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b57f2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b57f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b57fa:	d11a      	bne.n	b5832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b57fc:	2c01      	cmp	r4, #1
   b57fe:	d118      	bne.n	b5832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5802:	699b      	ldr	r3, [r3, #24]
   b5804:	4411      	add	r1, r2
   b5806:	9a05      	ldr	r2, [sp, #20]
   b5808:	4411      	add	r1, r2
   b580a:	461e      	mov	r6, r3
   b580c:	4652      	mov	r2, sl
   b580e:	9b04      	ldr	r3, [sp, #16]
   b5810:	b209      	sxth	r1, r1
   b5812:	4658      	mov	r0, fp
   b5814:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5816:	9e05      	ldr	r6, [sp, #20]
   b5818:	3601      	adds	r6, #1
   b581a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b581c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5820:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5822:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5828:	e7ce      	b.n	b57c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b582a:	2300      	movs	r3, #0
   b582c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5830:	e7a9      	b.n	b5786 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5832:	9805      	ldr	r0, [sp, #20]
   b5834:	9a08      	ldr	r2, [sp, #32]
   b5836:	4402      	add	r2, r0
   b5838:	fb02 1105 	mla	r1, r2, r5, r1
   b583c:	9a04      	ldr	r2, [sp, #16]
   b583e:	e9cd 4200 	strd	r4, r2, [sp]
   b5842:	69db      	ldr	r3, [r3, #28]
   b5844:	ee18 2a10 	vmov	r2, s16
   b5848:	461e      	mov	r6, r3
   b584a:	b209      	sxth	r1, r1
   b584c:	462b      	mov	r3, r5
   b584e:	4658      	mov	r0, fp
   b5850:	47b0      	blx	r6
   b5852:	e7e0      	b.n	b5816 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5854:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5856:	3701      	adds	r7, #1
   b5858:	4498      	add	r8, r3
   b585a:	fa5f f888 	uxtb.w	r8, r8
   b585e:	b2ff      	uxtb	r7, r7
   b5860:	e79f      	b.n	b57a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5862:	b011      	add	sp, #68	; 0x44
   b5864:	ecbd 8b02 	vpop	{d8}
   b5868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b586c:	000b863c 	.word	0x000b863c

000b5870 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5870:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5872:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5874:	b085      	sub	sp, #20
   b5876:	4604      	mov	r4, r0
   b5878:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b587a:	2a00      	cmp	r2, #0
   b587c:	d134      	bne.n	b58e8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b587e:	290a      	cmp	r1, #10
   b5880:	d108      	bne.n	b5894 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5882:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5884:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5886:	7e42      	ldrb	r2, [r0, #25]
   b5888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b588c:	8263      	strh	r3, [r4, #18]
}
   b588e:	2001      	movs	r0, #1
   b5890:	b005      	add	sp, #20
   b5892:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5894:	290d      	cmp	r1, #13
   b5896:	d0fa      	beq.n	b588e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5898:	7ee1      	ldrb	r1, [r4, #27]
   b589a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b589c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b589e:	b171      	cbz	r1, b58be <_ZN12Adafruit_GFX5writeEh+0x4e>
   b58a0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b58a4:	2106      	movs	r1, #6
   b58a6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b58aa:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b58ae:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b58b0:	bfc1      	itttt	gt
   b58b2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b58b6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b58b8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b58bc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b58be:	8ae2      	ldrh	r2, [r4, #22]
   b58c0:	9201      	str	r2, [sp, #4]
   b58c2:	8aa2      	ldrh	r2, [r4, #20]
   b58c4:	9200      	str	r2, [sp, #0]
   b58c6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b58ca:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b58ce:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b58d2:	4620      	mov	r0, r4
   b58d4:	f7ff fe5e 	bl	b5594 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b58d8:	7e23      	ldrb	r3, [r4, #24]
   b58da:	8a22      	ldrh	r2, [r4, #16]
   b58dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b58e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b58e4:	8223      	strh	r3, [r4, #16]
   b58e6:	e7d2      	b.n	b588e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b58e8:	290a      	cmp	r1, #10
   b58ea:	d107      	bne.n	b58fc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b58ec:	2300      	movs	r3, #0
   b58ee:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b58f0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b58f2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b58f4:	8a43      	ldrh	r3, [r0, #18]
   b58f6:	fb01 3302 	mla	r3, r1, r2, r3
   b58fa:	e7c7      	b.n	b588c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b58fc:	290d      	cmp	r1, #13
   b58fe:	d0c6      	beq.n	b588e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5900:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5902:	42a9      	cmp	r1, r5
   b5904:	d3c3      	bcc.n	b588e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5906:	7a51      	ldrb	r1, [r2, #9]
   b5908:	4299      	cmp	r1, r3
   b590a:	d3c0      	bcc.n	b588e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b590c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b590e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5910:	b2ed      	uxtb	r5, r5
   b5912:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5916:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5918:	b328      	cbz	r0, b5966 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b591a:	78e9      	ldrb	r1, [r5, #3]
   b591c:	b319      	cbz	r1, b5966 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b591e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5920:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5922:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5924:	b191      	cbz	r1, b594c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5926:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b592a:	4408      	add	r0, r1
   b592c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5930:	fb06 1100 	mla	r1, r6, r0, r1
   b5934:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5938:	4281      	cmp	r1, r0
   b593a:	dd07      	ble.n	b594c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b593c:	2000      	movs	r0, #0
   b593e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5940:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5944:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5946:	fb02 1207 	mla	r2, r2, r7, r1
   b594a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b594c:	8ae2      	ldrh	r2, [r4, #22]
   b594e:	9201      	str	r2, [sp, #4]
   b5950:	8aa2      	ldrh	r2, [r4, #20]
   b5952:	9200      	str	r2, [sp, #0]
   b5954:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5958:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b595c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5960:	4620      	mov	r0, r4
   b5962:	f7ff fe17 	bl	b5594 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5966:	7929      	ldrb	r1, [r5, #4]
   b5968:	7e22      	ldrb	r2, [r4, #24]
   b596a:	8a23      	ldrh	r3, [r4, #16]
   b596c:	fb01 3302 	mla	r3, r1, r2, r3
   b5970:	e7b8      	b.n	b58e4 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5972 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5972:	2901      	cmp	r1, #1
   b5974:	bf38      	it	cc
   b5976:	2101      	movcc	r1, #1
   b5978:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b597a:	7641      	strb	r1, [r0, #25]
}
   b597c:	4770      	bx	lr
	...

000b5980 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5980:	b508      	push	{r3, lr}
   b5982:	4b02      	ldr	r3, [pc, #8]	; (b598c <HAL_USB_USART_Init+0xc>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	681b      	ldr	r3, [r3, #0]
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	bd08      	pop	{r3, pc}
   b598c:	0003024c 	.word	0x0003024c

000b5990 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <HAL_USB_USART_Available_Data+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	691b      	ldr	r3, [r3, #16]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	0003024c 	.word	0x0003024c

000b59a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	695b      	ldr	r3, [r3, #20]
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	0003024c 	.word	0x0003024c

000b59b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <HAL_USB_USART_Receive_Data+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	699b      	ldr	r3, [r3, #24]
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	0003024c 	.word	0x0003024c

000b59c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <HAL_USB_USART_Send_Data+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	69db      	ldr	r3, [r3, #28]
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	0003024c 	.word	0x0003024c

000b59d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <HAL_USB_USART_Flush_Data+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	6a1b      	ldr	r3, [r3, #32]
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	0003024c 	.word	0x0003024c

000b59e0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <hal_i2c_set_speed+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	681b      	ldr	r3, [r3, #0]
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	00030228 	.word	0x00030228

000b59f0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <hal_i2c_begin+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	68db      	ldr	r3, [r3, #12]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	00030228 	.word	0x00030228

000b5a00 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <hal_i2c_begin_transmission+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	699b      	ldr	r3, [r3, #24]
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	00030228 	.word	0x00030228

000b5a10 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <hal_i2c_end_transmission+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	69db      	ldr	r3, [r3, #28]
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030228 	.word	0x00030228

000b5a20 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <hal_i2c_write+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	6a1b      	ldr	r3, [r3, #32]
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030228 	.word	0x00030228

000b5a30 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b02      	ldr	r3, [pc, #8]	; (b5a3c <hal_i2c_available+0xc>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a38:	9301      	str	r3, [sp, #4]
   b5a3a:	bd08      	pop	{r3, pc}
   b5a3c:	00030228 	.word	0x00030228

000b5a40 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5a40:	b508      	push	{r3, lr}
   b5a42:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <hal_i2c_read+0xc>)
   b5a44:	681b      	ldr	r3, [r3, #0]
   b5a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5a48:	9301      	str	r3, [sp, #4]
   b5a4a:	bd08      	pop	{r3, pc}
   b5a4c:	00030228 	.word	0x00030228

000b5a50 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5a50:	b508      	push	{r3, lr}
   b5a52:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <hal_i2c_peek+0xc>)
   b5a54:	681b      	ldr	r3, [r3, #0]
   b5a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a58:	9301      	str	r3, [sp, #4]
   b5a5a:	bd08      	pop	{r3, pc}
   b5a5c:	00030228 	.word	0x00030228

000b5a60 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <hal_i2c_flush+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030228 	.word	0x00030228

000b5a70 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <hal_i2c_is_enabled+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	00030228 	.word	0x00030228

000b5a80 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <hal_i2c_init+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030228 	.word	0x00030228

000b5a90 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <hal_i2c_request_ex+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030228 	.word	0x00030228

000b5aa0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <hal_spi_begin+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	681b      	ldr	r3, [r3, #0]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030230 	.word	0x00030230

000b5ab0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <hal_spi_transfer+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	695b      	ldr	r3, [r3, #20]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030230 	.word	0x00030230

000b5ac0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <hal_spi_init+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	69db      	ldr	r3, [r3, #28]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030230 	.word	0x00030230

000b5ad0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <hal_spi_is_enabled+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	6a1b      	ldr	r3, [r3, #32]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030230 	.word	0x00030230

000b5ae0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <hal_spi_info+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030230 	.word	0x00030230

000b5af0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <hal_spi_set_settings+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030230 	.word	0x00030230

000b5b00 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <hal_spi_acquire+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030230 	.word	0x00030230

000b5b10 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <hal_spi_release+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030230 	.word	0x00030230

000b5b20 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <sock_setsockopt+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	699b      	ldr	r3, [r3, #24]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030238 	.word	0x00030238

000b5b30 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <sock_close+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	69db      	ldr	r3, [r3, #28]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030238 	.word	0x00030238

000b5b40 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <sock_connect+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	6a1b      	ldr	r3, [r3, #32]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030238 	.word	0x00030238

000b5b50 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <sock_recv+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030238 	.word	0x00030238

000b5b60 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <sock_send+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030238 	.word	0x00030238

000b5b70 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <sock_socket+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030238 	.word	0x00030238

000b5b80 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <hal_usart_write+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	68db      	ldr	r3, [r3, #12]
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	0003023c 	.word	0x0003023c

000b5b90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <hal_usart_available+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	691b      	ldr	r3, [r3, #16]
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	0003023c 	.word	0x0003023c

000b5ba0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <hal_usart_read+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	695b      	ldr	r3, [r3, #20]
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	0003023c 	.word	0x0003023c

000b5bb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <hal_usart_peek+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	699b      	ldr	r3, [r3, #24]
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	0003023c 	.word	0x0003023c

000b5bc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <hal_usart_flush+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	69db      	ldr	r3, [r3, #28]
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	0003023c 	.word	0x0003023c

000b5bd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <hal_usart_is_enabled+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	6a1b      	ldr	r3, [r3, #32]
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	0003023c 	.word	0x0003023c

000b5be0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <hal_usart_available_data_for_write+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	0003023c 	.word	0x0003023c

000b5bf0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <hal_usart_init_ex+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	0003023c 	.word	0x0003023c

000b5c00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <inet_inet_ntop+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	695b      	ldr	r3, [r3, #20]
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	00030264 	.word	0x00030264

000b5c10 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <inet_htonl+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	6a1b      	ldr	r3, [r3, #32]
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030264 	.word	0x00030264

000b5c20 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <inet_htons+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030264 	.word	0x00030264

000b5c30 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <os_mutex_create+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030248 	.word	0x00030248

000b5c40 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <os_mutex_destroy+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030248 	.word	0x00030248

000b5c50 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <os_mutex_recursive_create+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030248 	.word	0x00030248

000b5c60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <HAL_RNG_GetRandomNumber+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	685b      	ldr	r3, [r3, #4]
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030218 	.word	0x00030218

000b5c70 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <HAL_Delay_Microseconds+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	68db      	ldr	r3, [r3, #12]
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030218 	.word	0x00030218

000b5c80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	695b      	ldr	r3, [r3, #20]
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030218 	.word	0x00030218

000b5c90 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <if_index_to_name+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	695b      	ldr	r3, [r3, #20]
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	0003026c 	.word	0x0003026c

000b5ca0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <HAL_Validate_Pin_Function+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	685b      	ldr	r3, [r3, #4]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	0003022c 	.word	0x0003022c

000b5cb0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <HAL_Pin_Mode+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	689b      	ldr	r3, [r3, #8]
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	0003022c 	.word	0x0003022c

000b5cc0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <HAL_Get_Pin_Mode+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	68db      	ldr	r3, [r3, #12]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	0003022c 	.word	0x0003022c

000b5cd0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <HAL_GPIO_Write+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	691b      	ldr	r3, [r3, #16]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	0003022c 	.word	0x0003022c

000b5ce0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <HAL_GPIO_Read+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	695b      	ldr	r3, [r3, #20]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	0003022c 	.word	0x0003022c

000b5cf0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <hal_adc_read+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	0003022c 	.word	0x0003022c

000b5d00 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <netdb_freeaddrinfo+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	689b      	ldr	r3, [r3, #8]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030268 	.word	0x00030268

000b5d10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <netdb_getaddrinfo+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	68db      	ldr	r3, [r3, #12]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030268 	.word	0x00030268

000b5d20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <panic_+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030260 	.word	0x00030260

000b5d30 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <log_message+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030260 	.word	0x00030260

000b5d40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030244 	.word	0x00030244

000b5d50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <network_connect+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	685b      	ldr	r3, [r3, #4]
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030240 	.word	0x00030240

000b5d60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <network_connecting+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	689b      	ldr	r3, [r3, #8]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	00030240 	.word	0x00030240

000b5d70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <network_disconnect+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	68db      	ldr	r3, [r3, #12]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030240 	.word	0x00030240

000b5d80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <network_ready+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	691b      	ldr	r3, [r3, #16]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030240 	.word	0x00030240

000b5d90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <network_on+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	695b      	ldr	r3, [r3, #20]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030240 	.word	0x00030240

000b5da0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <network_off+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	699b      	ldr	r3, [r3, #24]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030240 	.word	0x00030240

000b5db0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <network_listen+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	69db      	ldr	r3, [r3, #28]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030240 	.word	0x00030240

000b5dc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <network_listening+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6a1b      	ldr	r3, [r3, #32]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	00030240 	.word	0x00030240

000b5dd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <network_set_listen_timeout+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030240 	.word	0x00030240

000b5de0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <network_get_listen_timeout+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030240 	.word	0x00030240

000b5df0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <network_is_on+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030240 	.word	0x00030240

000b5e00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <network_is_off+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030240 	.word	0x00030240

000b5e10 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <set_system_mode+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	685b      	ldr	r3, [r3, #4]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030220 	.word	0x00030220

000b5e20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <system_delay_ms+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	695b      	ldr	r3, [r3, #20]
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030220 	.word	0x00030220

000b5e30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b03      	ldr	r3, [pc, #12]	; (b5e40 <system_ctrl_set_app_request_handler+0x10>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5e3a:	9301      	str	r3, [sp, #4]
   b5e3c:	bd08      	pop	{r3, pc}
   b5e3e:	0000      	.short	0x0000
   b5e40:	00030220 	.word	0x00030220

000b5e44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5e44:	b508      	push	{r3, lr}
   b5e46:	4b03      	ldr	r3, [pc, #12]	; (b5e54 <system_ctrl_set_result+0x10>)
   b5e48:	681b      	ldr	r3, [r3, #0]
   b5e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5e4e:	9301      	str	r3, [sp, #4]
   b5e50:	bd08      	pop	{r3, pc}
   b5e52:	0000      	.short	0x0000
   b5e54:	00030220 	.word	0x00030220

000b5e58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <malloc+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	681b      	ldr	r3, [r3, #0]
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	0003021c 	.word	0x0003021c

000b5e68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <free+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	685b      	ldr	r3, [r3, #4]
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	0003021c 	.word	0x0003021c

000b5e78 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <vsnprintf+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	0003021c 	.word	0x0003021c

000b5e88 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <__errno+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	0003021c 	.word	0x0003021c

000b5e98 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <__assert_func+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	0003021c 	.word	0x0003021c

000b5ea8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <newlib_impure_ptr_callback+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	0003021c 	.word	0x0003021c

000b5eb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5eb8:	2300      	movs	r3, #0
   b5eba:	6840      	ldr	r0, [r0, #4]
   b5ebc:	461a      	mov	r2, r3
   b5ebe:	f7ff bf47 	b.w	b5d50 <network_connect>

000b5ec2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5ec2:	6840      	ldr	r0, [r0, #4]
   b5ec4:	2200      	movs	r2, #0
   b5ec6:	2102      	movs	r1, #2
   b5ec8:	f7ff bf52 	b.w	b5d70 <network_disconnect>

000b5ecc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5ecc:	2200      	movs	r2, #0
   b5ece:	6840      	ldr	r0, [r0, #4]
   b5ed0:	4611      	mov	r1, r2
   b5ed2:	f7ff bf45 	b.w	b5d60 <network_connecting>

000b5ed6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5ed6:	2200      	movs	r2, #0
   b5ed8:	6840      	ldr	r0, [r0, #4]
   b5eda:	4611      	mov	r1, r2
   b5edc:	f7ff bf50 	b.w	b5d80 <network_ready>

000b5ee0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5ee0:	2300      	movs	r3, #0
   b5ee2:	6840      	ldr	r0, [r0, #4]
   b5ee4:	461a      	mov	r2, r3
   b5ee6:	4619      	mov	r1, r3
   b5ee8:	f7ff bf52 	b.w	b5d90 <network_on>

000b5eec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5eec:	2300      	movs	r3, #0
   b5eee:	6840      	ldr	r0, [r0, #4]
   b5ef0:	461a      	mov	r2, r3
   b5ef2:	4619      	mov	r1, r3
   b5ef4:	f7ff bf54 	b.w	b5da0 <network_off>

000b5ef8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5ef8:	6840      	ldr	r0, [r0, #4]
   b5efa:	2100      	movs	r1, #0
   b5efc:	f7ff bf78 	b.w	b5df0 <network_is_on>

000b5f00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5f00:	6840      	ldr	r0, [r0, #4]
   b5f02:	2100      	movs	r1, #0
   b5f04:	f7ff bf7c 	b.w	b5e00 <network_is_off>

000b5f08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5f08:	6840      	ldr	r0, [r0, #4]
   b5f0a:	2200      	movs	r2, #0
   b5f0c:	f081 0101 	eor.w	r1, r1, #1
   b5f10:	f7ff bf4e 	b.w	b5db0 <network_listen>

000b5f14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5f14:	6840      	ldr	r0, [r0, #4]
   b5f16:	2200      	movs	r2, #0
   b5f18:	f7ff bf5a 	b.w	b5dd0 <network_set_listen_timeout>

000b5f1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5f1c:	2200      	movs	r2, #0
   b5f1e:	6840      	ldr	r0, [r0, #4]
   b5f20:	4611      	mov	r1, r2
   b5f22:	f7ff bf5d 	b.w	b5de0 <network_get_listen_timeout>

000b5f26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5f26:	2200      	movs	r2, #0
   b5f28:	6840      	ldr	r0, [r0, #4]
   b5f2a:	4611      	mov	r1, r2
   b5f2c:	f7ff bf48 	b.w	b5dc0 <network_listening>

000b5f30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f34:	b095      	sub	sp, #84	; 0x54
   b5f36:	4614      	mov	r4, r2
   b5f38:	460d      	mov	r5, r1
   b5f3a:	4607      	mov	r7, r0
    IPAddress addr;
   b5f3c:	f000 fd2a 	bl	b6994 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5f40:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5f42:	221c      	movs	r2, #28
   b5f44:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5f46:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5f48:	f001 ff98 	bl	b7e7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5f4c:	2340      	movs	r3, #64	; 0x40
   b5f4e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5f50:	4620      	mov	r0, r4
   b5f52:	466b      	mov	r3, sp
   b5f54:	aa0c      	add	r2, sp, #48	; 0x30
   b5f56:	2100      	movs	r1, #0
   b5f58:	f7ff feda 	bl	b5d10 <netdb_getaddrinfo>
    if (!r) {
   b5f5c:	4604      	mov	r4, r0
   b5f5e:	2800      	cmp	r0, #0
   b5f60:	d14b      	bne.n	b5ffa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5f62:	4602      	mov	r2, r0
   b5f64:	2101      	movs	r1, #1
   b5f66:	6868      	ldr	r0, [r5, #4]
   b5f68:	f7ff ff0a 	bl	b5d80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5f6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5f6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5f70:	4622      	mov	r2, r4
   b5f72:	6868      	ldr	r0, [r5, #4]
   b5f74:	f7ff ff04 	bl	b5d80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5f78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5f7a:	4681      	mov	r9, r0
        bool ok = false;
   b5f7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5f7e:	2e00      	cmp	r6, #0
   b5f80:	d03b      	beq.n	b5ffa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5f82:	2900      	cmp	r1, #0
   b5f84:	d139      	bne.n	b5ffa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5f86:	6873      	ldr	r3, [r6, #4]
   b5f88:	2b02      	cmp	r3, #2
   b5f8a:	d003      	beq.n	b5f94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5f8c:	2b0a      	cmp	r3, #10
   b5f8e:	d011      	beq.n	b5fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5f90:	69f6      	ldr	r6, [r6, #28]
   b5f92:	e7f4      	b.n	b5f7e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5f94:	f1b8 0f00 	cmp.w	r8, #0
   b5f98:	d0fa      	beq.n	b5f90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5f9a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b5f9c:	a806      	add	r0, sp, #24
   b5f9e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5fa0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5fa2:	f000 fd3b 	bl	b6a1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5fa8:	1d3c      	adds	r4, r7, #4
   b5faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5fac:	682b      	ldr	r3, [r5, #0]
   b5fae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5fb0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5fb2:	e7ed      	b.n	b5f90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5fb4:	f1b9 0f00 	cmp.w	r9, #0
   b5fb8:	d0ea      	beq.n	b5f90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5fba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5fbc:	2210      	movs	r2, #16
   b5fbe:	a801      	add	r0, sp, #4
   b5fc0:	f001 ff5c 	bl	b7e7c <memset>
                    a.v = 6;
   b5fc4:	2306      	movs	r3, #6
   b5fc6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5fca:	ad01      	add	r5, sp, #4
   b5fcc:	f104 0308 	add.w	r3, r4, #8
   b5fd0:	3418      	adds	r4, #24
   b5fd2:	6818      	ldr	r0, [r3, #0]
   b5fd4:	6859      	ldr	r1, [r3, #4]
   b5fd6:	462a      	mov	r2, r5
   b5fd8:	c203      	stmia	r2!, {r0, r1}
   b5fda:	3308      	adds	r3, #8
   b5fdc:	42a3      	cmp	r3, r4
   b5fde:	4615      	mov	r5, r2
   b5fe0:	d1f7      	bne.n	b5fd2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5fe2:	a901      	add	r1, sp, #4
   b5fe4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5fe6:	ad07      	add	r5, sp, #28
   b5fe8:	f000 fce2 	bl	b69b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5fee:	1d3c      	adds	r4, r7, #4
   b5ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ff2:	682b      	ldr	r3, [r5, #0]
   b5ff4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ff6:	4649      	mov	r1, r9
   b5ff8:	e7ca      	b.n	b5f90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5ffa:	9800      	ldr	r0, [sp, #0]
   b5ffc:	f7ff fe80 	bl	b5d00 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6000:	4638      	mov	r0, r7
   b6002:	b015      	add	sp, #84	; 0x54
   b6004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6008 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6008:	4b02      	ldr	r3, [pc, #8]	; (b6014 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b600a:	4a03      	ldr	r2, [pc, #12]	; (b6018 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b600c:	601a      	str	r2, [r3, #0]
   b600e:	2200      	movs	r2, #0
   b6010:	605a      	str	r2, [r3, #4]

} // spark
   b6012:	4770      	bx	lr
   b6014:	2003e6c4 	.word	0x2003e6c4
   b6018:	000b8b9c 	.word	0x000b8b9c

000b601c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b601c:	2200      	movs	r2, #0
   b601e:	6840      	ldr	r0, [r0, #4]
   b6020:	4611      	mov	r1, r2
   b6022:	f7ff bead 	b.w	b5d80 <network_ready>

000b6026 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6026:	2200      	movs	r2, #0
   b6028:	6840      	ldr	r0, [r0, #4]
   b602a:	4611      	mov	r1, r2
   b602c:	f7ff bec8 	b.w	b5dc0 <network_listening>

000b6030 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6030:	2200      	movs	r2, #0
   b6032:	6840      	ldr	r0, [r0, #4]
   b6034:	4611      	mov	r1, r2
   b6036:	f7ff bed3 	b.w	b5de0 <network_get_listen_timeout>

000b603a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b603a:	6840      	ldr	r0, [r0, #4]
   b603c:	2200      	movs	r2, #0
   b603e:	f7ff bec7 	b.w	b5dd0 <network_set_listen_timeout>

000b6042 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	2200      	movs	r2, #0
   b6046:	f081 0101 	eor.w	r1, r1, #1
   b604a:	f7ff beb1 	b.w	b5db0 <network_listen>

000b604e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b604e:	2300      	movs	r3, #0
   b6050:	6840      	ldr	r0, [r0, #4]
   b6052:	461a      	mov	r2, r3
   b6054:	4619      	mov	r1, r3
   b6056:	f7ff bea3 	b.w	b5da0 <network_off>

000b605a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b605a:	2300      	movs	r3, #0
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	461a      	mov	r2, r3
   b6060:	4619      	mov	r1, r3
   b6062:	f7ff be95 	b.w	b5d90 <network_on>

000b6066 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6066:	2200      	movs	r2, #0
   b6068:	6840      	ldr	r0, [r0, #4]
   b606a:	4611      	mov	r1, r2
   b606c:	f7ff be78 	b.w	b5d60 <network_connecting>

000b6070 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6070:	6840      	ldr	r0, [r0, #4]
   b6072:	2200      	movs	r2, #0
   b6074:	2102      	movs	r1, #2
   b6076:	f7ff be7b 	b.w	b5d70 <network_disconnect>

000b607a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b607a:	2300      	movs	r3, #0
   b607c:	6840      	ldr	r0, [r0, #4]
   b607e:	461a      	mov	r2, r3
   b6080:	f7ff be66 	b.w	b5d50 <network_connect>

000b6084 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6084:	4b02      	ldr	r3, [pc, #8]	; (b6090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6086:	2204      	movs	r2, #4
   b6088:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b608a:	4a02      	ldr	r2, [pc, #8]	; (b6094 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b608c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b608e:	4770      	bx	lr
   b6090:	2003e6cc 	.word	0x2003e6cc
   b6094:	000b8bd8 	.word	0x000b8bd8

000b6098 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6098:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b609a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b609c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b60a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b60a2:	2201      	movs	r2, #1
   b60a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b60a8:	f10d 0107 	add.w	r1, sp, #7
   b60ac:	47a0      	blx	r4
}
   b60ae:	b002      	add	sp, #8
   b60b0:	bd10      	pop	{r4, pc}

000b60b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b60b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b60b4:	6803      	ldr	r3, [r0, #0]
   b60b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b60b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b60bc:	46a4      	mov	ip, r4
}
   b60be:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b60c2:	4760      	bx	ip

000b60c4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b60c4:	b513      	push	{r0, r1, r4, lr}
   b60c6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b60c8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b60ca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b60ce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b60d0:	f10d 0107 	add.w	r1, sp, #7
   b60d4:	2201      	movs	r2, #1
   b60d6:	47a0      	blx	r4
}
   b60d8:	b002      	add	sp, #8
   b60da:	bd10      	pop	{r4, pc}

000b60dc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b60dc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b60de:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b60e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b60e4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b60e8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b60ea:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b60ec:	d008      	beq.n	b6100 <_ZN9TCPClient4readEv+0x24>
   b60ee:	6963      	ldr	r3, [r4, #20]
   b60f0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b60f4:	1c51      	adds	r1, r2, #1
   b60f6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b60fa:	4413      	add	r3, r2
   b60fc:	7918      	ldrb	r0, [r3, #4]
}
   b60fe:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6100:	6803      	ldr	r3, [r0, #0]
   b6102:	691b      	ldr	r3, [r3, #16]
   b6104:	4798      	blx	r3
   b6106:	2800      	cmp	r0, #0
   b6108:	d1f1      	bne.n	b60ee <_ZN9TCPClient4readEv+0x12>
   b610a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b610e:	e7f6      	b.n	b60fe <_ZN9TCPClient4readEv+0x22>

000b6110 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6110:	4770      	bx	lr

000b6112 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6112:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6114:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6116:	43c0      	mvns	r0, r0
   b6118:	0fc0      	lsrs	r0, r0, #31
   b611a:	4770      	bx	lr

000b611c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b611c:	4770      	bx	lr
	...

000b6120 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6120:	4b06      	ldr	r3, [pc, #24]	; (b613c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6122:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6124:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6126:	f100 040c 	add.w	r4, r0, #12
	    ||
   b612a:	d005      	beq.n	b6138 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b612c:	4608      	mov	r0, r1
   b612e:	f001 f8cb 	bl	b72c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6132:	2800      	cmp	r0, #0
   b6134:	bf08      	it	eq
   b6136:	2400      	moveq	r4, #0
      }
   b6138:	4620      	mov	r0, r4
   b613a:	bd10      	pop	{r4, pc}
   b613c:	000b8c40 	.word	0x000b8c40

000b6140 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6140:	b510      	push	{r4, lr}
   b6142:	21ac      	movs	r1, #172	; 0xac
   b6144:	4604      	mov	r4, r0
   b6146:	f7fd ffaa 	bl	b409e <_ZdlPvj>
   b614a:	4620      	mov	r0, r4
   b614c:	bd10      	pop	{r4, pc}

000b614e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b614e:	21ac      	movs	r1, #172	; 0xac
   b6150:	f7fd bfa5 	b.w	b409e <_ZdlPvj>

000b6154 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   b6158:	f04f 0800 	mov.w	r8, #0
   b615c:	b086      	sub	sp, #24
   b615e:	461c      	mov	r4, r3
   b6160:	f8c0 8004 	str.w	r8, [r0, #4]
   b6164:	4605      	mov	r5, r0
   b6166:	460e      	mov	r6, r1
   b6168:	4617      	mov	r7, r2
    struct timeval tv = {};
   b616a:	4641      	mov	r1, r8
   b616c:	2210      	movs	r2, #16
   b616e:	a802      	add	r0, sp, #8
   b6170:	f001 fe84 	bl	b7e7c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6174:	1c63      	adds	r3, r4, #1
   b6176:	d009      	beq.n	b618c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b617c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6180:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6184:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6188:	435c      	muls	r4, r3
   b618a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b618c:	6968      	ldr	r0, [r5, #20]
   b618e:	2310      	movs	r3, #16
   b6190:	9300      	str	r3, [sp, #0]
   b6192:	6800      	ldr	r0, [r0, #0]
   b6194:	ab02      	add	r3, sp, #8
   b6196:	f241 0205 	movw	r2, #4101	; 0x1005
   b619a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b619e:	f7ff fcbf 	bl	b5b20 <sock_setsockopt>
    if (ret < 0) {
   b61a2:	2800      	cmp	r0, #0
   b61a4:	da07      	bge.n	b61b6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b61a6:	f7ff fe6f 	bl	b5e88 <__errno>
   b61aa:	6803      	ldr	r3, [r0, #0]
   b61ac:	606b      	str	r3, [r5, #4]
        return 0;
   b61ae:	2000      	movs	r0, #0
}
   b61b0:	b006      	add	sp, #24
   b61b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b61b6:	6968      	ldr	r0, [r5, #20]
   b61b8:	2300      	movs	r3, #0
   b61ba:	6800      	ldr	r0, [r0, #0]
   b61bc:	463a      	mov	r2, r7
   b61be:	4631      	mov	r1, r6
   b61c0:	f7ff fcce 	bl	b5b60 <sock_send>
    if (ret < 0) {
   b61c4:	1e03      	subs	r3, r0, #0
   b61c6:	dbee      	blt.n	b61a6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b61c8:	4618      	mov	r0, r3
   b61ca:	e7f1      	b.n	b61b0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b61cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b61cc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b61ce:	6984      	ldr	r4, [r0, #24]
   b61d0:	4b0a      	ldr	r3, [pc, #40]	; (b61fc <_ZN9TCPClientD1Ev+0x30>)
   b61d2:	6003      	str	r3, [r0, #0]
   b61d4:	4605      	mov	r5, r0
   b61d6:	b17c      	cbz	r4, b61f8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b61d8:	6863      	ldr	r3, [r4, #4]
   b61da:	3b01      	subs	r3, #1
   b61dc:	6063      	str	r3, [r4, #4]
   b61de:	b95b      	cbnz	r3, b61f8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b61e0:	6823      	ldr	r3, [r4, #0]
   b61e2:	4620      	mov	r0, r4
   b61e4:	689b      	ldr	r3, [r3, #8]
   b61e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b61e8:	68a3      	ldr	r3, [r4, #8]
   b61ea:	3b01      	subs	r3, #1
   b61ec:	60a3      	str	r3, [r4, #8]
   b61ee:	b91b      	cbnz	r3, b61f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b61f0:	6823      	ldr	r3, [r4, #0]
   b61f2:	4620      	mov	r0, r4
   b61f4:	68db      	ldr	r3, [r3, #12]
   b61f6:	4798      	blx	r3
   b61f8:	4628      	mov	r0, r5
   b61fa:	bd38      	pop	{r3, r4, r5, pc}
   b61fc:	000b8c50 	.word	0x000b8c50

000b6200 <_ZN9TCPClientD0Ev>:
   b6200:	b510      	push	{r4, lr}
   b6202:	4604      	mov	r4, r0
   b6204:	f7ff ffe2 	bl	b61cc <_ZN9TCPClientD1Ev>
   b6208:	4620      	mov	r0, r4
   b620a:	211c      	movs	r1, #28
   b620c:	f7fd ff47 	bl	b409e <_ZdlPvj>
   b6210:	4620      	mov	r0, r4
   b6212:	bd10      	pop	{r4, pc}

000b6214 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6214:	b530      	push	{r4, r5, lr}
   b6216:	b087      	sub	sp, #28
   b6218:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b621a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b621c:	4668      	mov	r0, sp
   b621e:	f000 fbfd 	bl	b6a1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6224:	3404      	adds	r4, #4
   b6226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6228:	682b      	ldr	r3, [r5, #0]
   b622a:	7023      	strb	r3, [r4, #0]
    }
   b622c:	b007      	add	sp, #28
   b622e:	bd30      	pop	{r4, r5, pc}

000b6230 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6230:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6232:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6234:	4b05      	ldr	r3, [pc, #20]	; (b624c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6236:	4604      	mov	r4, r0
   b6238:	358c      	adds	r5, #140	; 0x8c
   b623a:	f844 3b04 	str.w	r3, [r4], #4
   b623e:	4606      	mov	r6, r0
   b6240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6244:	682b      	ldr	r3, [r5, #0]
   b6246:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6248:	4630      	mov	r0, r6
   b624a:	bd70      	pop	{r4, r5, r6, pc}
   b624c:	000b8d24 	.word	0x000b8d24

000b6250 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6254:	4698      	mov	r8, r3
    stop();
   b6256:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6258:	b093      	sub	sp, #76	; 0x4c
   b625a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b625c:	2400      	movs	r4, #0
    stop();
   b625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6260:	4606      	mov	r6, r0
   b6262:	4617      	mov	r7, r2
    stop();
   b6264:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6266:	4628      	mov	r0, r5
   b6268:	466b      	mov	r3, sp
   b626a:	4622      	mov	r2, r4
   b626c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b626e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6270:	f7ff fd4e 	bl	b5d10 <netdb_getaddrinfo>
   b6274:	4605      	mov	r5, r0
   b6276:	2800      	cmp	r0, #0
   b6278:	d163      	bne.n	b6342 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b627a:	9b00      	ldr	r3, [sp, #0]
   b627c:	2b00      	cmp	r3, #0
   b627e:	d04b      	beq.n	b6318 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6280:	695b      	ldr	r3, [r3, #20]
   b6282:	2b00      	cmp	r3, #0
   b6284:	d048      	beq.n	b6318 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6286:	a806      	add	r0, sp, #24
   b6288:	f000 fb84 	bl	b6994 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b628c:	9b00      	ldr	r3, [sp, #0]
   b628e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6290:	7863      	ldrb	r3, [r4, #1]
   b6292:	2b02      	cmp	r3, #2
   b6294:	d104      	bne.n	b62a0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6296:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6298:	a806      	add	r0, sp, #24
   b629a:	f7ff ffbb 	bl	b6214 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b629e:	e026      	b.n	b62ee <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b62a0:	2b0a      	cmp	r3, #10
   b62a2:	d124      	bne.n	b62ee <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b62a4:	2211      	movs	r2, #17
   b62a6:	4629      	mov	r1, r5
   b62a8:	a801      	add	r0, sp, #4
   b62aa:	f001 fde7 	bl	b7e7c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b62ae:	68a3      	ldr	r3, [r4, #8]
   b62b0:	2b00      	cmp	r3, #0
   b62b2:	d038      	beq.n	b6326 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b62b4:	f104 0308 	add.w	r3, r4, #8
   b62b8:	f10d 0c04 	add.w	ip, sp, #4
   b62bc:	3418      	adds	r4, #24
   b62be:	6818      	ldr	r0, [r3, #0]
   b62c0:	6859      	ldr	r1, [r3, #4]
   b62c2:	4662      	mov	r2, ip
   b62c4:	c203      	stmia	r2!, {r0, r1}
   b62c6:	3308      	adds	r3, #8
   b62c8:	42a3      	cmp	r3, r4
   b62ca:	4694      	mov	ip, r2
   b62cc:	d1f7      	bne.n	b62be <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b62ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b62d0:	a901      	add	r1, sp, #4
   b62d2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b62d4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b62d8:	f000 fb6a 	bl	b69b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b62dc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b62e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b62e4:	ac07      	add	r4, sp, #28
   b62e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62e8:	f8dc 3000 	ldr.w	r3, [ip]
   b62ec:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b62ee:	a806      	add	r0, sp, #24
   b62f0:	f000 fb70 	bl	b69d4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b62f4:	b180      	cbz	r0, b6318 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b62f6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b62f8:	ad07      	add	r5, sp, #28
   b62fa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b62fe:	4b12      	ldr	r3, [pc, #72]	; (b6348 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6300:	930c      	str	r3, [sp, #48]	; 0x30
   b6302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6304:	ac0d      	add	r4, sp, #52	; 0x34
   b6306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6308:	682b      	ldr	r3, [r5, #0]
   b630a:	7023      	strb	r3, [r4, #0]
   b630c:	463a      	mov	r2, r7
   b630e:	4643      	mov	r3, r8
   b6310:	a90c      	add	r1, sp, #48	; 0x30
   b6312:	4630      	mov	r0, r6
   b6314:	47c8      	blx	r9
   b6316:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6318:	9800      	ldr	r0, [sp, #0]
   b631a:	f7ff fcf1 	bl	b5d00 <netdb_freeaddrinfo>
}
   b631e:	4628      	mov	r0, r5
   b6320:	b013      	add	sp, #76	; 0x4c
   b6322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6326:	68e3      	ldr	r3, [r4, #12]
   b6328:	2b00      	cmp	r3, #0
   b632a:	d1c3      	bne.n	b62b4 <_ZN9TCPClient7connectEPKctm+0x64>
   b632c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6330:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6334:	f7ff fc6c 	bl	b5c10 <inet_htonl>
   b6338:	4581      	cmp	r9, r0
   b633a:	d1bb      	bne.n	b62b4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b633c:	f104 0114 	add.w	r1, r4, #20
   b6340:	e7aa      	b.n	b6298 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6342:	4625      	mov	r5, r4
   b6344:	e7e8      	b.n	b6318 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6346:	bf00      	nop
   b6348:	000b8d24 	.word	0x000b8d24

000b634c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b634c:	b538      	push	{r3, r4, r5, lr}
   b634e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6350:	681a      	ldr	r2, [r3, #0]
   b6352:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6354:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6356:	da10      	bge.n	b637a <_ZN9TCPClient9connectedEv+0x2e>
   b6358:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b635c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6360:	429a      	cmp	r2, r3
   b6362:	d10a      	bne.n	b637a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6364:	6803      	ldr	r3, [r0, #0]
   b6366:	691b      	ldr	r3, [r3, #16]
   b6368:	4798      	blx	r3
        if (!rv) {
   b636a:	4604      	mov	r4, r0
   b636c:	b928      	cbnz	r0, b637a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b636e:	682b      	ldr	r3, [r5, #0]
   b6370:	4628      	mov	r0, r5
   b6372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6374:	4798      	blx	r3
        rv = available();
   b6376:	4620      	mov	r0, r4
}
   b6378:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b637a:	2001      	movs	r0, #1
   b637c:	e7fc      	b.n	b6378 <_ZN9TCPClient9connectedEv+0x2c>

000b637e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b637e:	b510      	push	{r4, lr}
   b6380:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6382:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6386:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b638a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b638c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b638e:	d005      	beq.n	b639c <_ZN9TCPClient4peekEv+0x1e>
   b6390:	6963      	ldr	r3, [r4, #20]
   b6392:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6396:	4413      	add	r3, r2
   b6398:	7918      	ldrb	r0, [r3, #4]
}
   b639a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b639c:	6803      	ldr	r3, [r0, #0]
   b639e:	691b      	ldr	r3, [r3, #16]
   b63a0:	4798      	blx	r3
   b63a2:	2800      	cmp	r0, #0
   b63a4:	d1f4      	bne.n	b6390 <_ZN9TCPClient4peekEv+0x12>
   b63a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b63aa:	e7f6      	b.n	b639a <_ZN9TCPClient4peekEv+0x1c>

000b63ac <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b63ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63ae:	6943      	ldr	r3, [r0, #20]
   b63b0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b63b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b63b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b63ba:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b63bc:	4605      	mov	r5, r0
   b63be:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b63c0:	d016      	beq.n	b63f0 <_ZN9TCPClient4readEPhj+0x44>
   b63c2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b63c4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b63c8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b63cc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b63ce:	42bc      	cmp	r4, r7
   b63d0:	bf28      	it	cs
   b63d2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b63d4:	3304      	adds	r3, #4
   b63d6:	4622      	mov	r2, r4
   b63d8:	4419      	add	r1, r3
   b63da:	4630      	mov	r0, r6
   b63dc:	f001 fd40 	bl	b7e60 <memcpy>
   b63e0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b63e2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b63e6:	4423      	add	r3, r4
   b63e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b63ec:	4620      	mov	r0, r4
   b63ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b63f0:	6803      	ldr	r3, [r0, #0]
   b63f2:	691b      	ldr	r3, [r3, #16]
   b63f4:	4798      	blx	r3
   b63f6:	2800      	cmp	r0, #0
   b63f8:	d1e3      	bne.n	b63c2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b63fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b63fe:	e7f5      	b.n	b63ec <_ZN9TCPClient4readEPhj+0x40>

000b6400 <_ZN9TCPClient12flush_bufferEv>:
   b6400:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6402:	2300      	movs	r3, #0
   b6404:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6408:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b640a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b640e:	4770      	bx	lr

000b6410 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6414:	461f      	mov	r7, r3
    stop();
   b6416:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6418:	460c      	mov	r4, r1
    stop();
   b641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b641c:	b08a      	sub	sp, #40	; 0x28
   b641e:	4605      	mov	r5, r0
   b6420:	4616      	mov	r6, r2
    stop();
   b6422:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6424:	7d23      	ldrb	r3, [r4, #20]
   b6426:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b642a:	2b04      	cmp	r3, #4
   b642c:	bf0c      	ite	eq
   b642e:	2002      	moveq	r0, #2
   b6430:	200a      	movne	r0, #10
   b6432:	2206      	movs	r2, #6
   b6434:	2101      	movs	r1, #1
   b6436:	f7ff fb9b 	bl	b5b70 <sock_socket>
   b643a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b643e:	696b      	ldr	r3, [r5, #20]
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	2b00      	cmp	r3, #0
   b6444:	da08      	bge.n	b6458 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6446:	682b      	ldr	r3, [r5, #0]
   b6448:	4628      	mov	r0, r5
   b644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b644c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b644e:	4798      	blx	r3
}
   b6450:	4620      	mov	r0, r4
   b6452:	b00a      	add	sp, #40	; 0x28
   b6454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6458:	4628      	mov	r0, r5
   b645a:	f7ff ffd1 	bl	b6400 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b645e:	b1b7      	cbz	r7, b648e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6460:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6462:	a903      	add	r1, sp, #12
   b6464:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6466:	9303      	str	r3, [sp, #12]
   b6468:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b646c:	f7ff fc10 	bl	b5c90 <if_index_to_name>
   b6470:	2800      	cmp	r0, #0
   b6472:	d1e8      	bne.n	b6446 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6474:	6968      	ldr	r0, [r5, #20]
   b6476:	2306      	movs	r3, #6
   b6478:	9300      	str	r3, [sp, #0]
   b647a:	6800      	ldr	r0, [r0, #0]
   b647c:	ab03      	add	r3, sp, #12
   b647e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6482:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6486:	f7ff fb4b 	bl	b5b20 <sock_setsockopt>
   b648a:	2800      	cmp	r0, #0
   b648c:	d1db      	bne.n	b6446 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b648e:	221c      	movs	r2, #28
   b6490:	2100      	movs	r1, #0
   b6492:	a803      	add	r0, sp, #12
   b6494:	f001 fcf2 	bl	b7e7c <memset>
    if (ip.version() == 4) {
   b6498:	7d23      	ldrb	r3, [r4, #20]
   b649a:	2b04      	cmp	r3, #4
   b649c:	d11d      	bne.n	b64da <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b649e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b64a2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b64a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b64a8:	f7ff fbba 	bl	b5c20 <inet_htons>
   b64ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b64b0:	6860      	ldr	r0, [r4, #4]
   b64b2:	f7ff fbad 	bl	b5c10 <inet_htonl>
   b64b6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b64b8:	696b      	ldr	r3, [r5, #20]
   b64ba:	221c      	movs	r2, #28
   b64bc:	6818      	ldr	r0, [r3, #0]
   b64be:	a903      	add	r1, sp, #12
   b64c0:	f7ff fb3e 	bl	b5b40 <sock_connect>
   b64c4:	2800      	cmp	r0, #0
   b64c6:	d1be      	bne.n	b6446 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b64c8:	3404      	adds	r4, #4
   b64ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b64cc:	696d      	ldr	r5, [r5, #20]
   b64ce:	358c      	adds	r5, #140	; 0x8c
   b64d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b64d2:	6823      	ldr	r3, [r4, #0]
   b64d4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b64d6:	2401      	movs	r4, #1
   b64d8:	e7ba      	b.n	b6450 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b64da:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b64de:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b64e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b64e4:	f7ff fb9c 	bl	b5c20 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b64e8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b64ea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b64ee:	1d23      	adds	r3, r4, #4
   b64f0:	f104 0714 	add.w	r7, r4, #20
   b64f4:	6818      	ldr	r0, [r3, #0]
   b64f6:	6859      	ldr	r1, [r3, #4]
   b64f8:	4632      	mov	r2, r6
   b64fa:	c203      	stmia	r2!, {r0, r1}
   b64fc:	3308      	adds	r3, #8
   b64fe:	42bb      	cmp	r3, r7
   b6500:	4616      	mov	r6, r2
   b6502:	d1f7      	bne.n	b64f4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6504:	e7d8      	b.n	b64b8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6508 <_ZN9TCPClient9availableEv>:
{
   b6508:	b530      	push	{r4, r5, lr}
   b650a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b650c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6510:	b08b      	sub	sp, #44	; 0x2c
   b6512:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6514:	b12b      	cbz	r3, b6522 <_ZN9TCPClient9availableEv+0x1a>
   b6516:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b651a:	429a      	cmp	r2, r3
   b651c:	d101      	bne.n	b6522 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b651e:	f7ff ff6f 	bl	b6400 <_ZN9TCPClient12flush_bufferEv>
   b6522:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6524:	6808      	ldr	r0, [r1, #0]
   b6526:	2800      	cmp	r0, #0
   b6528:	db18      	blt.n	b655c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b652a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b652e:	2d7f      	cmp	r5, #127	; 0x7f
   b6530:	d814      	bhi.n	b655c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6532:	3104      	adds	r1, #4
   b6534:	2308      	movs	r3, #8
   b6536:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b653a:	4429      	add	r1, r5
   b653c:	f7ff fb08 	bl	b5b50 <sock_recv>
            if (ret > 0) {
   b6540:	2800      	cmp	r0, #0
   b6542:	dd13      	ble.n	b656c <_ZN9TCPClient9availableEv+0x64>
   b6544:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6546:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b654a:	b90a      	cbnz	r2, b6550 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b654c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6550:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6552:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6556:	4410      	add	r0, r2
   b6558:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b655c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b655e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6562:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6566:	1ac0      	subs	r0, r0, r3
   b6568:	b00b      	add	sp, #44	; 0x2c
   b656a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b656c:	f7ff fc8c 	bl	b5e88 <__errno>
   b6570:	6803      	ldr	r3, [r0, #0]
   b6572:	2b0b      	cmp	r3, #11
   b6574:	d0f2      	beq.n	b655c <_ZN9TCPClient9availableEv+0x54>
   b6576:	f7ff fc87 	bl	b5e88 <__errno>
   b657a:	6803      	ldr	r3, [r0, #0]
   b657c:	2b0b      	cmp	r3, #11
   b657e:	d0ed      	beq.n	b655c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6580:	2320      	movs	r3, #32
   b6582:	2500      	movs	r5, #0
   b6584:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6588:	f7ff fc7e 	bl	b5e88 <__errno>
   b658c:	6803      	ldr	r3, [r0, #0]
   b658e:	9301      	str	r3, [sp, #4]
   b6590:	4b08      	ldr	r3, [pc, #32]	; (b65b4 <_ZN9TCPClient9availableEv+0xac>)
   b6592:	4909      	ldr	r1, [pc, #36]	; (b65b8 <_ZN9TCPClient9availableEv+0xb0>)
   b6594:	9300      	str	r3, [sp, #0]
   b6596:	aa02      	add	r2, sp, #8
   b6598:	462b      	mov	r3, r5
   b659a:	2032      	movs	r0, #50	; 0x32
   b659c:	f7ff fbc8 	bl	b5d30 <log_message>
                    sock_close(d_->sock);
   b65a0:	6963      	ldr	r3, [r4, #20]
   b65a2:	6818      	ldr	r0, [r3, #0]
   b65a4:	f7ff fac4 	bl	b5b30 <sock_close>
   b65a8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b65aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b65ae:	601a      	str	r2, [r3, #0]
   b65b0:	e7d4      	b.n	b655c <_ZN9TCPClient9availableEv+0x54>
   b65b2:	bf00      	nop
   b65b4:	000b8c13 	.word	0x000b8c13
   b65b8:	000b8c0c 	.word	0x000b8c0c

000b65bc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b65bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b65be:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b65c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b65c2:	6818      	ldr	r0, [r3, #0]
   b65c4:	2800      	cmp	r0, #0
   b65c6:	db01      	blt.n	b65cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b65c8:	f7ff fab2 	bl	b5b30 <sock_close>
   b65cc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b65ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b65d2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b65d4:	6960      	ldr	r0, [r4, #20]
   b65d6:	2211      	movs	r2, #17
   b65d8:	2100      	movs	r1, #0
   b65da:	308c      	adds	r0, #140	; 0x8c
   b65dc:	f001 fc4e 	bl	b7e7c <memset>
    flush_buffer();
   b65e0:	4620      	mov	r0, r4
}
   b65e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b65e6:	f7ff bf0b 	b.w	b6400 <_ZN9TCPClient12flush_bufferEv>

000b65ea <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b65ea:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b65ec:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b65ee:	4604      	mov	r4, r0
          total(0) {
   b65f0:	6001      	str	r1, [r0, #0]
   b65f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b65f6:	3088      	adds	r0, #136	; 0x88
   b65f8:	f000 f9cc 	bl	b6994 <_ZN9IPAddressC1Ev>
}
   b65fc:	4620      	mov	r0, r4
   b65fe:	bd10      	pop	{r4, pc}

000b6600 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6600:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6602:	2300      	movs	r3, #0
   b6604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6608:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b660c:	4a0e      	ldr	r2, [pc, #56]	; (b6648 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b660e:	6103      	str	r3, [r0, #16]
   b6610:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6612:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6614:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6616:	20ac      	movs	r0, #172	; 0xac
   b6618:	9101      	str	r1, [sp, #4]
   b661a:	f7fd fd3c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b661e:	1e05      	subs	r5, r0, #0
   b6620:	f105 060c 	add.w	r6, r5, #12
   b6624:	d008      	beq.n	b6638 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6626:	2301      	movs	r3, #1
   b6628:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b662c:	4b07      	ldr	r3, [pc, #28]	; (b664c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b662e:	9901      	ldr	r1, [sp, #4]
   b6630:	602b      	str	r3, [r5, #0]
   b6632:	4630      	mov	r0, r6
   b6634:	f7ff ffd9 	bl	b65ea <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6638:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b663a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b663e:	f7ff fedf 	bl	b6400 <_ZN9TCPClient12flush_bufferEv>
}
   b6642:	b002      	add	sp, #8
   b6644:	bd70      	pop	{r4, r5, r6, pc}
   b6646:	bf00      	nop
   b6648:	000b8c50 	.word	0x000b8c50
   b664c:	000b8c2c 	.word	0x000b8c2c

000b6650 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6650:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6652:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6656:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6658:	f7ff ffd2 	bl	b6600 <_ZN9TCPClientC1Ei>
}
   b665c:	4620      	mov	r0, r4
   b665e:	bd10      	pop	{r4, pc}

000b6660 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6660:	b510      	push	{r4, lr}
   b6662:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6664:	6800      	ldr	r0, [r0, #0]
   b6666:	2800      	cmp	r0, #0
   b6668:	db01      	blt.n	b666e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b666a:	f7ff fa61 	bl	b5b30 <sock_close>
    }
}
   b666e:	4620      	mov	r0, r4
   b6670:	bd10      	pop	{r4, pc}

000b6672 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6672:	300c      	adds	r0, #12
   b6674:	f7ff bff4 	b.w	b6660 <_ZN9TCPClient4DataD1Ev>

000b6678 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6678:	4770      	bx	lr

000b667a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b667a:	7441      	strb	r1, [r0, #17]
}
   b667c:	4770      	bx	lr

000b667e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b667e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6680:	7c00      	ldrb	r0, [r0, #16]
   b6682:	f7ff faad 	bl	b5be0 <hal_usart_available_data_for_write>
}
   b6686:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b668a:	bd08      	pop	{r3, pc}

000b668c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b668c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b668e:	7c00      	ldrb	r0, [r0, #16]
   b6690:	f7ff fa7e 	bl	b5b90 <hal_usart_available>
}
   b6694:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6698:	bd08      	pop	{r3, pc}

000b669a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b669a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b669c:	7c00      	ldrb	r0, [r0, #16]
   b669e:	f7ff fa87 	bl	b5bb0 <hal_usart_peek>
}
   b66a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66a6:	bd08      	pop	{r3, pc}

000b66a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b66a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b66aa:	7c00      	ldrb	r0, [r0, #16]
   b66ac:	f7ff fa78 	bl	b5ba0 <hal_usart_read>
}
   b66b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66b4:	bd08      	pop	{r3, pc}

000b66b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b66b6:	7c00      	ldrb	r0, [r0, #16]
   b66b8:	f7ff ba82 	b.w	b5bc0 <hal_usart_flush>

000b66bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b66bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b66be:	7c45      	ldrb	r5, [r0, #17]
{
   b66c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b66c2:	b12d      	cbz	r5, b66d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b66c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b66c6:	b003      	add	sp, #12
   b66c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b66cc:	f7ff ba58 	b.w	b5b80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b66d0:	7c00      	ldrb	r0, [r0, #16]
   b66d2:	9101      	str	r1, [sp, #4]
   b66d4:	f7ff fa84 	bl	b5be0 <hal_usart_available_data_for_write>
   b66d8:	2800      	cmp	r0, #0
   b66da:	9901      	ldr	r1, [sp, #4]
   b66dc:	dcf2      	bgt.n	b66c4 <_ZN11USARTSerial5writeEh+0x8>
}
   b66de:	4628      	mov	r0, r5
   b66e0:	b003      	add	sp, #12
   b66e2:	bd30      	pop	{r4, r5, pc}

000b66e4 <_ZN11USARTSerialD0Ev>:
   b66e4:	b510      	push	{r4, lr}
   b66e6:	2114      	movs	r1, #20
   b66e8:	4604      	mov	r4, r0
   b66ea:	f7fd fcd8 	bl	b409e <_ZdlPvj>
   b66ee:	4620      	mov	r0, r4
   b66f0:	bd10      	pop	{r4, pc}
	...

000b66f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b66f4:	b510      	push	{r4, lr}
   b66f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66fa:	4604      	mov	r4, r0
   b66fc:	4608      	mov	r0, r1
   b66fe:	4611      	mov	r1, r2
   b6700:	2200      	movs	r2, #0
   b6702:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6706:	4b04      	ldr	r3, [pc, #16]	; (b6718 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6708:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b670a:	2301      	movs	r3, #1
  _serial = serial;
   b670c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b670e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6710:	f7ff fa6e 	bl	b5bf0 <hal_usart_init_ex>
}
   b6714:	4620      	mov	r0, r4
   b6716:	bd10      	pop	{r4, pc}
   b6718:	000b8c9c 	.word	0x000b8c9c

000b671c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b671c:	4770      	bx	lr

000b671e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b671e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6720:	4606      	mov	r6, r0
   b6722:	4615      	mov	r5, r2
   b6724:	460c      	mov	r4, r1
   b6726:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6728:	42bc      	cmp	r4, r7
   b672a:	d006      	beq.n	b673a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b672c:	6833      	ldr	r3, [r6, #0]
   b672e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6732:	689b      	ldr	r3, [r3, #8]
   b6734:	4630      	mov	r0, r6
   b6736:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6738:	e7f6      	b.n	b6728 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b673a:	4628      	mov	r0, r5
   b673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b673e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b673e:	7c00      	ldrb	r0, [r0, #16]
   b6740:	2200      	movs	r2, #0
   b6742:	f7ff b96d 	b.w	b5a20 <hal_i2c_write>

000b6746 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6746:	7c00      	ldrb	r0, [r0, #16]
   b6748:	2100      	movs	r1, #0
   b674a:	f7ff b971 	b.w	b5a30 <hal_i2c_available>

000b674e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b674e:	7c00      	ldrb	r0, [r0, #16]
   b6750:	2100      	movs	r1, #0
   b6752:	f7ff b975 	b.w	b5a40 <hal_i2c_read>

000b6756 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6756:	7c00      	ldrb	r0, [r0, #16]
   b6758:	2100      	movs	r1, #0
   b675a:	f7ff b979 	b.w	b5a50 <hal_i2c_peek>

000b675e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b675e:	7c00      	ldrb	r0, [r0, #16]
   b6760:	2100      	movs	r1, #0
   b6762:	f7ff b97d 	b.w	b5a60 <hal_i2c_flush>

000b6766 <_ZN7TwoWireD0Ev>:
   b6766:	b510      	push	{r4, lr}
   b6768:	2114      	movs	r1, #20
   b676a:	4604      	mov	r4, r0
   b676c:	f7fd fc97 	bl	b409e <_ZdlPvj>
   b6770:	4620      	mov	r0, r4
   b6772:	bd10      	pop	{r4, pc}

000b6774 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6774:	b510      	push	{r4, lr}
   b6776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b677a:	4604      	mov	r4, r0
   b677c:	4608      	mov	r0, r1
   b677e:	2100      	movs	r1, #0
   b6780:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6784:	4b03      	ldr	r3, [pc, #12]	; (b6794 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6786:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6788:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b678a:	4611      	mov	r1, r2
   b678c:	f7ff f978 	bl	b5a80 <hal_i2c_init>
}
   b6790:	4620      	mov	r0, r4
   b6792:	bd10      	pop	{r4, pc}
   b6794:	000b8ccc 	.word	0x000b8ccc

000b6798 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6798:	7c00      	ldrb	r0, [r0, #16]
   b679a:	2200      	movs	r2, #0
   b679c:	f7ff b920 	b.w	b59e0 <hal_i2c_set_speed>

000b67a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b67a0:	2300      	movs	r3, #0
   b67a2:	7c00      	ldrb	r0, [r0, #16]
   b67a4:	461a      	mov	r2, r3
   b67a6:	4619      	mov	r1, r3
   b67a8:	f7ff b922 	b.w	b59f0 <hal_i2c_begin>

000b67ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b67ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b67ae:	2200      	movs	r2, #0
   b67b0:	2314      	movs	r3, #20
   b67b2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b67b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b67ba:	780b      	ldrb	r3, [r1, #0]
   b67bc:	f88d 3008 	strb.w	r3, [sp, #8]
   b67c0:	684b      	ldr	r3, [r1, #4]
   b67c2:	9303      	str	r3, [sp, #12]
   b67c4:	68cb      	ldr	r3, [r1, #12]
   b67c6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b67c8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b67ca:	7a0b      	ldrb	r3, [r1, #8]
   b67cc:	9305      	str	r3, [sp, #20]
   b67ce:	a901      	add	r1, sp, #4
   b67d0:	f7ff f95e 	bl	b5a90 <hal_i2c_request_ex>
}
   b67d4:	b007      	add	sp, #28
   b67d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b67da <_ZN7TwoWire11requestFromEhjh>:
{
   b67da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b67dc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b67de:	f88d 1000 	strb.w	r1, [sp]
   b67e2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b67e6:	9103      	str	r1, [sp, #12]
   b67e8:	bf18      	it	ne
   b67ea:	2301      	movne	r3, #1
   b67ec:	4669      	mov	r1, sp
    size_ = size;
   b67ee:	9201      	str	r2, [sp, #4]
   b67f0:	f88d 3008 	strb.w	r3, [sp, #8]
   b67f4:	f7ff ffda 	bl	b67ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b67f8:	b005      	add	sp, #20
   b67fa:	f85d fb04 	ldr.w	pc, [sp], #4

000b67fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b67fe:	2301      	movs	r3, #1
   b6800:	f7ff bfeb 	b.w	b67da <_ZN7TwoWire11requestFromEhjh>

000b6804 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6804:	7c00      	ldrb	r0, [r0, #16]
   b6806:	2200      	movs	r2, #0
   b6808:	f7ff b8fa 	b.w	b5a00 <hal_i2c_begin_transmission>

000b680c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b680c:	b2c9      	uxtb	r1, r1
   b680e:	f7ff bff9 	b.w	b6804 <_ZN7TwoWire17beginTransmissionEh>

000b6812 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6812:	7c00      	ldrb	r0, [r0, #16]
   b6814:	2200      	movs	r2, #0
   b6816:	f7ff b8fb 	b.w	b5a10 <hal_i2c_end_transmission>

000b681a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b681a:	2101      	movs	r1, #1
   b681c:	f7ff bff9 	b.w	b6812 <_ZN7TwoWire15endTransmissionEh>

000b6820 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6820:	7441      	strb	r1, [r0, #17]
}
   b6822:	4770      	bx	lr

000b6824 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6824:	4770      	bx	lr

000b6826 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6826:	4770      	bx	lr

000b6828 <_ZN9USBSerial4readEv>:
{
   b6828:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b682a:	2100      	movs	r1, #0
   b682c:	7c00      	ldrb	r0, [r0, #16]
   b682e:	f7ff f8bf 	bl	b59b0 <HAL_USB_USART_Receive_Data>
}
   b6832:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6836:	bd08      	pop	{r3, pc}

000b6838 <_ZN9USBSerial4peekEv>:
{
   b6838:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b683a:	2101      	movs	r1, #1
   b683c:	7c00      	ldrb	r0, [r0, #16]
   b683e:	f7ff f8b7 	bl	b59b0 <HAL_USB_USART_Receive_Data>
}
   b6842:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6846:	bd08      	pop	{r3, pc}

000b6848 <_ZN9USBSerial17availableForWriteEv>:
{
   b6848:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b684a:	7c00      	ldrb	r0, [r0, #16]
   b684c:	f7ff f8a8 	bl	b59a0 <HAL_USB_USART_Available_Data_For_Write>
}
   b6850:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6854:	bd08      	pop	{r3, pc}

000b6856 <_ZN9USBSerial9availableEv>:
{
   b6856:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6858:	7c00      	ldrb	r0, [r0, #16]
   b685a:	f7ff f899 	bl	b5990 <HAL_USB_USART_Available_Data>
}
   b685e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6862:	bd08      	pop	{r3, pc}

000b6864 <_ZN9USBSerial5writeEh>:
{
   b6864:	b513      	push	{r0, r1, r4, lr}
   b6866:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6868:	7c00      	ldrb	r0, [r0, #16]
{
   b686a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b686c:	f7ff f898 	bl	b59a0 <HAL_USB_USART_Available_Data_For_Write>
   b6870:	2800      	cmp	r0, #0
   b6872:	9901      	ldr	r1, [sp, #4]
   b6874:	dc01      	bgt.n	b687a <_ZN9USBSerial5writeEh+0x16>
   b6876:	7c60      	ldrb	r0, [r4, #17]
   b6878:	b120      	cbz	r0, b6884 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b687a:	7c20      	ldrb	r0, [r4, #16]
   b687c:	f7ff f8a0 	bl	b59c0 <HAL_USB_USART_Send_Data>
   b6880:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6884:	b002      	add	sp, #8
   b6886:	bd10      	pop	{r4, pc}

000b6888 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6888:	7c00      	ldrb	r0, [r0, #16]
   b688a:	f7ff b8a1 	b.w	b59d0 <HAL_USB_USART_Flush_Data>

000b688e <_ZN9USBSerialD0Ev>:
   b688e:	b510      	push	{r4, lr}
   b6890:	2114      	movs	r1, #20
   b6892:	4604      	mov	r4, r0
   b6894:	f7fd fc03 	bl	b409e <_ZdlPvj>
   b6898:	4620      	mov	r0, r4
   b689a:	bd10      	pop	{r4, pc}

000b689c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b689c:	b510      	push	{r4, lr}
   b689e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68a2:	4604      	mov	r4, r0
   b68a4:	4608      	mov	r0, r1
   b68a6:	2100      	movs	r1, #0
   b68a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b68ac:	4b04      	ldr	r3, [pc, #16]	; (b68c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b68ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b68b0:	2301      	movs	r3, #1
  _serial = serial;
   b68b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b68b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b68b6:	4611      	mov	r1, r2
   b68b8:	f7ff f862 	bl	b5980 <HAL_USB_USART_Init>
}
   b68bc:	4620      	mov	r0, r4
   b68be:	bd10      	pop	{r4, pc}
   b68c0:	000b8cf4 	.word	0x000b8cf4

000b68c4 <_Z19acquireSerialBufferv>:
{
   b68c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b68c6:	2214      	movs	r2, #20
{
   b68c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b68ca:	2100      	movs	r1, #0
   b68cc:	f001 fad6 	bl	b7e7c <memset>
}
   b68d0:	4620      	mov	r0, r4
   b68d2:	bd10      	pop	{r4, pc}

000b68d4 <_Z16_fetch_usbserialv>:
{
   b68d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68d6:	4c0f      	ldr	r4, [pc, #60]	; (b6914 <_Z16_fetch_usbserialv+0x40>)
{
   b68d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b68da:	a803      	add	r0, sp, #12
   b68dc:	f7ff fff2 	bl	b68c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68e0:	7821      	ldrb	r1, [r4, #0]
   b68e2:	f3bf 8f5b 	dmb	ish
   b68e6:	f011 0101 	ands.w	r1, r1, #1
   b68ea:	d10f      	bne.n	b690c <_Z16_fetch_usbserialv+0x38>
   b68ec:	4620      	mov	r0, r4
   b68ee:	9101      	str	r1, [sp, #4]
   b68f0:	f7fd fbe4 	bl	b40bc <__cxa_guard_acquire>
   b68f4:	9901      	ldr	r1, [sp, #4]
   b68f6:	b148      	cbz	r0, b690c <_Z16_fetch_usbserialv+0x38>
   b68f8:	aa03      	add	r2, sp, #12
   b68fa:	4807      	ldr	r0, [pc, #28]	; (b6918 <_Z16_fetch_usbserialv+0x44>)
   b68fc:	f7ff ffce 	bl	b689c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6900:	4620      	mov	r0, r4
   b6902:	f7fd fbe0 	bl	b40c6 <__cxa_guard_release>
   b6906:	4805      	ldr	r0, [pc, #20]	; (b691c <_Z16_fetch_usbserialv+0x48>)
   b6908:	f001 faa4 	bl	b7e54 <atexit>
	return _usbserial;
}
   b690c:	4802      	ldr	r0, [pc, #8]	; (b6918 <_Z16_fetch_usbserialv+0x44>)
   b690e:	b008      	add	sp, #32
   b6910:	bd10      	pop	{r4, pc}
   b6912:	bf00      	nop
   b6914:	2003e6d4 	.word	0x2003e6d4
   b6918:	2003e6d8 	.word	0x2003e6d8
   b691c:	000b6825 	.word	0x000b6825

000b6920 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b6920:	4770      	bx	lr

000b6922 <_ZN9IPAddressD0Ev>:
   b6922:	b510      	push	{r4, lr}
   b6924:	2118      	movs	r1, #24
   b6926:	4604      	mov	r4, r0
   b6928:	f7fd fbb9 	bl	b409e <_ZdlPvj>
   b692c:	4620      	mov	r0, r4
   b692e:	bd10      	pop	{r4, pc}

000b6930 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6930:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6932:	7d03      	ldrb	r3, [r0, #20]
   b6934:	2b06      	cmp	r3, #6
{
   b6936:	b08d      	sub	sp, #52	; 0x34
   b6938:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b693a:	f100 0704 	add.w	r7, r0, #4
   b693e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6942:	d012      	beq.n	b696a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6944:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6948:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b694c:	220a      	movs	r2, #10
   b694e:	4630      	mov	r0, r6
   b6950:	f000 f97d 	bl	b6c4e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6954:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6956:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6958:	d019      	beq.n	b698e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b695a:	2c00      	cmp	r4, #0
   b695c:	d0f4      	beq.n	b6948 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b695e:	212e      	movs	r1, #46	; 0x2e
   b6960:	4630      	mov	r0, r6
   b6962:	f000 f95b 	bl	b6c1c <_ZN5Print5printEc>
   b6966:	4404      	add	r4, r0
   b6968:	e7ee      	b.n	b6948 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b696a:	232f      	movs	r3, #47	; 0x2f
   b696c:	466a      	mov	r2, sp
   b696e:	4639      	mov	r1, r7
   b6970:	200a      	movs	r0, #10
		buf[0] = 0;
   b6972:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6976:	f7ff f943 	bl	b5c00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b697a:	4668      	mov	r0, sp
   b697c:	f001 fabe 	bl	b7efc <strlen>
   b6980:	6833      	ldr	r3, [r6, #0]
   b6982:	4602      	mov	r2, r0
   b6984:	68db      	ldr	r3, [r3, #12]
   b6986:	4669      	mov	r1, sp
   b6988:	4630      	mov	r0, r6
   b698a:	4798      	blx	r3
   b698c:	4604      	mov	r4, r0
    }
    return n;
}
   b698e:	4620      	mov	r0, r4
   b6990:	b00d      	add	sp, #52	; 0x34
   b6992:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6994 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6994:	b510      	push	{r4, lr}
   b6996:	4b05      	ldr	r3, [pc, #20]	; (b69ac <_ZN9IPAddressC1Ev+0x18>)
   b6998:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b699a:	2211      	movs	r2, #17
   b699c:	f840 3b04 	str.w	r3, [r0], #4
   b69a0:	2100      	movs	r1, #0
   b69a2:	f001 fa6b 	bl	b7e7c <memset>
}
   b69a6:	4620      	mov	r0, r4
   b69a8:	bd10      	pop	{r4, pc}
   b69aa:	bf00      	nop
   b69ac:	000b8d24 	.word	0x000b8d24

000b69b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b69b0:	4603      	mov	r3, r0
   b69b2:	4a07      	ldr	r2, [pc, #28]	; (b69d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b69b4:	b510      	push	{r4, lr}
   b69b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b69ba:	f101 0210 	add.w	r2, r1, #16
   b69be:	f851 4b04 	ldr.w	r4, [r1], #4
   b69c2:	f843 4b04 	str.w	r4, [r3], #4
   b69c6:	4291      	cmp	r1, r2
   b69c8:	d1f9      	bne.n	b69be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b69ca:	780a      	ldrb	r2, [r1, #0]
   b69cc:	701a      	strb	r2, [r3, #0]
}
   b69ce:	bd10      	pop	{r4, pc}
   b69d0:	000b8d24 	.word	0x000b8d24

000b69d4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b69d4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b69d6:	2b04      	cmp	r3, #4
   b69d8:	d104      	bne.n	b69e4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b69da:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b69dc:	3800      	subs	r0, #0
   b69de:	bf18      	it	ne
   b69e0:	2001      	movne	r0, #1
   b69e2:	4770      	bx	lr
    } else if (version() == 6) {
   b69e4:	2b06      	cmp	r3, #6
   b69e6:	d107      	bne.n	b69f8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b69e8:	6843      	ldr	r3, [r0, #4]
   b69ea:	b93b      	cbnz	r3, b69fc <_ZNK9IPAddresscvbEv+0x28>
   b69ec:	6883      	ldr	r3, [r0, #8]
   b69ee:	b92b      	cbnz	r3, b69fc <_ZNK9IPAddresscvbEv+0x28>
   b69f0:	68c3      	ldr	r3, [r0, #12]
   b69f2:	b91b      	cbnz	r3, b69fc <_ZNK9IPAddresscvbEv+0x28>
   b69f4:	6900      	ldr	r0, [r0, #16]
   b69f6:	e7f1      	b.n	b69dc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b69f8:	2000      	movs	r0, #0
   b69fa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b69fc:	2001      	movs	r0, #1
}
   b69fe:	4770      	bx	lr

000b6a00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6a00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6a02:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6a06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6a0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6a0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6a12:	2304      	movs	r3, #4
   b6a14:	6041      	str	r1, [r0, #4]
   b6a16:	7503      	strb	r3, [r0, #20]
}
   b6a18:	bd10      	pop	{r4, pc}
	...

000b6a1c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6a1c:	b507      	push	{r0, r1, r2, lr}
   b6a1e:	4b06      	ldr	r3, [pc, #24]	; (b6a38 <_ZN9IPAddressC1EPKh+0x1c>)
   b6a20:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6a22:	78cb      	ldrb	r3, [r1, #3]
   b6a24:	9300      	str	r3, [sp, #0]
   b6a26:	788b      	ldrb	r3, [r1, #2]
   b6a28:	784a      	ldrb	r2, [r1, #1]
   b6a2a:	7809      	ldrb	r1, [r1, #0]
   b6a2c:	f7ff ffe8 	bl	b6a00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6a30:	b003      	add	sp, #12
   b6a32:	f85d fb04 	ldr.w	pc, [sp], #4
   b6a36:	bf00      	nop
   b6a38:	000b8d24 	.word	0x000b8d24

000b6a3c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6a3c:	428a      	cmp	r2, r1
{
   b6a3e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6a40:	d007      	beq.n	b6a52 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b6a42:	1a44      	subs	r4, r0, r1
   b6a44:	9802      	ldr	r0, [sp, #8]
   b6a46:	1ac0      	subs	r0, r0, r3
   b6a48:	4344      	muls	r4, r0
   b6a4a:	1a50      	subs	r0, r2, r1
   b6a4c:	fb94 f0f0 	sdiv	r0, r4, r0
   b6a50:	4418      	add	r0, r3
}
   b6a52:	bd10      	pop	{r4, pc}

000b6a54 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6a54:	2100      	movs	r1, #0
   b6a56:	f7ff b9e3 	b.w	b5e20 <system_delay_ms>
	...

000b6a5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6a5c:	4b01      	ldr	r3, [pc, #4]	; (b6a64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6a5e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6a60:	4770      	bx	lr
   b6a62:	bf00      	nop
   b6a64:	2003e568 	.word	0x2003e568

000b6a68 <serialEventRun>:
{
   b6a68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6a6a:	4b0b      	ldr	r3, [pc, #44]	; (b6a98 <serialEventRun+0x30>)
   b6a6c:	b143      	cbz	r3, b6a80 <serialEventRun+0x18>
   b6a6e:	f7ff ff31 	bl	b68d4 <_Z16_fetch_usbserialv>
   b6a72:	6803      	ldr	r3, [r0, #0]
   b6a74:	691b      	ldr	r3, [r3, #16]
   b6a76:	4798      	blx	r3
   b6a78:	2800      	cmp	r0, #0
   b6a7a:	dd01      	ble.n	b6a80 <serialEventRun+0x18>
        serialEvent();
   b6a7c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6a80:	4b06      	ldr	r3, [pc, #24]	; (b6a9c <serialEventRun+0x34>)
   b6a82:	b143      	cbz	r3, b6a96 <serialEventRun+0x2e>
   b6a84:	f000 fb68 	bl	b7158 <_Z22__fetch_global_Serial1v>
   b6a88:	6803      	ldr	r3, [r0, #0]
   b6a8a:	691b      	ldr	r3, [r3, #16]
   b6a8c:	4798      	blx	r3
   b6a8e:	2800      	cmp	r0, #0
   b6a90:	dd01      	ble.n	b6a96 <serialEventRun+0x2e>
        serialEvent1();
   b6a92:	f3af 8000 	nop.w
}
   b6a96:	bd08      	pop	{r3, pc}
	...

000b6aa0 <_post_loop>:
{
   b6aa0:	b508      	push	{r3, lr}
	serialEventRun();
   b6aa2:	f7ff ffe1 	bl	b6a68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6aa6:	f7ff f8eb 	bl	b5c80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6aaa:	4b01      	ldr	r3, [pc, #4]	; (b6ab0 <_post_loop+0x10>)
   b6aac:	6018      	str	r0, [r3, #0]
}
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	2003e740 	.word	0x2003e740

000b6ab4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6ab4:	4805      	ldr	r0, [pc, #20]	; (b6acc <_Z33system_initialize_user_backup_ramv+0x18>)
   b6ab6:	4a06      	ldr	r2, [pc, #24]	; (b6ad0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6ab8:	4906      	ldr	r1, [pc, #24]	; (b6ad4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6aba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6abc:	1a12      	subs	r2, r2, r0
   b6abe:	f001 f9cf 	bl	b7e60 <memcpy>
    __backup_sram_signature = signature;
   b6ac2:	4b05      	ldr	r3, [pc, #20]	; (b6ad8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6ac4:	4a05      	ldr	r2, [pc, #20]	; (b6adc <_Z33system_initialize_user_backup_ramv+0x28>)
   b6ac6:	601a      	str	r2, [r3, #0]
}
   b6ac8:	bd08      	pop	{r3, pc}
   b6aca:	bf00      	nop
   b6acc:	2003f400 	.word	0x2003f400
   b6ad0:	2003f404 	.word	0x2003f404
   b6ad4:	000b8f84 	.word	0x000b8f84
   b6ad8:	2003f400 	.word	0x2003f400
   b6adc:	9a271c1e 	.word	0x9a271c1e

000b6ae0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6ae0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6ae2:	2300      	movs	r3, #0
   b6ae4:	9300      	str	r3, [sp, #0]
   b6ae6:	461a      	mov	r2, r3
   b6ae8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6aec:	f7ff f9aa 	bl	b5e44 <system_ctrl_set_result>
}
   b6af0:	b003      	add	sp, #12
   b6af2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6af8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6af8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6afa:	8843      	ldrh	r3, [r0, #2]
   b6afc:	2b0a      	cmp	r3, #10
   b6afe:	d008      	beq.n	b6b12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6b00:	2b50      	cmp	r3, #80	; 0x50
   b6b02:	d10b      	bne.n	b6b1c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6b04:	4b09      	ldr	r3, [pc, #36]	; (b6b2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6b06:	681b      	ldr	r3, [r3, #0]
   b6b08:	b14b      	cbz	r3, b6b1e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6b0a:	b003      	add	sp, #12
   b6b0c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6b10:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6b12:	f7ff ffe5 	bl	b6ae0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6b16:	b003      	add	sp, #12
   b6b18:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6b1c:	2300      	movs	r3, #0
   b6b1e:	9300      	str	r3, [sp, #0]
   b6b20:	461a      	mov	r2, r3
   b6b22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6b26:	f7ff f98d 	bl	b5e44 <system_ctrl_set_result>
}
   b6b2a:	e7f4      	b.n	b6b16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6b2c:	2003e6f0 	.word	0x2003e6f0

000b6b30 <module_user_init_hook>:
{
   b6b30:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6b32:	4812      	ldr	r0, [pc, #72]	; (b6b7c <module_user_init_hook+0x4c>)
   b6b34:	2100      	movs	r1, #0
   b6b36:	f7ff f9b7 	bl	b5ea8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6b3a:	4b11      	ldr	r3, [pc, #68]	; (b6b80 <module_user_init_hook+0x50>)
   b6b3c:	681a      	ldr	r2, [r3, #0]
   b6b3e:	4b11      	ldr	r3, [pc, #68]	; (b6b84 <module_user_init_hook+0x54>)
   b6b40:	429a      	cmp	r2, r3
   b6b42:	4b11      	ldr	r3, [pc, #68]	; (b6b88 <module_user_init_hook+0x58>)
   b6b44:	bf0c      	ite	eq
   b6b46:	2201      	moveq	r2, #1
   b6b48:	2200      	movne	r2, #0
   b6b4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6b4c:	d001      	beq.n	b6b52 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6b4e:	f7ff ffb1 	bl	b6ab4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6b52:	f7ff f885 	bl	b5c60 <HAL_RNG_GetRandomNumber>
   b6b56:	4604      	mov	r4, r0
    srand(seed);
   b6b58:	f001 f998 	bl	b7e8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6b5c:	4b0b      	ldr	r3, [pc, #44]	; (b6b8c <module_user_init_hook+0x5c>)
   b6b5e:	b113      	cbz	r3, b6b66 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6b60:	4620      	mov	r0, r4
   b6b62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6b66:	2100      	movs	r1, #0
   b6b68:	4808      	ldr	r0, [pc, #32]	; (b6b8c <module_user_init_hook+0x5c>)
   b6b6a:	f7ff f8e9 	bl	b5d40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6b72:	4807      	ldr	r0, [pc, #28]	; (b6b90 <module_user_init_hook+0x60>)
   b6b74:	2100      	movs	r1, #0
   b6b76:	f7ff b95b 	b.w	b5e30 <system_ctrl_set_app_request_handler>
   b6b7a:	bf00      	nop
   b6b7c:	000b6a5d 	.word	0x000b6a5d
   b6b80:	2003f400 	.word	0x2003f400
   b6b84:	9a271c1e 	.word	0x9a271c1e
   b6b88:	2003e6ec 	.word	0x2003e6ec
   b6b8c:	00000000 	.word	0x00000000
   b6b90:	000b6af9 	.word	0x000b6af9

000b6b94 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6b94:	4b01      	ldr	r3, [pc, #4]	; (b6b9c <_GLOBAL__sub_I_RGB+0x8>)
   b6b96:	2200      	movs	r2, #0
   b6b98:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6b9a:	4770      	bx	lr
   b6b9c:	2003e6f4 	.word	0x2003e6f4

000b6ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6ba0:	4b02      	ldr	r3, [pc, #8]	; (b6bac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6ba2:	681a      	ldr	r2, [r3, #0]
   b6ba4:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6ba6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6ba8:	4770      	bx	lr
   b6baa:	bf00      	nop
   b6bac:	2003e564 	.word	0x2003e564
   b6bb0:	2003e704 	.word	0x2003e704

000b6bb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6bb4:	4b01      	ldr	r3, [pc, #4]	; (b6bbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6bb6:	4a02      	ldr	r2, [pc, #8]	; (b6bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6bb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6bba:	4770      	bx	lr
   b6bbc:	2003e708 	.word	0x2003e708
   b6bc0:	000b8d4c 	.word	0x000b8d4c

000b6bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6bc6:	4606      	mov	r6, r0
   b6bc8:	460d      	mov	r5, r1
  size_t n = 0;
   b6bca:	188f      	adds	r7, r1, r2
   b6bcc:	2400      	movs	r4, #0
  while (size--) {
   b6bce:	42bd      	cmp	r5, r7
   b6bd0:	d00c      	beq.n	b6bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6bd2:	6833      	ldr	r3, [r6, #0]
   b6bd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6bd8:	689b      	ldr	r3, [r3, #8]
   b6bda:	4630      	mov	r0, r6
   b6bdc:	4798      	blx	r3
     if (chunk>=0)
   b6bde:	1e03      	subs	r3, r0, #0
   b6be0:	db01      	blt.n	b6be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6be2:	441c      	add	r4, r3
  while (size--) {
   b6be4:	e7f3      	b.n	b6bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6be6:	2c00      	cmp	r4, #0
   b6be8:	bf08      	it	eq
   b6bea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6bec:	4620      	mov	r0, r4
   b6bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6bf0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6bf0:	b513      	push	{r0, r1, r4, lr}
   b6bf2:	4604      	mov	r4, r0
    }
   b6bf4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6bf6:	b159      	cbz	r1, b6c10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6bf8:	9101      	str	r1, [sp, #4]
   b6bfa:	f001 f97f 	bl	b7efc <strlen>
   b6bfe:	6823      	ldr	r3, [r4, #0]
   b6c00:	9901      	ldr	r1, [sp, #4]
   b6c02:	68db      	ldr	r3, [r3, #12]
   b6c04:	4602      	mov	r2, r0
   b6c06:	4620      	mov	r0, r4
    }
   b6c08:	b002      	add	sp, #8
   b6c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6c0e:	4718      	bx	r3
    }
   b6c10:	b002      	add	sp, #8
   b6c12:	bd10      	pop	{r4, pc}

000b6c14 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6c14:	b508      	push	{r3, lr}
  return write(str);
   b6c16:	f7ff ffeb 	bl	b6bf0 <_ZN5Print5writeEPKc>
}
   b6c1a:	bd08      	pop	{r3, pc}

000b6c1c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6c1c:	6803      	ldr	r3, [r0, #0]
   b6c1e:	689b      	ldr	r3, [r3, #8]
   b6c20:	4718      	bx	r3

000b6c22 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6c22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6c24:	210d      	movs	r1, #13
{
   b6c26:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6c28:	f7ff fff8 	bl	b6c1c <_ZN5Print5printEc>
  n += print('\n');
   b6c2c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6c2e:	4604      	mov	r4, r0
  n += print('\n');
   b6c30:	4628      	mov	r0, r5
   b6c32:	f7ff fff3 	bl	b6c1c <_ZN5Print5printEc>
  return n;
}
   b6c36:	4420      	add	r0, r4
   b6c38:	bd38      	pop	{r3, r4, r5, pc}

000b6c3a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6c3a:	b538      	push	{r3, r4, r5, lr}
   b6c3c:	4605      	mov	r5, r0
  return write(str);
   b6c3e:	f7ff ffd7 	bl	b6bf0 <_ZN5Print5writeEPKc>
   b6c42:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6c44:	4628      	mov	r0, r5
   b6c46:	f7ff ffec 	bl	b6c22 <_ZN5Print7printlnEv>
  return n;
}
   b6c4a:	4420      	add	r0, r4
   b6c4c:	bd38      	pop	{r3, r4, r5, pc}

000b6c4e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6c4e:	b530      	push	{r4, r5, lr}
   b6c50:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6c52:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6c54:	2a01      	cmp	r2, #1
  *str = '\0';
   b6c56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6c5a:	bf98      	it	ls
   b6c5c:	220a      	movls	r2, #10
   b6c5e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6c60:	460d      	mov	r5, r1
   b6c62:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6c66:	fb01 5312 	mls	r3, r1, r2, r5
   b6c6a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6c6e:	2b09      	cmp	r3, #9
   b6c70:	bf94      	ite	ls
   b6c72:	3330      	addls	r3, #48	; 0x30
   b6c74:	3337      	addhi	r3, #55	; 0x37
   b6c76:	b2db      	uxtb	r3, r3
  } while(n);
   b6c78:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6c7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6c7e:	d9ef      	bls.n	b6c60 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6c80:	4621      	mov	r1, r4
   b6c82:	f7ff ffb5 	bl	b6bf0 <_ZN5Print5writeEPKc>
}
   b6c86:	b00b      	add	sp, #44	; 0x2c
   b6c88:	bd30      	pop	{r4, r5, pc}
	...

000b6c8c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c90:	ec55 4b10 	vmov	r4, r5, d0
   b6c94:	4606      	mov	r6, r0
   b6c96:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6c98:	ee10 2a10 	vmov	r2, s0
   b6c9c:	ee10 0a10 	vmov	r0, s0
   b6ca0:	462b      	mov	r3, r5
   b6ca2:	4629      	mov	r1, r5
   b6ca4:	f001 f878 	bl	b7d98 <__aeabi_dcmpun>
   b6ca8:	b140      	cbz	r0, b6cbc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6caa:	4953      	ldr	r1, [pc, #332]	; (b6df8 <_ZN5Print10printFloatEdh+0x16c>)
   b6cac:	4630      	mov	r0, r6
   b6cae:	f7ff ff9f 	bl	b6bf0 <_ZN5Print5writeEPKc>
   b6cb2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6cb4:	4650      	mov	r0, sl
   b6cb6:	b003      	add	sp, #12
   b6cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6cbc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6cc0:	4b4e      	ldr	r3, [pc, #312]	; (b6dfc <_ZN5Print10printFloatEdh+0x170>)
   b6cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	4649      	mov	r1, r9
   b6cca:	f001 f865 	bl	b7d98 <__aeabi_dcmpun>
   b6cce:	b948      	cbnz	r0, b6ce4 <_ZN5Print10printFloatEdh+0x58>
   b6cd0:	4b4a      	ldr	r3, [pc, #296]	; (b6dfc <_ZN5Print10printFloatEdh+0x170>)
   b6cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	4649      	mov	r1, r9
   b6cda:	f001 f83f 	bl	b7d5c <__aeabi_dcmple>
   b6cde:	b908      	cbnz	r0, b6ce4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6ce0:	4947      	ldr	r1, [pc, #284]	; (b6e00 <_ZN5Print10printFloatEdh+0x174>)
   b6ce2:	e7e3      	b.n	b6cac <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6ce4:	4b47      	ldr	r3, [pc, #284]	; (b6e04 <_ZN5Print10printFloatEdh+0x178>)
   b6ce6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6cea:	4620      	mov	r0, r4
   b6cec:	4629      	mov	r1, r5
   b6cee:	f001 f849 	bl	b7d84 <__aeabi_dcmpgt>
   b6cf2:	b108      	cbz	r0, b6cf8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6cf4:	4944      	ldr	r1, [pc, #272]	; (b6e08 <_ZN5Print10printFloatEdh+0x17c>)
   b6cf6:	e7d9      	b.n	b6cac <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6cf8:	4b44      	ldr	r3, [pc, #272]	; (b6e0c <_ZN5Print10printFloatEdh+0x180>)
   b6cfa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6cfe:	4620      	mov	r0, r4
   b6d00:	4629      	mov	r1, r5
   b6d02:	f001 f821 	bl	b7d48 <__aeabi_dcmplt>
   b6d06:	2800      	cmp	r0, #0
   b6d08:	d1f4      	bne.n	b6cf4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6d0a:	2200      	movs	r2, #0
   b6d0c:	2300      	movs	r3, #0
   b6d0e:	4620      	mov	r0, r4
   b6d10:	4629      	mov	r1, r5
   b6d12:	f001 f819 	bl	b7d48 <__aeabi_dcmplt>
   b6d16:	b1d0      	cbz	r0, b6d4e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6d18:	212d      	movs	r1, #45	; 0x2d
   b6d1a:	4630      	mov	r0, r6
   b6d1c:	f7ff ff7e 	bl	b6c1c <_ZN5Print5printEc>
     number = -number;
   b6d20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6d24:	4682      	mov	sl, r0
     number = -number;
   b6d26:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6d28:	4939      	ldr	r1, [pc, #228]	; (b6e10 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6d2a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6e18 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6d2e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6d32:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6d34:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6d38:	fa5f f38b 	uxtb.w	r3, fp
   b6d3c:	429f      	cmp	r7, r3
   b6d3e:	d908      	bls.n	b6d52 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6d40:	4642      	mov	r2, r8
   b6d42:	464b      	mov	r3, r9
   b6d44:	f000 feb8 	bl	b7ab8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6d48:	f10b 0b01 	add.w	fp, fp, #1
   b6d4c:	e7f4      	b.n	b6d38 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6d4e:	4682      	mov	sl, r0
   b6d50:	e7ea      	b.n	b6d28 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6d52:	4622      	mov	r2, r4
   b6d54:	462b      	mov	r3, r5
   b6d56:	f000 fbcf 	bl	b74f8 <__adddf3>
   b6d5a:	460d      	mov	r5, r1
   b6d5c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6d5e:	f001 f859 	bl	b7e14 <__aeabi_d2uiz>
   b6d62:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6d64:	f000 fd04 	bl	b7770 <__aeabi_ui2d>
   b6d68:	4602      	mov	r2, r0
   b6d6a:	460b      	mov	r3, r1
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	4629      	mov	r1, r5
   b6d70:	f000 fbc0 	bl	b74f4 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b6d74:	220a      	movs	r2, #10
   b6d76:	4604      	mov	r4, r0
   b6d78:	460d      	mov	r5, r1
   b6d7a:	4630      	mov	r0, r6
   b6d7c:	4641      	mov	r1, r8
   b6d7e:	f7ff ff66 	bl	b6c4e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6d82:	4482      	add	sl, r0
  if (digits > 0) {
   b6d84:	2f00      	cmp	r7, #0
   b6d86:	d095      	beq.n	b6cb4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6d88:	4922      	ldr	r1, [pc, #136]	; (b6e14 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6d8a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6e18 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6d8e:	4630      	mov	r0, r6
   b6d90:	f7ff ff2e 	bl	b6bf0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6d94:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6d98:	4482      	add	sl, r0
  while (digits-- > 0)
   b6d9a:	2f00      	cmp	r7, #0
   b6d9c:	d08a      	beq.n	b6cb4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6d9e:	4642      	mov	r2, r8
   b6da0:	464b      	mov	r3, r9
   b6da2:	4620      	mov	r0, r4
   b6da4:	4629      	mov	r1, r5
   b6da6:	f000 fd5d 	bl	b7864 <__aeabi_dmul>
   b6daa:	4604      	mov	r4, r0
   b6dac:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6dae:	f001 f809 	bl	b7dc4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6db2:	f1b0 0b00 	subs.w	fp, r0, #0
   b6db6:	da1c      	bge.n	b6df2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6db8:	212d      	movs	r1, #45	; 0x2d
   b6dba:	4630      	mov	r0, r6
   b6dbc:	f7ff ff2e 	bl	b6c1c <_ZN5Print5printEc>
            val = -n;
   b6dc0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6dc4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6dc6:	220a      	movs	r2, #10
   b6dc8:	4630      	mov	r0, r6
   b6dca:	9301      	str	r3, [sp, #4]
   b6dcc:	f7ff ff3f 	bl	b6c4e <_ZN5Print11printNumberEmh>
   b6dd0:	9b01      	ldr	r3, [sp, #4]
   b6dd2:	4418      	add	r0, r3
    n += print(toPrint);
   b6dd4:	4482      	add	sl, r0
    remainder -= toPrint;
   b6dd6:	4658      	mov	r0, fp
   b6dd8:	f000 fcda 	bl	b7790 <__aeabi_i2d>
   b6ddc:	4602      	mov	r2, r0
   b6dde:	460b      	mov	r3, r1
   b6de0:	4620      	mov	r0, r4
   b6de2:	4629      	mov	r1, r5
   b6de4:	f000 fb86 	bl	b74f4 <__aeabi_dsub>
   b6de8:	3f01      	subs	r7, #1
   b6dea:	4604      	mov	r4, r0
   b6dec:	460d      	mov	r5, r1
   b6dee:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6df0:	e7d3      	b.n	b6d9a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6df2:	4659      	mov	r1, fp
        size_t t = 0;
   b6df4:	2300      	movs	r3, #0
   b6df6:	e7e6      	b.n	b6dc6 <_ZN5Print10printFloatEdh+0x13a>
   b6df8:	000b8d50 	.word	0x000b8d50
   b6dfc:	7fefffff 	.word	0x7fefffff
   b6e00:	000b8d54 	.word	0x000b8d54
   b6e04:	41efffff 	.word	0x41efffff
   b6e08:	000b8d58 	.word	0x000b8d58
   b6e0c:	c1efffff 	.word	0xc1efffff
   b6e10:	3fe00000 	.word	0x3fe00000
   b6e14:	000b8d5c 	.word	0x000b8d5c
   b6e18:	40240000 	.word	0x40240000

000b6e1c <_ZN5Print7printlnEdi>:
{
   b6e1c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b6e1e:	b2c9      	uxtb	r1, r1
{
   b6e20:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b6e22:	f7ff ff33 	bl	b6c8c <_ZN5Print10printFloatEdh>
   b6e26:	4604      	mov	r4, r0
  n += println();
   b6e28:	4628      	mov	r0, r5
   b6e2a:	f7ff fefa 	bl	b6c22 <_ZN5Print7printlnEv>
}
   b6e2e:	4420      	add	r0, r4
   b6e30:	bd38      	pop	{r3, r4, r5, pc}

000b6e32 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e36:	b086      	sub	sp, #24
   b6e38:	af00      	add	r7, sp, #0
   b6e3a:	4605      	mov	r5, r0
   b6e3c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e3e:	1d38      	adds	r0, r7, #4
   b6e40:	2114      	movs	r1, #20
{
   b6e42:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6e44:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e46:	f7ff f817 	bl	b5e78 <vsnprintf>

    if (n<bufsize)
   b6e4a:	2813      	cmp	r0, #19
   b6e4c:	d80e      	bhi.n	b6e6c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6e4e:	1d39      	adds	r1, r7, #4
   b6e50:	4628      	mov	r0, r5
   b6e52:	f7ff fecd 	bl	b6bf0 <_ZN5Print5writeEPKc>
   b6e56:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6e58:	b11e      	cbz	r6, b6e62 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6e5a:	4628      	mov	r0, r5
   b6e5c:	f7ff fee1 	bl	b6c22 <_ZN5Print7printlnEv>
   b6e60:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6e62:	4620      	mov	r0, r4
   b6e64:	3718      	adds	r7, #24
   b6e66:	46bd      	mov	sp, r7
   b6e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6e6c:	f100 0308 	add.w	r3, r0, #8
   b6e70:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6e74:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6e76:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6e7a:	4622      	mov	r2, r4
   b6e7c:	1c41      	adds	r1, r0, #1
   b6e7e:	683b      	ldr	r3, [r7, #0]
   b6e80:	4668      	mov	r0, sp
   b6e82:	f7fe fff9 	bl	b5e78 <vsnprintf>
  return write(str);
   b6e86:	4669      	mov	r1, sp
   b6e88:	4628      	mov	r0, r5
   b6e8a:	f7ff feb1 	bl	b6bf0 <_ZN5Print5writeEPKc>
   b6e8e:	4604      	mov	r4, r0
   b6e90:	46c5      	mov	sp, r8
   b6e92:	e7e1      	b.n	b6e58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6e94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6e94:	4802      	ldr	r0, [pc, #8]	; (b6ea0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6e96:	2300      	movs	r3, #0
   b6e98:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6e9a:	f7fe bed9 	b.w	b5c50 <os_mutex_recursive_create>
   b6e9e:	bf00      	nop
   b6ea0:	2003e70c 	.word	0x2003e70c

000b6ea4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6ea4:	4b05      	ldr	r3, [pc, #20]	; (b6ebc <_GLOBAL__sub_I_System+0x18>)
   b6ea6:	2202      	movs	r2, #2
   b6ea8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6eaa:	4b05      	ldr	r3, [pc, #20]	; (b6ec0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6eac:	4a05      	ldr	r2, [pc, #20]	; (b6ec4 <_GLOBAL__sub_I_System+0x20>)
   b6eae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6eb0:	2000      	movs	r0, #0
   b6eb2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6eb6:	f7fe bfab 	b.w	b5e10 <set_system_mode>
   b6eba:	bf00      	nop
   b6ebc:	2003e71c 	.word	0x2003e71c
   b6ec0:	2003e710 	.word	0x2003e710
   b6ec4:	ffff0000 	.word	0xffff0000

000b6ec8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6ec8:	2100      	movs	r1, #0
   b6eca:	f7fe be21 	b.w	b5b10 <hal_spi_release>

000b6ece <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6ece:	2100      	movs	r1, #0
   b6ed0:	f7fe be16 	b.w	b5b00 <hal_spi_acquire>

000b6ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6ed4:	b510      	push	{r4, lr}
   b6ed6:	4604      	mov	r4, r0
   b6ed8:	4608      	mov	r0, r1
{
    _spi = spi;
   b6eda:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6edc:	f7fe fdf0 	bl	b5ac0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ee0:	2300      	movs	r3, #0
   b6ee2:	6063      	str	r3, [r4, #4]
}
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	bd10      	pop	{r4, pc}

000b6ee8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6ee8:	b513      	push	{r0, r1, r4, lr}
   b6eea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6eec:	7800      	ldrb	r0, [r0, #0]
   b6eee:	f7ff ffee 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6ef2:	b958      	cbnz	r0, b6f0c <_ZN8SPIClass5beginEv+0x24>
   b6ef4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6ef6:	9001      	str	r0, [sp, #4]
   b6ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6efc:	f7fe fdd0 	bl	b5aa0 <hal_spi_begin>
        unlock();
   b6f00:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f02:	b002      	add	sp, #8
   b6f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f08:	f7ff bfde 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
   b6f0c:	b002      	add	sp, #8
   b6f0e:	bd10      	pop	{r4, pc}

000b6f10 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6f10:	7800      	ldrb	r0, [r0, #0]
   b6f12:	f7ff bfd9 	b.w	b6ec8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6f18 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6f18:	0840      	lsrs	r0, r0, #1
{
   b6f1a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6f1c:	6018      	str	r0, [r3, #0]
   b6f1e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6f20:	6818      	ldr	r0, [r3, #0]
   b6f22:	4288      	cmp	r0, r1
   b6f24:	b2e5      	uxtb	r5, r4
   b6f26:	d906      	bls.n	b6f36 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6f28:	3401      	adds	r4, #1
   b6f2a:	2c08      	cmp	r4, #8
   b6f2c:	d002      	beq.n	b6f34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6f2e:	0840      	lsrs	r0, r0, #1
   b6f30:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6f32:	e7f5      	b.n	b6f20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6f34:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6f38:	5d5b      	ldrb	r3, [r3, r5]
   b6f3a:	7013      	strb	r3, [r2, #0]
}
   b6f3c:	bd30      	pop	{r4, r5, pc}
   b6f3e:	bf00      	nop
   b6f40:	000b8d5e 	.word	0x000b8d5e

000b6f44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f48:	4606      	mov	r6, r0
   b6f4a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6f4c:	7800      	ldrb	r0, [r0, #0]
{
   b6f4e:	460c      	mov	r4, r1
    CHECK(lock());
   b6f50:	f7ff ffbd 	bl	b6ece <_ZN8SPIClass4lockEv.isra.0>
   b6f54:	2800      	cmp	r0, #0
   b6f56:	db1b      	blt.n	b6f90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6f58:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6f5a:	2214      	movs	r2, #20
   b6f5c:	2100      	movs	r1, #0
   b6f5e:	a809      	add	r0, sp, #36	; 0x24
   b6f60:	f000 ff8c 	bl	b7e7c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f64:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6f66:	2200      	movs	r2, #0
   b6f68:	a909      	add	r1, sp, #36	; 0x24
   b6f6a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6f70:	f7fe fdb6 	bl	b5ae0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6f74:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6f78:	b113      	cbz	r3, b6f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6f7a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6f7e:	b155      	cbz	r5, b6f96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6f80:	2700      	movs	r7, #0
   b6f82:	46b9      	mov	r9, r7
   b6f84:	46b8      	mov	r8, r7
   b6f86:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6f88:	7923      	ldrb	r3, [r4, #4]
   b6f8a:	b15d      	cbz	r5, b6fa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6f8c:	b1c3      	cbz	r3, b6fc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6f8e:	2000      	movs	r0, #0
}
   b6f90:	b00f      	add	sp, #60	; 0x3c
   b6f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6f96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6f9a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6f9e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6fa2:	e7f1      	b.n	b6f88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6fa4:	2b00      	cmp	r3, #0
   b6fa6:	d135      	bne.n	b7014 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6fa8:	68a3      	ldr	r3, [r4, #8]
   b6faa:	4543      	cmp	r3, r8
   b6fac:	d108      	bne.n	b6fc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6fae:	f88d 9020 	strb.w	r9, [sp, #32]
   b6fb2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6fb6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6fba:	89a3      	ldrh	r3, [r4, #12]
   b6fbc:	429a      	cmp	r2, r3
   b6fbe:	d0e6      	beq.n	b6f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6fc0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6fc2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6fc4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6fca:	ab04      	add	r3, sp, #16
   b6fcc:	f10d 020f 	add.w	r2, sp, #15
   b6fd0:	f7ff ffa2 	bl	b6f18 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6fd4:	7921      	ldrb	r1, [r4, #4]
   b6fd6:	b985      	cbnz	r5, b6ffa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6fd8:	b989      	cbnz	r1, b6ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6fda:	68a3      	ldr	r3, [r4, #8]
   b6fdc:	4543      	cmp	r3, r8
   b6fde:	d30e      	bcc.n	b6ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6fe0:	f88d 9020 	strb.w	r9, [sp, #32]
   b6fe4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6fe8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6fec:	89a3      	ldrh	r3, [r4, #12]
   b6fee:	429a      	cmp	r2, r3
   b6ff0:	d105      	bne.n	b6ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6ff2:	9b04      	ldr	r3, [sp, #16]
   b6ff4:	4543      	cmp	r3, r8
   b6ff6:	d102      	bne.n	b6ffe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6ff8:	e7c9      	b.n	b6f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6ffa:	2900      	cmp	r1, #0
   b6ffc:	d1f9      	bne.n	b6ff2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6ffe:	2300      	movs	r3, #0
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	7b63      	ldrb	r3, [r4, #13]
   b7004:	9300      	str	r3, [sp, #0]
   b7006:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b700a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b700c:	7830      	ldrb	r0, [r6, #0]
   b700e:	f7fe fd6f 	bl	b5af0 <hal_spi_set_settings>
   b7012:	e7bc      	b.n	b6f8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7014:	e9cd 5500 	strd	r5, r5, [sp]
   b7018:	462b      	mov	r3, r5
   b701a:	462a      	mov	r2, r5
   b701c:	2101      	movs	r1, #1
   b701e:	e7f5      	b.n	b700c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7020 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7020:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7022:	7800      	ldrb	r0, [r0, #0]
   b7024:	f7fe fd44 	bl	b5ab0 <hal_spi_transfer>
}
   b7028:	b2c0      	uxtb	r0, r0
   b702a:	bd08      	pop	{r3, pc}

000b702c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b702c:	2200      	movs	r2, #0
   b702e:	6840      	ldr	r0, [r0, #4]
   b7030:	4611      	mov	r1, r2
   b7032:	f7fe bec5 	b.w	b5dc0 <network_listening>

000b7036 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7036:	2200      	movs	r2, #0
   b7038:	6840      	ldr	r0, [r0, #4]
   b703a:	4611      	mov	r1, r2
   b703c:	f7fe bed0 	b.w	b5de0 <network_get_listen_timeout>

000b7040 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7040:	6840      	ldr	r0, [r0, #4]
   b7042:	2200      	movs	r2, #0
   b7044:	f7fe bec4 	b.w	b5dd0 <network_set_listen_timeout>

000b7048 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7048:	6840      	ldr	r0, [r0, #4]
   b704a:	2200      	movs	r2, #0
   b704c:	f081 0101 	eor.w	r1, r1, #1
   b7050:	f7fe beae 	b.w	b5db0 <network_listen>

000b7054 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7054:	2300      	movs	r3, #0
   b7056:	6840      	ldr	r0, [r0, #4]
   b7058:	461a      	mov	r2, r3
   b705a:	4619      	mov	r1, r3
   b705c:	f7fe bea0 	b.w	b5da0 <network_off>

000b7060 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7060:	2300      	movs	r3, #0
   b7062:	6840      	ldr	r0, [r0, #4]
   b7064:	461a      	mov	r2, r3
   b7066:	4619      	mov	r1, r3
   b7068:	f7fe be92 	b.w	b5d90 <network_on>

000b706c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b706c:	2200      	movs	r2, #0
   b706e:	6840      	ldr	r0, [r0, #4]
   b7070:	4611      	mov	r1, r2
   b7072:	f7fe be85 	b.w	b5d80 <network_ready>

000b7076 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7076:	2200      	movs	r2, #0
   b7078:	6840      	ldr	r0, [r0, #4]
   b707a:	4611      	mov	r1, r2
   b707c:	f7fe be70 	b.w	b5d60 <network_connecting>

000b7080 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7080:	6840      	ldr	r0, [r0, #4]
   b7082:	2200      	movs	r2, #0
   b7084:	2102      	movs	r1, #2
   b7086:	f7fe be73 	b.w	b5d70 <network_disconnect>

000b708a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b708a:	2300      	movs	r3, #0
   b708c:	6840      	ldr	r0, [r0, #4]
   b708e:	461a      	mov	r2, r3
   b7090:	f7fe be5e 	b.w	b5d50 <network_connect>

000b7094 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7094:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7096:	2203      	movs	r2, #3
   b7098:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b709a:	4a02      	ldr	r2, [pc, #8]	; (b70a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b709c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b709e:	4770      	bx	lr
   b70a0:	2003e720 	.word	0x2003e720
   b70a4:	000b8d70 	.word	0x000b8d70

000b70a8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70a8:	4770      	bx	lr
	...

000b70ac <_Z17acquireWireBufferv>:
{
   b70ac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70ae:	2520      	movs	r5, #32
   b70b0:	2314      	movs	r3, #20
{
   b70b2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b70b4:	6003      	str	r3, [r0, #0]
   b70b6:	6085      	str	r5, [r0, #8]
   b70b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70ba:	4906      	ldr	r1, [pc, #24]	; (b70d4 <_Z17acquireWireBufferv+0x28>)
   b70bc:	4628      	mov	r0, r5
   b70be:	f000 f901 	bl	b72c4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70c2:	4904      	ldr	r1, [pc, #16]	; (b70d4 <_Z17acquireWireBufferv+0x28>)
	};
   b70c4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70c6:	4628      	mov	r0, r5
   b70c8:	f000 f8fc 	bl	b72c4 <_ZnajRKSt9nothrow_t>
	};
   b70cc:	60e0      	str	r0, [r4, #12]
}
   b70ce:	4620      	mov	r0, r4
   b70d0:	bd38      	pop	{r3, r4, r5, pc}
   b70d2:	bf00      	nop
   b70d4:	000b8da4 	.word	0x000b8da4

000b70d8 <_Z19__fetch_global_Wirev>:
{
   b70d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70da:	4d0e      	ldr	r5, [pc, #56]	; (b7114 <_Z19__fetch_global_Wirev+0x3c>)
   b70dc:	7829      	ldrb	r1, [r5, #0]
   b70de:	f3bf 8f5b 	dmb	ish
   b70e2:	f011 0401 	ands.w	r4, r1, #1
{
   b70e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70e8:	d111      	bne.n	b710e <_Z19__fetch_global_Wirev+0x36>
   b70ea:	4628      	mov	r0, r5
   b70ec:	f7fc ffe6 	bl	b40bc <__cxa_guard_acquire>
   b70f0:	b168      	cbz	r0, b710e <_Z19__fetch_global_Wirev+0x36>
   b70f2:	a801      	add	r0, sp, #4
   b70f4:	f7ff ffda 	bl	b70ac <_Z17acquireWireBufferv>
   b70f8:	aa01      	add	r2, sp, #4
   b70fa:	4621      	mov	r1, r4
   b70fc:	4806      	ldr	r0, [pc, #24]	; (b7118 <_Z19__fetch_global_Wirev+0x40>)
   b70fe:	f7ff fb39 	bl	b6774 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7102:	4628      	mov	r0, r5
   b7104:	f7fc ffdf 	bl	b40c6 <__cxa_guard_release>
   b7108:	4804      	ldr	r0, [pc, #16]	; (b711c <_Z19__fetch_global_Wirev+0x44>)
   b710a:	f000 fea3 	bl	b7e54 <atexit>
	return wire;
}
   b710e:	4802      	ldr	r0, [pc, #8]	; (b7118 <_Z19__fetch_global_Wirev+0x40>)
   b7110:	b007      	add	sp, #28
   b7112:	bd30      	pop	{r4, r5, pc}
   b7114:	2003e728 	.word	0x2003e728
   b7118:	2003e72c 	.word	0x2003e72c
   b711c:	000b70a9 	.word	0x000b70a9

000b7120 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7120:	4770      	bx	lr
	...

000b7124 <_Z20acquireSerial1Bufferv>:
{
   b7124:	b538      	push	{r3, r4, r5, lr}
   b7126:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7128:	2514      	movs	r5, #20
   b712a:	462a      	mov	r2, r5
   b712c:	2100      	movs	r1, #0
   b712e:	f000 fea5 	bl	b7e7c <memset>
   b7132:	8025      	strh	r5, [r4, #0]
   b7134:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7136:	4907      	ldr	r1, [pc, #28]	; (b7154 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7138:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b713a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b713c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b713e:	f000 f8c1 	bl	b72c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7142:	4904      	ldr	r1, [pc, #16]	; (b7154 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7144:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7146:	4628      	mov	r0, r5
   b7148:	f000 f8bc 	bl	b72c4 <_ZnajRKSt9nothrow_t>
    };
   b714c:	60e0      	str	r0, [r4, #12]
}
   b714e:	4620      	mov	r0, r4
   b7150:	bd38      	pop	{r3, r4, r5, pc}
   b7152:	bf00      	nop
   b7154:	000b8da4 	.word	0x000b8da4

000b7158 <_Z22__fetch_global_Serial1v>:
{
   b7158:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b715a:	4d0e      	ldr	r5, [pc, #56]	; (b7194 <_Z22__fetch_global_Serial1v+0x3c>)
   b715c:	7829      	ldrb	r1, [r5, #0]
   b715e:	f3bf 8f5b 	dmb	ish
   b7162:	f011 0401 	ands.w	r4, r1, #1
{
   b7166:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7168:	d111      	bne.n	b718e <_Z22__fetch_global_Serial1v+0x36>
   b716a:	4628      	mov	r0, r5
   b716c:	f7fc ffa6 	bl	b40bc <__cxa_guard_acquire>
   b7170:	b168      	cbz	r0, b718e <_Z22__fetch_global_Serial1v+0x36>
   b7172:	a801      	add	r0, sp, #4
   b7174:	f7ff ffd6 	bl	b7124 <_Z20acquireSerial1Bufferv>
   b7178:	aa01      	add	r2, sp, #4
   b717a:	4621      	mov	r1, r4
   b717c:	4806      	ldr	r0, [pc, #24]	; (b7198 <_Z22__fetch_global_Serial1v+0x40>)
   b717e:	f7ff fab9 	bl	b66f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7182:	4628      	mov	r0, r5
   b7184:	f7fc ff9f 	bl	b40c6 <__cxa_guard_release>
   b7188:	4804      	ldr	r0, [pc, #16]	; (b719c <_Z22__fetch_global_Serial1v+0x44>)
   b718a:	f000 fe63 	bl	b7e54 <atexit>
    return serial1;
}
   b718e:	4802      	ldr	r0, [pc, #8]	; (b7198 <_Z22__fetch_global_Serial1v+0x40>)
   b7190:	b007      	add	sp, #28
   b7192:	bd30      	pop	{r4, r5, pc}
   b7194:	2003e744 	.word	0x2003e744
   b7198:	2003e748 	.word	0x2003e748
   b719c:	000b7121 	.word	0x000b7121

000b71a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b71a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b71a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b71a4:	d902      	bls.n	b71ac <pinAvailable+0xc>
    return false;
   b71a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b71a8:	b002      	add	sp, #8
   b71aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b71ac:	f1a0 030b 	sub.w	r3, r0, #11
   b71b0:	2b02      	cmp	r3, #2
   b71b2:	d81a      	bhi.n	b71ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b71b4:	4c17      	ldr	r4, [pc, #92]	; (b7214 <pinAvailable+0x74>)
   b71b6:	7821      	ldrb	r1, [r4, #0]
   b71b8:	f3bf 8f5b 	dmb	ish
   b71bc:	f011 0101 	ands.w	r1, r1, #1
   b71c0:	d10b      	bne.n	b71da <pinAvailable+0x3a>
   b71c2:	4620      	mov	r0, r4
   b71c4:	9101      	str	r1, [sp, #4]
   b71c6:	f7fc ff79 	bl	b40bc <__cxa_guard_acquire>
   b71ca:	9901      	ldr	r1, [sp, #4]
   b71cc:	b128      	cbz	r0, b71da <pinAvailable+0x3a>
   b71ce:	4812      	ldr	r0, [pc, #72]	; (b7218 <pinAvailable+0x78>)
   b71d0:	f7ff fe80 	bl	b6ed4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b71d4:	4620      	mov	r0, r4
   b71d6:	f7fc ff76 	bl	b40c6 <__cxa_guard_release>
   b71da:	4b0f      	ldr	r3, [pc, #60]	; (b7218 <pinAvailable+0x78>)
   b71dc:	7818      	ldrb	r0, [r3, #0]
   b71de:	f7fe fc77 	bl	b5ad0 <hal_spi_is_enabled>
   b71e2:	2800      	cmp	r0, #0
   b71e4:	d1df      	bne.n	b71a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b71e6:	2001      	movs	r0, #1
   b71e8:	e7de      	b.n	b71a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b71ea:	2801      	cmp	r0, #1
   b71ec:	d809      	bhi.n	b7202 <pinAvailable+0x62>
   b71ee:	f7ff ff73 	bl	b70d8 <_Z19__fetch_global_Wirev>
   b71f2:	2100      	movs	r1, #0
   b71f4:	7c00      	ldrb	r0, [r0, #16]
   b71f6:	f7fe fc3b 	bl	b5a70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b71fa:	f080 0001 	eor.w	r0, r0, #1
   b71fe:	b2c0      	uxtb	r0, r0
   b7200:	e7d2      	b.n	b71a8 <pinAvailable+0x8>
   b7202:	3809      	subs	r0, #9
   b7204:	2801      	cmp	r0, #1
   b7206:	d8ee      	bhi.n	b71e6 <pinAvailable+0x46>
   b7208:	f7ff ffa6 	bl	b7158 <_Z22__fetch_global_Serial1v>
   b720c:	7c00      	ldrb	r0, [r0, #16]
   b720e:	f7fe fcdf 	bl	b5bd0 <hal_usart_is_enabled>
   b7212:	e7f2      	b.n	b71fa <pinAvailable+0x5a>
   b7214:	2003e6b8 	.word	0x2003e6b8
   b7218:	2003e6bc 	.word	0x2003e6bc

000b721c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b721c:	2823      	cmp	r0, #35	; 0x23
{
   b721e:	b538      	push	{r3, r4, r5, lr}
   b7220:	4604      	mov	r4, r0
   b7222:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7224:	d80a      	bhi.n	b723c <pinMode+0x20>
   b7226:	29ff      	cmp	r1, #255	; 0xff
   b7228:	d008      	beq.n	b723c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b722a:	f7ff ffb9 	bl	b71a0 <pinAvailable>
   b722e:	b128      	cbz	r0, b723c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7230:	4629      	mov	r1, r5
   b7232:	4620      	mov	r0, r4
}
   b7234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7238:	f7fe bd3a 	b.w	b5cb0 <HAL_Pin_Mode>
}
   b723c:	bd38      	pop	{r3, r4, r5, pc}

000b723e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b723e:	b538      	push	{r3, r4, r5, lr}
   b7240:	4604      	mov	r4, r0
   b7242:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7244:	f7fe fd3c 	bl	b5cc0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7248:	28ff      	cmp	r0, #255	; 0xff
   b724a:	d010      	beq.n	b726e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b724c:	2806      	cmp	r0, #6
   b724e:	d804      	bhi.n	b725a <digitalWrite+0x1c>
   b7250:	234d      	movs	r3, #77	; 0x4d
   b7252:	fa23 f000 	lsr.w	r0, r3, r0
   b7256:	07c3      	lsls	r3, r0, #31
   b7258:	d409      	bmi.n	b726e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b725a:	4620      	mov	r0, r4
   b725c:	f7ff ffa0 	bl	b71a0 <pinAvailable>
   b7260:	b128      	cbz	r0, b726e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7262:	4629      	mov	r1, r5
   b7264:	4620      	mov	r0, r4
}
   b7266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b726a:	f7fe bd31 	b.w	b5cd0 <HAL_GPIO_Write>
}
   b726e:	bd38      	pop	{r3, r4, r5, pc}

000b7270 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7270:	b510      	push	{r4, lr}
   b7272:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7274:	f7fe fd24 	bl	b5cc0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7278:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b727a:	b2db      	uxtb	r3, r3
   b727c:	2b01      	cmp	r3, #1
   b727e:	d908      	bls.n	b7292 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7280:	4620      	mov	r0, r4
   b7282:	f7ff ff8d 	bl	b71a0 <pinAvailable>
   b7286:	b120      	cbz	r0, b7292 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7288:	4620      	mov	r0, r4
}
   b728a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b728e:	f7fe bd27 	b.w	b5ce0 <HAL_GPIO_Read>
}
   b7292:	2000      	movs	r0, #0
   b7294:	bd10      	pop	{r4, pc}

000b7296 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7296:	280d      	cmp	r0, #13
{
   b7298:	b510      	push	{r4, lr}
   b729a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b729c:	bf9c      	itt	ls
   b729e:	340e      	addls	r4, #14
   b72a0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b72a2:	4620      	mov	r0, r4
   b72a4:	f7ff ff7c 	bl	b71a0 <pinAvailable>
   b72a8:	b150      	cbz	r0, b72c0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b72aa:	2103      	movs	r1, #3
   b72ac:	4620      	mov	r0, r4
   b72ae:	f7fe fcf7 	bl	b5ca0 <HAL_Validate_Pin_Function>
   b72b2:	2803      	cmp	r0, #3
   b72b4:	d104      	bne.n	b72c0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b72b6:	4620      	mov	r0, r4
}
   b72b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b72bc:	f7fe bd18 	b.w	b5cf0 <hal_adc_read>
}
   b72c0:	2000      	movs	r0, #0
   b72c2:	bd10      	pop	{r4, pc}

000b72c4 <_ZnajRKSt9nothrow_t>:
   b72c4:	f7fc bee9 	b.w	b409a <_Znaj>

000b72c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b72c8:	4901      	ldr	r1, [pc, #4]	; (b72d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b72ca:	f000 b8f9 	b.w	b74c0 <_ZNKSt9type_infoeqERKS_>
   b72ce:	bf00      	nop
   b72d0:	000b8dc0 	.word	0x000b8dc0

000b72d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b72d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b72d6:	2400      	movs	r4, #0
   b72d8:	2310      	movs	r3, #16
   b72da:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b72de:	6803      	ldr	r3, [r0, #0]
   b72e0:	4615      	mov	r5, r2
   b72e2:	699e      	ldr	r6, [r3, #24]
   b72e4:	6812      	ldr	r2, [r2, #0]
   b72e6:	466b      	mov	r3, sp
   b72e8:	e9cd 4400 	strd	r4, r4, [sp]
   b72ec:	47b0      	blx	r6
   b72ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b72f2:	f003 0306 	and.w	r3, r3, #6
   b72f6:	2b06      	cmp	r3, #6
   b72f8:	bf03      	ittte	eq
   b72fa:	9b00      	ldreq	r3, [sp, #0]
   b72fc:	602b      	streq	r3, [r5, #0]
   b72fe:	2001      	moveq	r0, #1
   b7300:	4620      	movne	r0, r4
   b7302:	b004      	add	sp, #16
   b7304:	bd70      	pop	{r4, r5, r6, pc}

000b7306 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7306:	9800      	ldr	r0, [sp, #0]
   b7308:	4290      	cmp	r0, r2
   b730a:	bf14      	ite	ne
   b730c:	2001      	movne	r0, #1
   b730e:	2006      	moveq	r0, #6
   b7310:	4770      	bx	lr
	...

000b7314 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7314:	b510      	push	{r4, lr}
   b7316:	4b03      	ldr	r3, [pc, #12]	; (b7324 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7318:	6003      	str	r3, [r0, #0]
   b731a:	4604      	mov	r4, r0
   b731c:	f000 f8cd 	bl	b74ba <_ZNSt9type_infoD1Ev>
   b7320:	4620      	mov	r0, r4
   b7322:	bd10      	pop	{r4, pc}
   b7324:	000b8e00 	.word	0x000b8e00

000b7328 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7328:	b510      	push	{r4, lr}
   b732a:	4604      	mov	r4, r0
   b732c:	f7ff fff2 	bl	b7314 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7330:	4620      	mov	r0, r4
   b7332:	2108      	movs	r1, #8
   b7334:	f7fc feb3 	bl	b409e <_ZdlPvj>
   b7338:	4620      	mov	r0, r4
   b733a:	bd10      	pop	{r4, pc}

000b733c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7340:	461f      	mov	r7, r3
   b7342:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7346:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b734a:	4598      	cmp	r8, r3
   b734c:	4606      	mov	r6, r0
   b734e:	4615      	mov	r5, r2
   b7350:	d107      	bne.n	b7362 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7352:	9907      	ldr	r1, [sp, #28]
   b7354:	f000 f8b4 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b7358:	b118      	cbz	r0, b7362 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b735a:	7165      	strb	r5, [r4, #5]
   b735c:	2000      	movs	r0, #0
   b735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7362:	4639      	mov	r1, r7
   b7364:	4630      	mov	r0, r6
   b7366:	f000 f8ab 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b736a:	2800      	cmp	r0, #0
   b736c:	d0f6      	beq.n	b735c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b736e:	2301      	movs	r3, #1
   b7370:	f8c4 8000 	str.w	r8, [r4]
   b7374:	7125      	strb	r5, [r4, #4]
   b7376:	71a3      	strb	r3, [r4, #6]
   b7378:	e7f0      	b.n	b735c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b737a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b737a:	b538      	push	{r3, r4, r5, lr}
   b737c:	4615      	mov	r5, r2
   b737e:	461c      	mov	r4, r3
   b7380:	f000 f89e 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b7384:	b120      	cbz	r0, b7390 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7386:	2308      	movs	r3, #8
   b7388:	60e3      	str	r3, [r4, #12]
   b738a:	2306      	movs	r3, #6
   b738c:	6025      	str	r5, [r4, #0]
   b738e:	7123      	strb	r3, [r4, #4]
   b7390:	bd38      	pop	{r3, r4, r5, pc}

000b7392 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7392:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7394:	4605      	mov	r5, r0
   b7396:	460c      	mov	r4, r1
   b7398:	9201      	str	r2, [sp, #4]
   b739a:	461e      	mov	r6, r3
   b739c:	f000 f890 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b73a0:	b950      	cbnz	r0, b73b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73a2:	2e03      	cmp	r6, #3
   b73a4:	d808      	bhi.n	b73b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73a6:	6823      	ldr	r3, [r4, #0]
   b73a8:	9a01      	ldr	r2, [sp, #4]
   b73aa:	695b      	ldr	r3, [r3, #20]
   b73ac:	4629      	mov	r1, r5
   b73ae:	4620      	mov	r0, r4
   b73b0:	b002      	add	sp, #8
   b73b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73b6:	4718      	bx	r3
   b73b8:	b002      	add	sp, #8
   b73ba:	bd70      	pop	{r4, r5, r6, pc}

000b73bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b73bc:	b510      	push	{r4, lr}
   b73be:	4b03      	ldr	r3, [pc, #12]	; (b73cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b73c0:	6003      	str	r3, [r0, #0]
   b73c2:	4604      	mov	r4, r0
   b73c4:	f7ff ffa6 	bl	b7314 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b73c8:	4620      	mov	r0, r4
   b73ca:	bd10      	pop	{r4, pc}
   b73cc:	000b8e60 	.word	0x000b8e60

000b73d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b73d0:	b510      	push	{r4, lr}
   b73d2:	4604      	mov	r4, r0
   b73d4:	f7ff fff2 	bl	b73bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b73d8:	4620      	mov	r0, r4
   b73da:	210c      	movs	r1, #12
   b73dc:	f7fc fe5f 	bl	b409e <_ZdlPvj>
   b73e0:	4620      	mov	r0, r4
   b73e2:	bd10      	pop	{r4, pc}

000b73e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b73e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b73e6:	9f08      	ldr	r7, [sp, #32]
   b73e8:	4297      	cmp	r7, r2
   b73ea:	4605      	mov	r5, r0
   b73ec:	460e      	mov	r6, r1
   b73ee:	4614      	mov	r4, r2
   b73f0:	d00a      	beq.n	b7408 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b73f2:	68a8      	ldr	r0, [r5, #8]
   b73f4:	6802      	ldr	r2, [r0, #0]
   b73f6:	9708      	str	r7, [sp, #32]
   b73f8:	6a15      	ldr	r5, [r2, #32]
   b73fa:	4631      	mov	r1, r6
   b73fc:	4622      	mov	r2, r4
   b73fe:	46ac      	mov	ip, r5
   b7400:	b003      	add	sp, #12
   b7402:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7406:	4760      	bx	ip
   b7408:	4619      	mov	r1, r3
   b740a:	9301      	str	r3, [sp, #4]
   b740c:	f000 f858 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b7410:	9b01      	ldr	r3, [sp, #4]
   b7412:	2800      	cmp	r0, #0
   b7414:	d0ed      	beq.n	b73f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7416:	2006      	movs	r0, #6
   b7418:	b003      	add	sp, #12
   b741a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b741c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b741c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7420:	460d      	mov	r5, r1
   b7422:	4619      	mov	r1, r3
   b7424:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7428:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b742c:	4681      	mov	r9, r0
   b742e:	4617      	mov	r7, r2
   b7430:	4698      	mov	r8, r3
   b7432:	f000 f845 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b7436:	b190      	cbz	r0, b745e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7438:	2d00      	cmp	r5, #0
   b743a:	6034      	str	r4, [r6, #0]
   b743c:	7137      	strb	r7, [r6, #4]
   b743e:	db09      	blt.n	b7454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7440:	1961      	adds	r1, r4, r5
   b7442:	458a      	cmp	sl, r1
   b7444:	bf0c      	ite	eq
   b7446:	2106      	moveq	r1, #6
   b7448:	2101      	movne	r1, #1
   b744a:	71b1      	strb	r1, [r6, #6]
   b744c:	2000      	movs	r0, #0
   b744e:	b001      	add	sp, #4
   b7450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7454:	3502      	adds	r5, #2
   b7456:	d1f9      	bne.n	b744c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7458:	2301      	movs	r3, #1
   b745a:	71b3      	strb	r3, [r6, #6]
   b745c:	e7f6      	b.n	b744c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b745e:	4554      	cmp	r4, sl
   b7460:	d106      	bne.n	b7470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7462:	4659      	mov	r1, fp
   b7464:	4648      	mov	r0, r9
   b7466:	f000 f82b 	bl	b74c0 <_ZNKSt9type_infoeqERKS_>
   b746a:	b108      	cbz	r0, b7470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b746c:	7177      	strb	r7, [r6, #5]
   b746e:	e7ed      	b.n	b744c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7470:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7474:	6803      	ldr	r3, [r0, #0]
   b7476:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b747a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b747e:	69dc      	ldr	r4, [r3, #28]
   b7480:	463a      	mov	r2, r7
   b7482:	4643      	mov	r3, r8
   b7484:	4629      	mov	r1, r5
   b7486:	46a4      	mov	ip, r4
   b7488:	b001      	add	sp, #4
   b748a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b748e:	4760      	bx	ip

000b7490 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7494:	4607      	mov	r7, r0
   b7496:	460c      	mov	r4, r1
   b7498:	4615      	mov	r5, r2
   b749a:	461e      	mov	r6, r3
   b749c:	f7ff ff6d 	bl	b737a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b74a0:	b948      	cbnz	r0, b74b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b74a2:	68b8      	ldr	r0, [r7, #8]
   b74a4:	6803      	ldr	r3, [r0, #0]
   b74a6:	699f      	ldr	r7, [r3, #24]
   b74a8:	462a      	mov	r2, r5
   b74aa:	4633      	mov	r3, r6
   b74ac:	4621      	mov	r1, r4
   b74ae:	46bc      	mov	ip, r7
   b74b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b74b4:	4760      	bx	ip
   b74b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b74ba <_ZNSt9type_infoD1Ev>:
   b74ba:	4770      	bx	lr

000b74bc <_ZNKSt9type_info14__is_pointer_pEv>:
   b74bc:	2000      	movs	r0, #0
   b74be:	4770      	bx	lr

000b74c0 <_ZNKSt9type_infoeqERKS_>:
   b74c0:	4281      	cmp	r1, r0
   b74c2:	b508      	push	{r3, lr}
   b74c4:	d00e      	beq.n	b74e4 <_ZNKSt9type_infoeqERKS_+0x24>
   b74c6:	6840      	ldr	r0, [r0, #4]
   b74c8:	7803      	ldrb	r3, [r0, #0]
   b74ca:	2b2a      	cmp	r3, #42	; 0x2a
   b74cc:	d00c      	beq.n	b74e8 <_ZNKSt9type_infoeqERKS_+0x28>
   b74ce:	6849      	ldr	r1, [r1, #4]
   b74d0:	780b      	ldrb	r3, [r1, #0]
   b74d2:	2b2a      	cmp	r3, #42	; 0x2a
   b74d4:	bf08      	it	eq
   b74d6:	3101      	addeq	r1, #1
   b74d8:	f000 fd06 	bl	b7ee8 <strcmp>
   b74dc:	fab0 f080 	clz	r0, r0
   b74e0:	0940      	lsrs	r0, r0, #5
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	2001      	movs	r0, #1
   b74e6:	e7fc      	b.n	b74e2 <_ZNKSt9type_infoeqERKS_+0x22>
   b74e8:	2000      	movs	r0, #0
   b74ea:	e7fa      	b.n	b74e2 <_ZNKSt9type_infoeqERKS_+0x22>

000b74ec <__aeabi_drsub>:
   b74ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b74f0:	e002      	b.n	b74f8 <__adddf3>
   b74f2:	bf00      	nop

000b74f4 <__aeabi_dsub>:
   b74f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b74f8 <__adddf3>:
   b74f8:	b530      	push	{r4, r5, lr}
   b74fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b74fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7502:	ea94 0f05 	teq	r4, r5
   b7506:	bf08      	it	eq
   b7508:	ea90 0f02 	teqeq	r0, r2
   b750c:	bf1f      	itttt	ne
   b750e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7512:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b751a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b751e:	f000 80e2 	beq.w	b76e6 <__adddf3+0x1ee>
   b7522:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b752a:	bfb8      	it	lt
   b752c:	426d      	neglt	r5, r5
   b752e:	dd0c      	ble.n	b754a <__adddf3+0x52>
   b7530:	442c      	add	r4, r5
   b7532:	ea80 0202 	eor.w	r2, r0, r2
   b7536:	ea81 0303 	eor.w	r3, r1, r3
   b753a:	ea82 0000 	eor.w	r0, r2, r0
   b753e:	ea83 0101 	eor.w	r1, r3, r1
   b7542:	ea80 0202 	eor.w	r2, r0, r2
   b7546:	ea81 0303 	eor.w	r3, r1, r3
   b754a:	2d36      	cmp	r5, #54	; 0x36
   b754c:	bf88      	it	hi
   b754e:	bd30      	pophi	{r4, r5, pc}
   b7550:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7554:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7558:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b755c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7560:	d002      	beq.n	b7568 <__adddf3+0x70>
   b7562:	4240      	negs	r0, r0
   b7564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7568:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b756c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7574:	d002      	beq.n	b757c <__adddf3+0x84>
   b7576:	4252      	negs	r2, r2
   b7578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b757c:	ea94 0f05 	teq	r4, r5
   b7580:	f000 80a7 	beq.w	b76d2 <__adddf3+0x1da>
   b7584:	f1a4 0401 	sub.w	r4, r4, #1
   b7588:	f1d5 0e20 	rsbs	lr, r5, #32
   b758c:	db0d      	blt.n	b75aa <__adddf3+0xb2>
   b758e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7592:	fa22 f205 	lsr.w	r2, r2, r5
   b7596:	1880      	adds	r0, r0, r2
   b7598:	f141 0100 	adc.w	r1, r1, #0
   b759c:	fa03 f20e 	lsl.w	r2, r3, lr
   b75a0:	1880      	adds	r0, r0, r2
   b75a2:	fa43 f305 	asr.w	r3, r3, r5
   b75a6:	4159      	adcs	r1, r3
   b75a8:	e00e      	b.n	b75c8 <__adddf3+0xd0>
   b75aa:	f1a5 0520 	sub.w	r5, r5, #32
   b75ae:	f10e 0e20 	add.w	lr, lr, #32
   b75b2:	2a01      	cmp	r2, #1
   b75b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b75b8:	bf28      	it	cs
   b75ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b75be:	fa43 f305 	asr.w	r3, r3, r5
   b75c2:	18c0      	adds	r0, r0, r3
   b75c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b75c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b75cc:	d507      	bpl.n	b75de <__adddf3+0xe6>
   b75ce:	f04f 0e00 	mov.w	lr, #0
   b75d2:	f1dc 0c00 	rsbs	ip, ip, #0
   b75d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b75da:	eb6e 0101 	sbc.w	r1, lr, r1
   b75de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b75e2:	d31b      	bcc.n	b761c <__adddf3+0x124>
   b75e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b75e8:	d30c      	bcc.n	b7604 <__adddf3+0x10c>
   b75ea:	0849      	lsrs	r1, r1, #1
   b75ec:	ea5f 0030 	movs.w	r0, r0, rrx
   b75f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b75f4:	f104 0401 	add.w	r4, r4, #1
   b75f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b75fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7600:	f080 809a 	bcs.w	b7738 <__adddf3+0x240>
   b7604:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7608:	bf08      	it	eq
   b760a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b760e:	f150 0000 	adcs.w	r0, r0, #0
   b7612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7616:	ea41 0105 	orr.w	r1, r1, r5
   b761a:	bd30      	pop	{r4, r5, pc}
   b761c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7620:	4140      	adcs	r0, r0
   b7622:	eb41 0101 	adc.w	r1, r1, r1
   b7626:	3c01      	subs	r4, #1
   b7628:	bf28      	it	cs
   b762a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b762e:	d2e9      	bcs.n	b7604 <__adddf3+0x10c>
   b7630:	f091 0f00 	teq	r1, #0
   b7634:	bf04      	itt	eq
   b7636:	4601      	moveq	r1, r0
   b7638:	2000      	moveq	r0, #0
   b763a:	fab1 f381 	clz	r3, r1
   b763e:	bf08      	it	eq
   b7640:	3320      	addeq	r3, #32
   b7642:	f1a3 030b 	sub.w	r3, r3, #11
   b7646:	f1b3 0220 	subs.w	r2, r3, #32
   b764a:	da0c      	bge.n	b7666 <__adddf3+0x16e>
   b764c:	320c      	adds	r2, #12
   b764e:	dd08      	ble.n	b7662 <__adddf3+0x16a>
   b7650:	f102 0c14 	add.w	ip, r2, #20
   b7654:	f1c2 020c 	rsb	r2, r2, #12
   b7658:	fa01 f00c 	lsl.w	r0, r1, ip
   b765c:	fa21 f102 	lsr.w	r1, r1, r2
   b7660:	e00c      	b.n	b767c <__adddf3+0x184>
   b7662:	f102 0214 	add.w	r2, r2, #20
   b7666:	bfd8      	it	le
   b7668:	f1c2 0c20 	rsble	ip, r2, #32
   b766c:	fa01 f102 	lsl.w	r1, r1, r2
   b7670:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7674:	bfdc      	itt	le
   b7676:	ea41 010c 	orrle.w	r1, r1, ip
   b767a:	4090      	lslle	r0, r2
   b767c:	1ae4      	subs	r4, r4, r3
   b767e:	bfa2      	ittt	ge
   b7680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7684:	4329      	orrge	r1, r5
   b7686:	bd30      	popge	{r4, r5, pc}
   b7688:	ea6f 0404 	mvn.w	r4, r4
   b768c:	3c1f      	subs	r4, #31
   b768e:	da1c      	bge.n	b76ca <__adddf3+0x1d2>
   b7690:	340c      	adds	r4, #12
   b7692:	dc0e      	bgt.n	b76b2 <__adddf3+0x1ba>
   b7694:	f104 0414 	add.w	r4, r4, #20
   b7698:	f1c4 0220 	rsb	r2, r4, #32
   b769c:	fa20 f004 	lsr.w	r0, r0, r4
   b76a0:	fa01 f302 	lsl.w	r3, r1, r2
   b76a4:	ea40 0003 	orr.w	r0, r0, r3
   b76a8:	fa21 f304 	lsr.w	r3, r1, r4
   b76ac:	ea45 0103 	orr.w	r1, r5, r3
   b76b0:	bd30      	pop	{r4, r5, pc}
   b76b2:	f1c4 040c 	rsb	r4, r4, #12
   b76b6:	f1c4 0220 	rsb	r2, r4, #32
   b76ba:	fa20 f002 	lsr.w	r0, r0, r2
   b76be:	fa01 f304 	lsl.w	r3, r1, r4
   b76c2:	ea40 0003 	orr.w	r0, r0, r3
   b76c6:	4629      	mov	r1, r5
   b76c8:	bd30      	pop	{r4, r5, pc}
   b76ca:	fa21 f004 	lsr.w	r0, r1, r4
   b76ce:	4629      	mov	r1, r5
   b76d0:	bd30      	pop	{r4, r5, pc}
   b76d2:	f094 0f00 	teq	r4, #0
   b76d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b76da:	bf06      	itte	eq
   b76dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b76e0:	3401      	addeq	r4, #1
   b76e2:	3d01      	subne	r5, #1
   b76e4:	e74e      	b.n	b7584 <__adddf3+0x8c>
   b76e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b76ea:	bf18      	it	ne
   b76ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b76f0:	d029      	beq.n	b7746 <__adddf3+0x24e>
   b76f2:	ea94 0f05 	teq	r4, r5
   b76f6:	bf08      	it	eq
   b76f8:	ea90 0f02 	teqeq	r0, r2
   b76fc:	d005      	beq.n	b770a <__adddf3+0x212>
   b76fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b7702:	bf04      	itt	eq
   b7704:	4619      	moveq	r1, r3
   b7706:	4610      	moveq	r0, r2
   b7708:	bd30      	pop	{r4, r5, pc}
   b770a:	ea91 0f03 	teq	r1, r3
   b770e:	bf1e      	ittt	ne
   b7710:	2100      	movne	r1, #0
   b7712:	2000      	movne	r0, #0
   b7714:	bd30      	popne	{r4, r5, pc}
   b7716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b771a:	d105      	bne.n	b7728 <__adddf3+0x230>
   b771c:	0040      	lsls	r0, r0, #1
   b771e:	4149      	adcs	r1, r1
   b7720:	bf28      	it	cs
   b7722:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7726:	bd30      	pop	{r4, r5, pc}
   b7728:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b772c:	bf3c      	itt	cc
   b772e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7732:	bd30      	popcc	{r4, r5, pc}
   b7734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7738:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b773c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7740:	f04f 0000 	mov.w	r0, #0
   b7744:	bd30      	pop	{r4, r5, pc}
   b7746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b774a:	bf1a      	itte	ne
   b774c:	4619      	movne	r1, r3
   b774e:	4610      	movne	r0, r2
   b7750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7754:	bf1c      	itt	ne
   b7756:	460b      	movne	r3, r1
   b7758:	4602      	movne	r2, r0
   b775a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b775e:	bf06      	itte	eq
   b7760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7764:	ea91 0f03 	teqeq	r1, r3
   b7768:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b776c:	bd30      	pop	{r4, r5, pc}
   b776e:	bf00      	nop

000b7770 <__aeabi_ui2d>:
   b7770:	f090 0f00 	teq	r0, #0
   b7774:	bf04      	itt	eq
   b7776:	2100      	moveq	r1, #0
   b7778:	4770      	bxeq	lr
   b777a:	b530      	push	{r4, r5, lr}
   b777c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7780:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7784:	f04f 0500 	mov.w	r5, #0
   b7788:	f04f 0100 	mov.w	r1, #0
   b778c:	e750      	b.n	b7630 <__adddf3+0x138>
   b778e:	bf00      	nop

000b7790 <__aeabi_i2d>:
   b7790:	f090 0f00 	teq	r0, #0
   b7794:	bf04      	itt	eq
   b7796:	2100      	moveq	r1, #0
   b7798:	4770      	bxeq	lr
   b779a:	b530      	push	{r4, r5, lr}
   b779c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b77a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b77a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b77a8:	bf48      	it	mi
   b77aa:	4240      	negmi	r0, r0
   b77ac:	f04f 0100 	mov.w	r1, #0
   b77b0:	e73e      	b.n	b7630 <__adddf3+0x138>
   b77b2:	bf00      	nop

000b77b4 <__aeabi_f2d>:
   b77b4:	0042      	lsls	r2, r0, #1
   b77b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b77ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b77be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b77c2:	bf1f      	itttt	ne
   b77c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b77c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b77cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b77d0:	4770      	bxne	lr
   b77d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b77d6:	bf08      	it	eq
   b77d8:	4770      	bxeq	lr
   b77da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b77de:	bf04      	itt	eq
   b77e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b77e4:	4770      	bxeq	lr
   b77e6:	b530      	push	{r4, r5, lr}
   b77e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b77ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b77f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b77f4:	e71c      	b.n	b7630 <__adddf3+0x138>
   b77f6:	bf00      	nop

000b77f8 <__aeabi_ul2d>:
   b77f8:	ea50 0201 	orrs.w	r2, r0, r1
   b77fc:	bf08      	it	eq
   b77fe:	4770      	bxeq	lr
   b7800:	b530      	push	{r4, r5, lr}
   b7802:	f04f 0500 	mov.w	r5, #0
   b7806:	e00a      	b.n	b781e <__aeabi_l2d+0x16>

000b7808 <__aeabi_l2d>:
   b7808:	ea50 0201 	orrs.w	r2, r0, r1
   b780c:	bf08      	it	eq
   b780e:	4770      	bxeq	lr
   b7810:	b530      	push	{r4, r5, lr}
   b7812:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7816:	d502      	bpl.n	b781e <__aeabi_l2d+0x16>
   b7818:	4240      	negs	r0, r0
   b781a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b781e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7822:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b782a:	f43f aed8 	beq.w	b75de <__adddf3+0xe6>
   b782e:	f04f 0203 	mov.w	r2, #3
   b7832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7836:	bf18      	it	ne
   b7838:	3203      	addne	r2, #3
   b783a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b783e:	bf18      	it	ne
   b7840:	3203      	addne	r2, #3
   b7842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7846:	f1c2 0320 	rsb	r3, r2, #32
   b784a:	fa00 fc03 	lsl.w	ip, r0, r3
   b784e:	fa20 f002 	lsr.w	r0, r0, r2
   b7852:	fa01 fe03 	lsl.w	lr, r1, r3
   b7856:	ea40 000e 	orr.w	r0, r0, lr
   b785a:	fa21 f102 	lsr.w	r1, r1, r2
   b785e:	4414      	add	r4, r2
   b7860:	e6bd      	b.n	b75de <__adddf3+0xe6>
   b7862:	bf00      	nop

000b7864 <__aeabi_dmul>:
   b7864:	b570      	push	{r4, r5, r6, lr}
   b7866:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b786a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b786e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7872:	bf1d      	ittte	ne
   b7874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7878:	ea94 0f0c 	teqne	r4, ip
   b787c:	ea95 0f0c 	teqne	r5, ip
   b7880:	f000 f8de 	bleq	b7a40 <__aeabi_dmul+0x1dc>
   b7884:	442c      	add	r4, r5
   b7886:	ea81 0603 	eor.w	r6, r1, r3
   b788a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b788e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7892:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7896:	bf18      	it	ne
   b7898:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b789c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b78a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b78a4:	d038      	beq.n	b7918 <__aeabi_dmul+0xb4>
   b78a6:	fba0 ce02 	umull	ip, lr, r0, r2
   b78aa:	f04f 0500 	mov.w	r5, #0
   b78ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b78b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b78b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b78ba:	f04f 0600 	mov.w	r6, #0
   b78be:	fbe1 5603 	umlal	r5, r6, r1, r3
   b78c2:	f09c 0f00 	teq	ip, #0
   b78c6:	bf18      	it	ne
   b78c8:	f04e 0e01 	orrne.w	lr, lr, #1
   b78cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b78d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b78d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b78d8:	d204      	bcs.n	b78e4 <__aeabi_dmul+0x80>
   b78da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b78de:	416d      	adcs	r5, r5
   b78e0:	eb46 0606 	adc.w	r6, r6, r6
   b78e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b78e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b78ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b78f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b78f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b78f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b78fc:	bf88      	it	hi
   b78fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7902:	d81e      	bhi.n	b7942 <__aeabi_dmul+0xde>
   b7904:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7908:	bf08      	it	eq
   b790a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b790e:	f150 0000 	adcs.w	r0, r0, #0
   b7912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7916:	bd70      	pop	{r4, r5, r6, pc}
   b7918:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b791c:	ea46 0101 	orr.w	r1, r6, r1
   b7920:	ea40 0002 	orr.w	r0, r0, r2
   b7924:	ea81 0103 	eor.w	r1, r1, r3
   b7928:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b792c:	bfc2      	ittt	gt
   b792e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7936:	bd70      	popgt	{r4, r5, r6, pc}
   b7938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b793c:	f04f 0e00 	mov.w	lr, #0
   b7940:	3c01      	subs	r4, #1
   b7942:	f300 80ab 	bgt.w	b7a9c <__aeabi_dmul+0x238>
   b7946:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b794a:	bfde      	ittt	le
   b794c:	2000      	movle	r0, #0
   b794e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7952:	bd70      	pople	{r4, r5, r6, pc}
   b7954:	f1c4 0400 	rsb	r4, r4, #0
   b7958:	3c20      	subs	r4, #32
   b795a:	da35      	bge.n	b79c8 <__aeabi_dmul+0x164>
   b795c:	340c      	adds	r4, #12
   b795e:	dc1b      	bgt.n	b7998 <__aeabi_dmul+0x134>
   b7960:	f104 0414 	add.w	r4, r4, #20
   b7964:	f1c4 0520 	rsb	r5, r4, #32
   b7968:	fa00 f305 	lsl.w	r3, r0, r5
   b796c:	fa20 f004 	lsr.w	r0, r0, r4
   b7970:	fa01 f205 	lsl.w	r2, r1, r5
   b7974:	ea40 0002 	orr.w	r0, r0, r2
   b7978:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b797c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7984:	fa21 f604 	lsr.w	r6, r1, r4
   b7988:	eb42 0106 	adc.w	r1, r2, r6
   b798c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7990:	bf08      	it	eq
   b7992:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7996:	bd70      	pop	{r4, r5, r6, pc}
   b7998:	f1c4 040c 	rsb	r4, r4, #12
   b799c:	f1c4 0520 	rsb	r5, r4, #32
   b79a0:	fa00 f304 	lsl.w	r3, r0, r4
   b79a4:	fa20 f005 	lsr.w	r0, r0, r5
   b79a8:	fa01 f204 	lsl.w	r2, r1, r4
   b79ac:	ea40 0002 	orr.w	r0, r0, r2
   b79b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b79b8:	f141 0100 	adc.w	r1, r1, #0
   b79bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b79c0:	bf08      	it	eq
   b79c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b79c6:	bd70      	pop	{r4, r5, r6, pc}
   b79c8:	f1c4 0520 	rsb	r5, r4, #32
   b79cc:	fa00 f205 	lsl.w	r2, r0, r5
   b79d0:	ea4e 0e02 	orr.w	lr, lr, r2
   b79d4:	fa20 f304 	lsr.w	r3, r0, r4
   b79d8:	fa01 f205 	lsl.w	r2, r1, r5
   b79dc:	ea43 0302 	orr.w	r3, r3, r2
   b79e0:	fa21 f004 	lsr.w	r0, r1, r4
   b79e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b79e8:	fa21 f204 	lsr.w	r2, r1, r4
   b79ec:	ea20 0002 	bic.w	r0, r0, r2
   b79f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b79f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b79f8:	bf08      	it	eq
   b79fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b79fe:	bd70      	pop	{r4, r5, r6, pc}
   b7a00:	f094 0f00 	teq	r4, #0
   b7a04:	d10f      	bne.n	b7a26 <__aeabi_dmul+0x1c2>
   b7a06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7a0a:	0040      	lsls	r0, r0, #1
   b7a0c:	eb41 0101 	adc.w	r1, r1, r1
   b7a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7a14:	bf08      	it	eq
   b7a16:	3c01      	subeq	r4, #1
   b7a18:	d0f7      	beq.n	b7a0a <__aeabi_dmul+0x1a6>
   b7a1a:	ea41 0106 	orr.w	r1, r1, r6
   b7a1e:	f095 0f00 	teq	r5, #0
   b7a22:	bf18      	it	ne
   b7a24:	4770      	bxne	lr
   b7a26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7a2a:	0052      	lsls	r2, r2, #1
   b7a2c:	eb43 0303 	adc.w	r3, r3, r3
   b7a30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7a34:	bf08      	it	eq
   b7a36:	3d01      	subeq	r5, #1
   b7a38:	d0f7      	beq.n	b7a2a <__aeabi_dmul+0x1c6>
   b7a3a:	ea43 0306 	orr.w	r3, r3, r6
   b7a3e:	4770      	bx	lr
   b7a40:	ea94 0f0c 	teq	r4, ip
   b7a44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7a48:	bf18      	it	ne
   b7a4a:	ea95 0f0c 	teqne	r5, ip
   b7a4e:	d00c      	beq.n	b7a6a <__aeabi_dmul+0x206>
   b7a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7a54:	bf18      	it	ne
   b7a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7a5a:	d1d1      	bne.n	b7a00 <__aeabi_dmul+0x19c>
   b7a5c:	ea81 0103 	eor.w	r1, r1, r3
   b7a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7a64:	f04f 0000 	mov.w	r0, #0
   b7a68:	bd70      	pop	{r4, r5, r6, pc}
   b7a6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7a6e:	bf06      	itte	eq
   b7a70:	4610      	moveq	r0, r2
   b7a72:	4619      	moveq	r1, r3
   b7a74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7a78:	d019      	beq.n	b7aae <__aeabi_dmul+0x24a>
   b7a7a:	ea94 0f0c 	teq	r4, ip
   b7a7e:	d102      	bne.n	b7a86 <__aeabi_dmul+0x222>
   b7a80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7a84:	d113      	bne.n	b7aae <__aeabi_dmul+0x24a>
   b7a86:	ea95 0f0c 	teq	r5, ip
   b7a8a:	d105      	bne.n	b7a98 <__aeabi_dmul+0x234>
   b7a8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7a90:	bf1c      	itt	ne
   b7a92:	4610      	movne	r0, r2
   b7a94:	4619      	movne	r1, r3
   b7a96:	d10a      	bne.n	b7aae <__aeabi_dmul+0x24a>
   b7a98:	ea81 0103 	eor.w	r1, r1, r3
   b7a9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7aa0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7aa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7aa8:	f04f 0000 	mov.w	r0, #0
   b7aac:	bd70      	pop	{r4, r5, r6, pc}
   b7aae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7ab2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7ab6:	bd70      	pop	{r4, r5, r6, pc}

000b7ab8 <__aeabi_ddiv>:
   b7ab8:	b570      	push	{r4, r5, r6, lr}
   b7aba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7abe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7ac2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7ac6:	bf1d      	ittte	ne
   b7ac8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7acc:	ea94 0f0c 	teqne	r4, ip
   b7ad0:	ea95 0f0c 	teqne	r5, ip
   b7ad4:	f000 f8a7 	bleq	b7c26 <__aeabi_ddiv+0x16e>
   b7ad8:	eba4 0405 	sub.w	r4, r4, r5
   b7adc:	ea81 0e03 	eor.w	lr, r1, r3
   b7ae0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7ae4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7ae8:	f000 8088 	beq.w	b7bfc <__aeabi_ddiv+0x144>
   b7aec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7af0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7af4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7af8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7afc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7b00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7b04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7b08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7b0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7b10:	429d      	cmp	r5, r3
   b7b12:	bf08      	it	eq
   b7b14:	4296      	cmpeq	r6, r2
   b7b16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7b1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7b1e:	d202      	bcs.n	b7b26 <__aeabi_ddiv+0x6e>
   b7b20:	085b      	lsrs	r3, r3, #1
   b7b22:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b26:	1ab6      	subs	r6, r6, r2
   b7b28:	eb65 0503 	sbc.w	r5, r5, r3
   b7b2c:	085b      	lsrs	r3, r3, #1
   b7b2e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7b36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7b3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7b42:	bf22      	ittt	cs
   b7b44:	1ab6      	subcs	r6, r6, r2
   b7b46:	4675      	movcs	r5, lr
   b7b48:	ea40 000c 	orrcs.w	r0, r0, ip
   b7b4c:	085b      	lsrs	r3, r3, #1
   b7b4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b52:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7b5a:	bf22      	ittt	cs
   b7b5c:	1ab6      	subcs	r6, r6, r2
   b7b5e:	4675      	movcs	r5, lr
   b7b60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7b64:	085b      	lsrs	r3, r3, #1
   b7b66:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7b72:	bf22      	ittt	cs
   b7b74:	1ab6      	subcs	r6, r6, r2
   b7b76:	4675      	movcs	r5, lr
   b7b78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7b7c:	085b      	lsrs	r3, r3, #1
   b7b7e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7b82:	ebb6 0e02 	subs.w	lr, r6, r2
   b7b86:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7b8a:	bf22      	ittt	cs
   b7b8c:	1ab6      	subcs	r6, r6, r2
   b7b8e:	4675      	movcs	r5, lr
   b7b90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7b94:	ea55 0e06 	orrs.w	lr, r5, r6
   b7b98:	d018      	beq.n	b7bcc <__aeabi_ddiv+0x114>
   b7b9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7b9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7ba2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7ba6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7baa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7bae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7bb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7bb6:	d1c0      	bne.n	b7b3a <__aeabi_ddiv+0x82>
   b7bb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7bbc:	d10b      	bne.n	b7bd6 <__aeabi_ddiv+0x11e>
   b7bbe:	ea41 0100 	orr.w	r1, r1, r0
   b7bc2:	f04f 0000 	mov.w	r0, #0
   b7bc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7bca:	e7b6      	b.n	b7b3a <__aeabi_ddiv+0x82>
   b7bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7bd0:	bf04      	itt	eq
   b7bd2:	4301      	orreq	r1, r0
   b7bd4:	2000      	moveq	r0, #0
   b7bd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7bda:	bf88      	it	hi
   b7bdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7be0:	f63f aeaf 	bhi.w	b7942 <__aeabi_dmul+0xde>
   b7be4:	ebb5 0c03 	subs.w	ip, r5, r3
   b7be8:	bf04      	itt	eq
   b7bea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7bee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7bf2:	f150 0000 	adcs.w	r0, r0, #0
   b7bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7bfa:	bd70      	pop	{r4, r5, r6, pc}
   b7bfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7c00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7c04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7c08:	bfc2      	ittt	gt
   b7c0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7c0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7c12:	bd70      	popgt	{r4, r5, r6, pc}
   b7c14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7c18:	f04f 0e00 	mov.w	lr, #0
   b7c1c:	3c01      	subs	r4, #1
   b7c1e:	e690      	b.n	b7942 <__aeabi_dmul+0xde>
   b7c20:	ea45 0e06 	orr.w	lr, r5, r6
   b7c24:	e68d      	b.n	b7942 <__aeabi_dmul+0xde>
   b7c26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7c2a:	ea94 0f0c 	teq	r4, ip
   b7c2e:	bf08      	it	eq
   b7c30:	ea95 0f0c 	teqeq	r5, ip
   b7c34:	f43f af3b 	beq.w	b7aae <__aeabi_dmul+0x24a>
   b7c38:	ea94 0f0c 	teq	r4, ip
   b7c3c:	d10a      	bne.n	b7c54 <__aeabi_ddiv+0x19c>
   b7c3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7c42:	f47f af34 	bne.w	b7aae <__aeabi_dmul+0x24a>
   b7c46:	ea95 0f0c 	teq	r5, ip
   b7c4a:	f47f af25 	bne.w	b7a98 <__aeabi_dmul+0x234>
   b7c4e:	4610      	mov	r0, r2
   b7c50:	4619      	mov	r1, r3
   b7c52:	e72c      	b.n	b7aae <__aeabi_dmul+0x24a>
   b7c54:	ea95 0f0c 	teq	r5, ip
   b7c58:	d106      	bne.n	b7c68 <__aeabi_ddiv+0x1b0>
   b7c5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7c5e:	f43f aefd 	beq.w	b7a5c <__aeabi_dmul+0x1f8>
   b7c62:	4610      	mov	r0, r2
   b7c64:	4619      	mov	r1, r3
   b7c66:	e722      	b.n	b7aae <__aeabi_dmul+0x24a>
   b7c68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7c6c:	bf18      	it	ne
   b7c6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7c72:	f47f aec5 	bne.w	b7a00 <__aeabi_dmul+0x19c>
   b7c76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7c7a:	f47f af0d 	bne.w	b7a98 <__aeabi_dmul+0x234>
   b7c7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7c82:	f47f aeeb 	bne.w	b7a5c <__aeabi_dmul+0x1f8>
   b7c86:	e712      	b.n	b7aae <__aeabi_dmul+0x24a>

000b7c88 <__gedf2>:
   b7c88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7c8c:	e006      	b.n	b7c9c <__cmpdf2+0x4>
   b7c8e:	bf00      	nop

000b7c90 <__ledf2>:
   b7c90:	f04f 0c01 	mov.w	ip, #1
   b7c94:	e002      	b.n	b7c9c <__cmpdf2+0x4>
   b7c96:	bf00      	nop

000b7c98 <__cmpdf2>:
   b7c98:	f04f 0c01 	mov.w	ip, #1
   b7c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7ca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7ca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7ca8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7cac:	bf18      	it	ne
   b7cae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7cb2:	d01b      	beq.n	b7cec <__cmpdf2+0x54>
   b7cb4:	b001      	add	sp, #4
   b7cb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7cba:	bf0c      	ite	eq
   b7cbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7cc0:	ea91 0f03 	teqne	r1, r3
   b7cc4:	bf02      	ittt	eq
   b7cc6:	ea90 0f02 	teqeq	r0, r2
   b7cca:	2000      	moveq	r0, #0
   b7ccc:	4770      	bxeq	lr
   b7cce:	f110 0f00 	cmn.w	r0, #0
   b7cd2:	ea91 0f03 	teq	r1, r3
   b7cd6:	bf58      	it	pl
   b7cd8:	4299      	cmppl	r1, r3
   b7cda:	bf08      	it	eq
   b7cdc:	4290      	cmpeq	r0, r2
   b7cde:	bf2c      	ite	cs
   b7ce0:	17d8      	asrcs	r0, r3, #31
   b7ce2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7ce6:	f040 0001 	orr.w	r0, r0, #1
   b7cea:	4770      	bx	lr
   b7cec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7cf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7cf4:	d102      	bne.n	b7cfc <__cmpdf2+0x64>
   b7cf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7cfa:	d107      	bne.n	b7d0c <__cmpdf2+0x74>
   b7cfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7d04:	d1d6      	bne.n	b7cb4 <__cmpdf2+0x1c>
   b7d06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7d0a:	d0d3      	beq.n	b7cb4 <__cmpdf2+0x1c>
   b7d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7d10:	4770      	bx	lr
   b7d12:	bf00      	nop

000b7d14 <__aeabi_cdrcmple>:
   b7d14:	4684      	mov	ip, r0
   b7d16:	4610      	mov	r0, r2
   b7d18:	4662      	mov	r2, ip
   b7d1a:	468c      	mov	ip, r1
   b7d1c:	4619      	mov	r1, r3
   b7d1e:	4663      	mov	r3, ip
   b7d20:	e000      	b.n	b7d24 <__aeabi_cdcmpeq>
   b7d22:	bf00      	nop

000b7d24 <__aeabi_cdcmpeq>:
   b7d24:	b501      	push	{r0, lr}
   b7d26:	f7ff ffb7 	bl	b7c98 <__cmpdf2>
   b7d2a:	2800      	cmp	r0, #0
   b7d2c:	bf48      	it	mi
   b7d2e:	f110 0f00 	cmnmi.w	r0, #0
   b7d32:	bd01      	pop	{r0, pc}

000b7d34 <__aeabi_dcmpeq>:
   b7d34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d38:	f7ff fff4 	bl	b7d24 <__aeabi_cdcmpeq>
   b7d3c:	bf0c      	ite	eq
   b7d3e:	2001      	moveq	r0, #1
   b7d40:	2000      	movne	r0, #0
   b7d42:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d46:	bf00      	nop

000b7d48 <__aeabi_dcmplt>:
   b7d48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d4c:	f7ff ffea 	bl	b7d24 <__aeabi_cdcmpeq>
   b7d50:	bf34      	ite	cc
   b7d52:	2001      	movcc	r0, #1
   b7d54:	2000      	movcs	r0, #0
   b7d56:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d5a:	bf00      	nop

000b7d5c <__aeabi_dcmple>:
   b7d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d60:	f7ff ffe0 	bl	b7d24 <__aeabi_cdcmpeq>
   b7d64:	bf94      	ite	ls
   b7d66:	2001      	movls	r0, #1
   b7d68:	2000      	movhi	r0, #0
   b7d6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d6e:	bf00      	nop

000b7d70 <__aeabi_dcmpge>:
   b7d70:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d74:	f7ff ffce 	bl	b7d14 <__aeabi_cdrcmple>
   b7d78:	bf94      	ite	ls
   b7d7a:	2001      	movls	r0, #1
   b7d7c:	2000      	movhi	r0, #0
   b7d7e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d82:	bf00      	nop

000b7d84 <__aeabi_dcmpgt>:
   b7d84:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7d88:	f7ff ffc4 	bl	b7d14 <__aeabi_cdrcmple>
   b7d8c:	bf34      	ite	cc
   b7d8e:	2001      	movcc	r0, #1
   b7d90:	2000      	movcs	r0, #0
   b7d92:	f85d fb08 	ldr.w	pc, [sp], #8
   b7d96:	bf00      	nop

000b7d98 <__aeabi_dcmpun>:
   b7d98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7d9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7da0:	d102      	bne.n	b7da8 <__aeabi_dcmpun+0x10>
   b7da2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7da6:	d10a      	bne.n	b7dbe <__aeabi_dcmpun+0x26>
   b7da8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7db0:	d102      	bne.n	b7db8 <__aeabi_dcmpun+0x20>
   b7db2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7db6:	d102      	bne.n	b7dbe <__aeabi_dcmpun+0x26>
   b7db8:	f04f 0000 	mov.w	r0, #0
   b7dbc:	4770      	bx	lr
   b7dbe:	f04f 0001 	mov.w	r0, #1
   b7dc2:	4770      	bx	lr

000b7dc4 <__aeabi_d2iz>:
   b7dc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7dc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7dcc:	d215      	bcs.n	b7dfa <__aeabi_d2iz+0x36>
   b7dce:	d511      	bpl.n	b7df4 <__aeabi_d2iz+0x30>
   b7dd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7dd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7dd8:	d912      	bls.n	b7e00 <__aeabi_d2iz+0x3c>
   b7dda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7de2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7de6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7dea:	fa23 f002 	lsr.w	r0, r3, r2
   b7dee:	bf18      	it	ne
   b7df0:	4240      	negne	r0, r0
   b7df2:	4770      	bx	lr
   b7df4:	f04f 0000 	mov.w	r0, #0
   b7df8:	4770      	bx	lr
   b7dfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7dfe:	d105      	bne.n	b7e0c <__aeabi_d2iz+0x48>
   b7e00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b7e04:	bf08      	it	eq
   b7e06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7e0a:	4770      	bx	lr
   b7e0c:	f04f 0000 	mov.w	r0, #0
   b7e10:	4770      	bx	lr
   b7e12:	bf00      	nop

000b7e14 <__aeabi_d2uiz>:
   b7e14:	004a      	lsls	r2, r1, #1
   b7e16:	d211      	bcs.n	b7e3c <__aeabi_d2uiz+0x28>
   b7e18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7e1c:	d211      	bcs.n	b7e42 <__aeabi_d2uiz+0x2e>
   b7e1e:	d50d      	bpl.n	b7e3c <__aeabi_d2uiz+0x28>
   b7e20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7e24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7e28:	d40e      	bmi.n	b7e48 <__aeabi_d2uiz+0x34>
   b7e2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7e32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7e36:	fa23 f002 	lsr.w	r0, r3, r2
   b7e3a:	4770      	bx	lr
   b7e3c:	f04f 0000 	mov.w	r0, #0
   b7e40:	4770      	bx	lr
   b7e42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7e46:	d102      	bne.n	b7e4e <__aeabi_d2uiz+0x3a>
   b7e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7e4c:	4770      	bx	lr
   b7e4e:	f04f 0000 	mov.w	r0, #0
   b7e52:	4770      	bx	lr

000b7e54 <atexit>:
   b7e54:	2300      	movs	r3, #0
   b7e56:	4601      	mov	r1, r0
   b7e58:	461a      	mov	r2, r3
   b7e5a:	4618      	mov	r0, r3
   b7e5c:	f000 b856 	b.w	b7f0c <__register_exitproc>

000b7e60 <memcpy>:
   b7e60:	440a      	add	r2, r1
   b7e62:	4291      	cmp	r1, r2
   b7e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7e68:	d100      	bne.n	b7e6c <memcpy+0xc>
   b7e6a:	4770      	bx	lr
   b7e6c:	b510      	push	{r4, lr}
   b7e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7e72:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7e76:	4291      	cmp	r1, r2
   b7e78:	d1f9      	bne.n	b7e6e <memcpy+0xe>
   b7e7a:	bd10      	pop	{r4, pc}

000b7e7c <memset>:
   b7e7c:	4402      	add	r2, r0
   b7e7e:	4603      	mov	r3, r0
   b7e80:	4293      	cmp	r3, r2
   b7e82:	d100      	bne.n	b7e86 <memset+0xa>
   b7e84:	4770      	bx	lr
   b7e86:	f803 1b01 	strb.w	r1, [r3], #1
   b7e8a:	e7f9      	b.n	b7e80 <memset+0x4>

000b7e8c <srand>:
   b7e8c:	b538      	push	{r3, r4, r5, lr}
   b7e8e:	4b10      	ldr	r3, [pc, #64]	; (b7ed0 <srand+0x44>)
   b7e90:	681d      	ldr	r5, [r3, #0]
   b7e92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7e94:	4604      	mov	r4, r0
   b7e96:	b9b3      	cbnz	r3, b7ec6 <srand+0x3a>
   b7e98:	2018      	movs	r0, #24
   b7e9a:	f7fd ffdd 	bl	b5e58 <malloc>
   b7e9e:	4602      	mov	r2, r0
   b7ea0:	63a8      	str	r0, [r5, #56]	; 0x38
   b7ea2:	b920      	cbnz	r0, b7eae <srand+0x22>
   b7ea4:	4b0b      	ldr	r3, [pc, #44]	; (b7ed4 <srand+0x48>)
   b7ea6:	480c      	ldr	r0, [pc, #48]	; (b7ed8 <srand+0x4c>)
   b7ea8:	2142      	movs	r1, #66	; 0x42
   b7eaa:	f7fd fff5 	bl	b5e98 <__assert_func>
   b7eae:	490b      	ldr	r1, [pc, #44]	; (b7edc <srand+0x50>)
   b7eb0:	4b0b      	ldr	r3, [pc, #44]	; (b7ee0 <srand+0x54>)
   b7eb2:	e9c0 1300 	strd	r1, r3, [r0]
   b7eb6:	4b0b      	ldr	r3, [pc, #44]	; (b7ee4 <srand+0x58>)
   b7eb8:	6083      	str	r3, [r0, #8]
   b7eba:	230b      	movs	r3, #11
   b7ebc:	8183      	strh	r3, [r0, #12]
   b7ebe:	2100      	movs	r1, #0
   b7ec0:	2001      	movs	r0, #1
   b7ec2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ec6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ec8:	2200      	movs	r2, #0
   b7eca:	611c      	str	r4, [r3, #16]
   b7ecc:	615a      	str	r2, [r3, #20]
   b7ece:	bd38      	pop	{r3, r4, r5, pc}
   b7ed0:	2003e568 	.word	0x2003e568
   b7ed4:	000b8e99 	.word	0x000b8e99
   b7ed8:	000b8eb0 	.word	0x000b8eb0
   b7edc:	abcd330e 	.word	0xabcd330e
   b7ee0:	e66d1234 	.word	0xe66d1234
   b7ee4:	0005deec 	.word	0x0005deec

000b7ee8 <strcmp>:
   b7ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7eec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7ef0:	2a01      	cmp	r2, #1
   b7ef2:	bf28      	it	cs
   b7ef4:	429a      	cmpcs	r2, r3
   b7ef6:	d0f7      	beq.n	b7ee8 <strcmp>
   b7ef8:	1ad0      	subs	r0, r2, r3
   b7efa:	4770      	bx	lr

000b7efc <strlen>:
   b7efc:	4603      	mov	r3, r0
   b7efe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7f02:	2a00      	cmp	r2, #0
   b7f04:	d1fb      	bne.n	b7efe <strlen+0x2>
   b7f06:	1a18      	subs	r0, r3, r0
   b7f08:	3801      	subs	r0, #1
   b7f0a:	4770      	bx	lr

000b7f0c <__register_exitproc>:
   b7f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7fcc <__register_exitproc+0xc0>
   b7f14:	4606      	mov	r6, r0
   b7f16:	f8d8 0000 	ldr.w	r0, [r8]
   b7f1a:	461f      	mov	r7, r3
   b7f1c:	460d      	mov	r5, r1
   b7f1e:	4691      	mov	r9, r2
   b7f20:	f000 f856 	bl	b7fd0 <__retarget_lock_acquire_recursive>
   b7f24:	4b25      	ldr	r3, [pc, #148]	; (b7fbc <__register_exitproc+0xb0>)
   b7f26:	681c      	ldr	r4, [r3, #0]
   b7f28:	b934      	cbnz	r4, b7f38 <__register_exitproc+0x2c>
   b7f2a:	4c25      	ldr	r4, [pc, #148]	; (b7fc0 <__register_exitproc+0xb4>)
   b7f2c:	601c      	str	r4, [r3, #0]
   b7f2e:	4b25      	ldr	r3, [pc, #148]	; (b7fc4 <__register_exitproc+0xb8>)
   b7f30:	b113      	cbz	r3, b7f38 <__register_exitproc+0x2c>
   b7f32:	681b      	ldr	r3, [r3, #0]
   b7f34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f38:	6863      	ldr	r3, [r4, #4]
   b7f3a:	2b1f      	cmp	r3, #31
   b7f3c:	dd07      	ble.n	b7f4e <__register_exitproc+0x42>
   b7f3e:	f8d8 0000 	ldr.w	r0, [r8]
   b7f42:	f000 f847 	bl	b7fd4 <__retarget_lock_release_recursive>
   b7f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f4e:	b34e      	cbz	r6, b7fa4 <__register_exitproc+0x98>
   b7f50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7f54:	b988      	cbnz	r0, b7f7a <__register_exitproc+0x6e>
   b7f56:	4b1c      	ldr	r3, [pc, #112]	; (b7fc8 <__register_exitproc+0xbc>)
   b7f58:	b923      	cbnz	r3, b7f64 <__register_exitproc+0x58>
   b7f5a:	f8d8 0000 	ldr.w	r0, [r8]
   b7f5e:	f000 f838 	bl	b7fd2 <__retarget_lock_release>
   b7f62:	e7f0      	b.n	b7f46 <__register_exitproc+0x3a>
   b7f64:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7f68:	f7fd ff76 	bl	b5e58 <malloc>
   b7f6c:	2800      	cmp	r0, #0
   b7f6e:	d0f4      	beq.n	b7f5a <__register_exitproc+0x4e>
   b7f70:	2300      	movs	r3, #0
   b7f72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7f76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7f7a:	6863      	ldr	r3, [r4, #4]
   b7f7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7f80:	2201      	movs	r2, #1
   b7f82:	409a      	lsls	r2, r3
   b7f84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7f88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7f8c:	4313      	orrs	r3, r2
   b7f8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7f92:	2e02      	cmp	r6, #2
   b7f94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7f98:	bf02      	ittt	eq
   b7f9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7f9e:	4313      	orreq	r3, r2
   b7fa0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7fa4:	6863      	ldr	r3, [r4, #4]
   b7fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b7faa:	1c5a      	adds	r2, r3, #1
   b7fac:	3302      	adds	r3, #2
   b7fae:	6062      	str	r2, [r4, #4]
   b7fb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7fb4:	f000 f80e 	bl	b7fd4 <__retarget_lock_release_recursive>
   b7fb8:	2000      	movs	r0, #0
   b7fba:	e7c6      	b.n	b7f4a <__register_exitproc+0x3e>
   b7fbc:	2003e7e8 	.word	0x2003e7e8
   b7fc0:	2003e75c 	.word	0x2003e75c
   b7fc4:	00000000 	.word	0x00000000
   b7fc8:	000b5e59 	.word	0x000b5e59
   b7fcc:	2003e5cc 	.word	0x2003e5cc

000b7fd0 <__retarget_lock_acquire_recursive>:
   b7fd0:	4770      	bx	lr

000b7fd2 <__retarget_lock_release>:
   b7fd2:	4770      	bx	lr

000b7fd4 <__retarget_lock_release_recursive>:
   b7fd4:	4770      	bx	lr

000b7fd6 <link_code_end>:
	...

000b7fd8 <dynalib_user>:
   b7fd8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7fe8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7ff8:	7620 7269 7574 6c61 7400 6d65 3a70 0020      virtual.temp: .
   b8008:	6573 656c 7463 6d20 6e69 6220 6972 6867     select min brigh
   b8018:	6e74 7365 0073 7563 7272 6e65 2074 6176     tness.current va
   b8028:	756c 3a65 0020 7563 7272 6e65 2074 7262     lue: .current br
   b8038:	6769 7468 656e 7373 203a 7300 6c65 6365     ightness: .selec
   b8048:	2074 616d 2078 7262 6769 7468 656e 7373     t max brightness
   b8058:	4800 6c65 006c 6564 6166 6c75 2074 4d00     .Hell.default .M
   b8068:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   b8078:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   b8088:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   b8098:	2073 4f4d 4544 7525 003e 0000               s MODE%u>...

000b80a4 <_ZTVN8particle11SPISettingsE>:
	...
   b80ac:	4509 000b 43ed 000b 43ef 000b               .E...C...C..

000b80b8 <_ZL12splash1_data>:
   b80b8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b80c8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b80d8:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b80e8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b80f8:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8108:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8120:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8130:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b8140:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b8150:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b8160:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b8170:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b8180:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8190:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b81a0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b81b0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b81c0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b81d0:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b81e0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b81f0:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8200:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b8210:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b8220:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b8230:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b8248:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b8260:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b8270:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b8280:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b8290:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b82a0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b82b0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b82c0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b82d0:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b82e0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b82f0:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b8300:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b8310:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b8320:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b8330:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b8340:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b8350:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b8360:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b8370:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b8378 <_ZL12splash2_data>:
   b8378:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b8388:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b8398:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b83b4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b83c4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b83d4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b83e4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b83f4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8404:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8414:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8424:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8434:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8444:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8454:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8464:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8474:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8484:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8494:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b84a4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b84b4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b84c4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b84d4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b84e4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b84f4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b850c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b851c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b852c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b853c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b854c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b8558 <_ZTV16Adafruit_SSD1306>:
	...
   b8560:	43fd 000b 4415 000b 5871 000b 6bc5 000b     .C...D..qX...k..
   b8570:	4429 000b 5277 000b 5279 000b 52ab 000b     )D..wR..yR...R..
   b8580:	5287 000b 5299 000b 51b9 000b 5277 000b     .R...R...Q..wR..
   b8590:	54a3 000b 4637 000b 4bdf 000b 4b91 000b     .T..7F...K...K..
   b85a0:	533b 000b 5381 000b 539d 000b 5421 000b     ;S...S...S..!T..

000b85b0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b85b0:	8000 e0c0 f8f0 fefc                         ........

000b85b8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b85b8:	0100 0703 1f0f 7f3f                         ......?.

000b85c0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b85c0:	d5ae a880                                   ....

000b85c4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b85c4:	00d3 8d40                                   ..@.

000b85c8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b85c8:	0020 c8a1                                    ...

000b85cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b85cc:	40db a6a4 af2e                              .@....

000b85d2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b85d2:	02da 8f81                                   ....

000b85d6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b85d6:	12da                                         ...

000b85d9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b85d9:	02da                                         ...

000b85dc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b85dc:	0022 21ff 0000 0000                         "..!....

000b85e4 <_ZTV16OledWingAdafruit>:
	...
   b85ec:	50a5 000b 50c5 000b 5871 000b 6bc5 000b     .P...P..qX...k..
   b85fc:	4429 000b 5277 000b 5279 000b 52ab 000b     )D..wR..yR...R..
   b860c:	5287 000b 5299 000b 51b9 000b 5277 000b     .R...R...Q..wR..
   b861c:	54a3 000b 4637 000b 4bdf 000b 4b91 000b     .T..7F...K...K..
   b862c:	533b 000b 5381 000b 539d 000b 5421 000b     ;S...S...S..!T..

000b863c <_ZL4font>:
   b863c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b864c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b865c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b866c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b867c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b868c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b869c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b86ac:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b86bc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b86cc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b86dc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b86ec:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b86fc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b870c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b871c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b872c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b873c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b874c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b875c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b876c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b877c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b878c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b879c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b87ac:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b87bc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b87cc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b87dc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b87ec:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b87fc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b880c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b881c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b882c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b883c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b884c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b885c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b886c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b887c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b888c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b889c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b88ac:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b88bc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b88cc:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b88dc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b88ec:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b88fc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b890c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b891c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b892c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b893c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b894c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b895c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b896c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b897c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b898c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b899c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b89ac:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b89bc:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b89cc:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b89dc:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b89ec:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b89fc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8a0c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8a1c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8a2c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8a3c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8a4c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8a5c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8a6c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8a7c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8a8c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8a9c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8aac:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8abc:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8acc:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8adc:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8aec:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8afc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8b0c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8b1c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8b2c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b8b3c <_ZTV12Adafruit_GFX>:
	...
   b8b4c:	5871 000b 6bc5 000b 40a5 000b 5277 000b     qX...k...@..wR..
   b8b5c:	5279 000b 52ab 000b 5287 000b 5299 000b     yR...R...R...R..
   b8b6c:	51b9 000b 5277 000b 54a3 000b 54a1 000b     .Q..wR...T...T..
   b8b7c:	52c3 000b 5301 000b 533b 000b 5381 000b     .R...S..;S...S..
   b8b8c:	539d 000b 5421 000b                         .S..!T..

000b8b94 <_ZTVN5spark12NetworkClassE>:
	...
   b8b9c:	5eb9 000b 5ec3 000b 5ecd 000b 5ed7 000b     .^...^...^...^..
   b8bac:	5ee1 000b 5eed 000b 5ef9 000b 5f01 000b     .^...^...^..._..
   b8bbc:	5f09 000b 5f15 000b 5f1d 000b 5f27 000b     ._..._..._..'_..
   b8bcc:	5f31 000b                                   1_..

000b8bd0 <_ZTVN5spark9WiFiClassE>:
	...
   b8bd8:	607b 000b 6071 000b 6067 000b 601d 000b     {`..q`..g`...`..
   b8be8:	605b 000b 604f 000b 5ef9 000b 5f01 000b     [`..O`...^..._..
   b8bf8:	6043 000b 603b 000b 6031 000b 6027 000b     C`..;`..1`..'`..
   b8c08:	5f31 000b 6977 6972 676e 7200 6365 2076     1_..wiring.recv 
   b8c18:	7265 6f72 2072 203d 6425 0000               error = %d..

000b8c24 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8c2c:	611d 000b 6141 000b 6673 000b 614f 000b     .a..Aa..sf..Oa..
   b8c3c:	6121 000b                                   !a..

000b8c40 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8c48 <_ZTV9TCPClient>:
	...
   b8c50:	61cd 000b 6201 000b 6099 000b 60b3 000b     .a...b...`...`..
   b8c60:	6509 000b 60dd 000b 637f 000b 6111 000b     .e...`...c...a..
   b8c70:	6411 000b 6251 000b 63ad 000b 65bd 000b     .d..Qb...c...e..
   b8c80:	634d 000b 6113 000b 60c5 000b 6155 000b     Mc...a...`..Ua..
   b8c90:	6231 000b                                   1b..

000b8c94 <_ZTV11USARTSerial>:
	...
   b8c9c:	6679 000b 66e5 000b 66bd 000b 6bc5 000b     yf...f...f...k..
   b8cac:	668d 000b 66a9 000b 669b 000b 66b7 000b     .f...f...f...f..
   b8cbc:	667b 000b 667f 000b                         {f...f..

000b8cc4 <_ZTV7TwoWire>:
	...
   b8ccc:	671d 000b 6767 000b 673f 000b 671f 000b     .g..gg..?g...g..
   b8cdc:	6747 000b 674f 000b 6757 000b 675f 000b     Gg..Og..Wg.._g..

000b8cec <_ZTV9USBSerial>:
	...
   b8cf4:	6827 000b 688f 000b 6865 000b 6bc5 000b     'h...h..eh...k..
   b8d04:	6857 000b 6829 000b 6839 000b 6889 000b     Wh..)h..9h...h..
   b8d14:	6849 000b 6821 000b                         Ih..!h..

000b8d1c <_ZTV9IPAddress>:
	...
   b8d24:	6931 000b 6921 000b 6923 000b 5925 252d     1i..!i..#i..%Y-%
   b8d34:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b8d44:	7361 7463 6d69 0065 7061 0070 616e 006e     asctime.app.nan.
   b8d54:	6e69 0066 766f 0066 002e                    inf.ovf...

000b8d5e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8d5e:	0800 1810 2820 3830 0000                    .... (08..

000b8d68 <_ZTVN5spark13EthernetClassE>:
	...
   b8d70:	708b 000b 7081 000b 7077 000b 706d 000b     .p...p..wp..mp..
   b8d80:	7061 000b 7055 000b 5ef9 000b 5f01 000b     ap..Up...^..._..
   b8d90:	7049 000b 7041 000b 7037 000b 702d 000b     Ip..Ap..7p..-p..
   b8da0:	5f31 000b                                   1_..

000b8da4 <_ZSt7nothrow>:
	...

000b8da5 <_ZTSSt19_Sp_make_shared_tag>:
   b8da5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8db5:	6572 5f64 6174 0067 0000                     red_tag....

000b8dc0 <_ZTISt19_Sp_make_shared_tag>:
   b8dc0:	8e00 000b 8da5 000b                         ........

000b8dc8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8dc8:	8e60 000b 8dd4 000b 8e84 000b               `...........

000b8dd4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8dd4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8de4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8df4:	0045 0000                                   E...

000b8df8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8df8:	0000 0000 8dc8 000b 7315 000b 7329 000b     .........s..)s..
   b8e08:	74bd 000b 74bd 000b 7393 000b 72d5 000b     .t...t...s...r..
   b8e18:	737b 000b 733d 000b 7307 000b               {s..=s...s..

000b8e24 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8e24:	8e60 000b 8e30 000b 8dc8 000b               `...0.......

000b8e30 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8e30:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8e40:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8e50:	666e 456f 0000 0000                         nfoE....

000b8e58 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8e58:	0000 0000 8e24 000b 73bd 000b 73d1 000b     ....$....s...s..
   b8e68:	74bd 000b 74bd 000b 7393 000b 72d5 000b     .t...t...s...r..
   b8e78:	7491 000b 741d 000b 73e5 000b               .t...t...s..

000b8e84 <_ZTISt9type_info>:
   b8e84:	8e00 000b 8e8c 000b                         ........

000b8e8c <_ZTSSt9type_info>:
   b8e8c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8e9c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8eac:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8ebc:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8ecc:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8edc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8eec:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8efc:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8f0c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8f1c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8f2d <link_const_variable_data_end>:
   b8f2d:	00          	.byte	0x00
	...

000b8f30 <link_constructors_location>:
   b8f30:	000b4389 	.word	0x000b4389
   b8f34:	000b6009 	.word	0x000b6009
   b8f38:	000b6085 	.word	0x000b6085
   b8f3c:	000b6b95 	.word	0x000b6b95
   b8f40:	000b6ba1 	.word	0x000b6ba1
   b8f44:	000b6bb5 	.word	0x000b6bb5
   b8f48:	000b6e95 	.word	0x000b6e95
   b8f4c:	000b6ea5 	.word	0x000b6ea5
   b8f50:	000b7095 	.word	0x000b7095

000b8f54 <link_constructors_end>:
	...
